openapi: 3.0.1
info:
  title: Matrix Client-Server API
  version: unstable
servers:
- url: https://matrix.org/
paths:
  /.well-known/matrix/client:
    get:
      description: |-
        Gets discovery information about the domain. The file may include
        additional keys, which MUST follow the Java package naming convention,
        e.g. ``com.example.myapp.property``. This ensures property names are
        suitably namespaced for each application and reduces the risk of
        clashes.

        Note that this endpoint is not necessarily handled by the homeserver,
        but by another webserver, to be used for discovering the homeserver URL.
      operationId: getWellknown
      responses:
        200:
          content:
            application/json:
              schema:
                additionalProperties:
                  description: Application-dependent keys using Java package naming
                    convention.
                  properties: {}
                  type: object
                description: |-
                  Used by clients to determine the homeserver, identity server, and other
                  optional components they should be interacting with.
                example:
                  m.homeserver:
                    base_url: https://matrix.example.com
                  m.identity_server:
                    base_url: https://identity.example.com
                  org.example.custom.property:
                    app_url: https://custom.app.example.org
                title: Discovery Information
                type: object
          description: Server discovery information.
        404:
          content: {}
          description: No server discovery information available.
      summary: Gets Matrix server discovery information about the domain.
      tags:
      - Server administration
  /_matrix/client/unstable/account/3pid:
    get:
      description: |-
        Gets a list of the third party identifiers that the homeserver has
        associated with the user's account.

        This is *not* the same as the list of third party identifiers bound to
        the user's Matrix ID in identity servers.

        Identifiers in this list may be used by the homeserver as, for example,
        identifiers that it will accept to reset the user's account password.
      operationId: getAccount3PIDs
      responses:
        200:
          content:
            application/json:
              example:
                threepids:
                - added_at: 1535336848756
                  address: monkey@banana.island
                  medium: email
                  validated_at: 1535176800000
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: The lookup was successful.
      security:
      - accessToken: []
      summary: Gets a list of a user's third party identifiers.
      tags:
      - User data
    post:
      description: Adds contact information to the user's account.
      operationId: post3PIDs
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          application/json:
            schema:
              example:
                bind: false
                three_pid_creds:
                  client_secret: d0n'tT3ll
                  id_server: matrix.org
                  sid: abc123987
              properties:
                bind:
                  description: |-
                    Whether the homeserver should also bind this third party
                    identifier to the account's Matrix ID with the passed identity
                    server. Default: ``false``.
                  type: boolean
                three_pid_creds:
                  $ref: '#/components/schemas/ThreePidCredentials'
              required:
              - three_pid_creds
              type: object
        required: false
      responses:
        200:
          content:
            application/json:
              example:
                submit_url: https://example.org/path/to/submitToken
            schema:
              example:
                properties:
                  submit_url:
                    description: |-
                      An optional field containing a URL where the client must
                      submit the validation token to, with identical parameters
                      to the Identity Service API's ``POST
                      /validate/email/submitToken`` endpoint. The homeserver must
                      send this token to the user (if applicable), who should
                      then be prompted to provide it to the client.

                      If this field is not present, the client can assume that
                      verification will happen without the client's involvement
                      provided the homeserver advertises this specification version
                      in the ``/versions`` response (ie: r0.5.0).
                    example: https://example.org/path/to/submitToken
                    type: string
                type: object
          description: The addition was successful.
        403:
          content:
            application/json:
              example:
                errcode: M_THREEPID_AUTH_FAILED
                error: The third party credentials could not be verified by the identity
                  server.
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: The credentials could not be verified with the identity server.
      security:
      - accessToken: []
      summary: Adds contact information to the user's account.
      tags:
      - User data
      x-codegen-request-body-name: body
  /_matrix/client/unstable/account/3pid/delete:
    post:
      description: |-
        Removes a third party identifier from the user's account. This might not
        cause an unbind of the identifier from the identity server.
      operationId: delete3pidFromAccount
      requestBody:
        $ref: '#/components/requestBodies/inline_object_1'
        content:
          application/json:
            schema:
              properties:
                address:
                  description: The third party address being removed.
                  example: example@example.org
                  type: string
                id_server:
                  description: |-
                    The identity server to unbind from. If not provided, the homeserver
                    MUST use the ``id_server`` the identifier was added through. If the
                    homeserver does not know the original ``id_server``, it MUST return
                    a ``id_server_unbind_result`` of ``no-support``.
                  example: example.org
                  type: string
                medium:
                  description: The medium of the third party identifier being removed.
                  enum:
                  - email
                  - msisdn
                  example: email
                  type: string
              required:
              - address
              - medium
              type: object
        required: false
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
          description: |-
            The homeserver has disassociated the third party identifier from the
            user.
      security:
      - accessToken: []
      summary: Deletes a third party identifier from the user's account
      tags:
      - User data
      x-codegen-request-body-name: body
  /_matrix/client/unstable/account/deactivate:
    post:
      description: |-
        Deactivate the user's account, removing all ability for the user to
        login again.

        This API endpoint uses the `User-Interactive Authentication API`_.

        An access token should be submitted to this endpoint if the client has
        an active session.

        The homeserver may change the flows available depending on whether a
        valid access token is provided.
      operationId: deactivateAccount
      requestBody:
        $ref: '#/components/requestBodies/inline_object_2'
        content:
          application/json:
            schema:
              properties:
                auth:
                  additionalProperties:
                    description: Keys dependent on the login type
                    properties: {}
                    type: object
                  description: Additional authentication information for the user-interactive
                    authentication API.
                  example:
                    example_credential: verypoorsharedsecret
                    session: xxxxx
                    type: example.type.foo
                  title: Authentication Data
                  type: object
                id_server:
                  description: |-
                    The identity server to unbind all of the user's 3PIDs from.
                    If not provided, the homeserver MUST use the ``id_server``
                    that was originally use to bind each identifier. If the
                    homeserver does not know which ``id_server`` that was,
                    it must return an ``id_server_unbind_result`` of
                    ``no-support``.
                  example: example.org
                  type: string
              type: object
        required: false
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
          description: The account has been deactivated.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication response'
          description: The homeserver requires additional authentication information.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Deactivate a user's account.
      tags:
      - User data
      x-codegen-request-body-name: body
  /_matrix/client/unstable/account/password:
    post:
      description: |-
        Changes the password for an account on this homeserver.

        This API endpoint uses the `User-Interactive Authentication API`_ to
        ensure the user changing the password is actually the owner of the
        account.

        An access token should be submitted to this endpoint if the client has
        an active session.

        The homeserver may change the flows available depending on whether a
        valid access token is provided. The homeserver SHOULD NOT revoke the
        access token provided in the request, however all other access tokens
        for the user should be revoked if the request succeeds.
      operationId: changePassword
      requestBody:
        $ref: '#/components/requestBodies/inline_object_3'
        content:
          application/json:
            schema:
              properties:
                auth:
                  additionalProperties:
                    description: Keys dependent on the login type
                    properties: {}
                    type: object
                  description: Additional authentication information for the user-interactive
                    authentication API.
                  example:
                    example_credential: verypoorsharedsecret
                    session: xxxxx
                    type: example.type.foo
                  title: Authentication Data
                  type: object
                new_password:
                  description: The new password for the account.
                  example: ihatebananas
                  type: string
              required:
              - new_password
              type: object
        required: false
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The password has been changed.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication response'
          description: The homeserver requires additional authentication information.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Changes a user's password.
      tags:
      - User data
      x-codegen-request-body-name: body
  /_matrix/client/unstable/account/whoami:
    get:
      description: "Gets information about the owner of a given access token. \n\n\
        Note that, as with the rest of the Client-Server API, \nApplication Services\
        \ may masquerade as users within their \nnamespace by giving a ``user_id``\
        \ query parameter. In this \nsituation, the server should verify that the\
        \ given ``user_id``\nis registered by the appservice, and return it in the\
        \ response \nbody."
      operationId: getTokenOwner
      responses:
        200:
          content:
            application/json:
              example:
                user_id: '@joe:example.org'
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
          description: The token belongs to a known user.
        401:
          content:
            application/json:
              example:
                errcode: M_UNKNOWN_TOKEN
                error: Unrecognised access token.
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: The token is not recognised
        403:
          content:
            application/json:
              example:
                errcode: M_FORBIDDEN
                error: Application service has not registered this user.
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: The appservice cannot masquerade as the user or has not registered
            them.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Gets information about the owner of an access token.
      tags:
      - User data
  /_matrix/client/unstable/admin/whois/{userId}:
    get:
      description: |-
        Gets information about a particular user.

        This API may be restricted to only be called by the user being looked
        up, or by a server admin. Server-local administrator privileges are not
        specified in this document.
      operationId: getWhoIs
      parameters:
      - description: The user to look up.
        example: '@peter:rabbit.rocks'
        in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                devices:
                  teapot:
                    sessions:
                    - connections:
                      - ip: 127.0.0.1
                        last_seen: 1411996332123
                        user_agent: curl/7.31.0-DEV
                      - ip: 10.0.0.2
                        last_seen: 1411996332123
                        user_agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36
                          (KHTML, like Gecko) Chrome/37.0.2062.120 Safari/537.36
                user_id: '@peter:rabbit.rocks'
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
          description: The lookup was successful.
      security:
      - accessToken: []
      summary: Gets information about a particular user.
      tags:
      - Server administration
  /_matrix/client/unstable/capabilities:
    get:
      description: |-
        Gets information about the server's supported feature set
        and other relevant capabilities.
      operationId: getCapabilities
      responses:
        200:
          content:
            application/json:
              example:
                capabilities:
                  com.example.custom.ratelimit:
                    max_requests_per_hour: 600
                  m.change_password:
                    enabled: false
                  m.room_versions:
                    available:
                      1: stable
                      2: stable
                      3: unstable
                      test-version: unstable
                    default: "1"
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
          description: The capabilities of the server.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Gets information about the server's capabilities.
      tags:
      - Capabilities
  /_matrix/client/unstable/createRoom:
    post:
      description: |-
        Create a new room with various configuration options.

        The server MUST apply the normal state resolution rules when creating
        the new room, including checking power levels for each event. It MUST
        apply the events implied by the request in the following order:

        0. A default ``m.room.power_levels`` event, giving the room creator
           (and not other members) permission to send state events. Overridden
           by the ``power_level_content_override`` parameter.

        1. Events set by the ``preset``. Currently these are the ``m.room.join_rules``,
           ``m.room.history_visibility``, and ``m.room.guest_access`` state events.

        2. Events listed in ``initial_state``, in the order that they are
           listed.

        3. Events implied by ``name`` and ``topic`` (``m.room.name`` and ``m.room.topic``
           state events).

        4. Invite events implied by ``invite`` and ``invite_3pid`` (``m.room.member`` with
           ``membership: invite`` and ``m.room.third_party_invite``).

        The available presets do the following with respect to room state:

        ========================  ==============  ======================  ================  =========
                 Preset           ``join_rules``  ``history_visibility``  ``guest_access``  Other
        ========================  ==============  ======================  ================  =========
        ``private_chat``          ``invite``      ``shared``              ``can_join``
        ``trusted_private_chat``  ``invite``      ``shared``              ``can_join``      All invitees are given the same power level as the room creator.
        ``public_chat``           ``public``      ``shared``              ``forbidden``
        ========================  ==============  ======================  ================  =========

        The server will create a ``m.room.create`` event in the room with the
        requesting user as the creator, alongside other keys provided in the
        ``creation_content``.
      operationId: createRoom
      requestBody:
        $ref: '#/components/requestBodies/inline_object_4'
        content:
          application/json:
            schema:
              example:
                creation_content:
                  m.federate: false
                name: The Grand Duke Pub
                preset: public_chat
                room_alias_name: thepub
                topic: All about happy hour
              properties:
                creation_content:
                  description: |-
                    Extra keys, such as ``m.federate``, to be added to the content
                    of the `m.room.create`_ event. The server will clobber the following
                    keys: ``creator``, ``room_version``. Future versions of the specification
                    may allow the server to clobber other keys.
                  properties: {}
                  title: CreationContent
                  type: object
                initial_state:
                  description: |-
                    A list of state events to set in the new room. This allows
                    the user to override the default state events set in the new
                    room. The expected format of the state events are an object
                    with type, state_key and content keys set.

                    Takes precedence over events set by ``preset``, but gets
                    overriden by ``name`` and ``topic`` keys.
                  items:
                    $ref: '#/components/schemas/StateEvent'
                  type: array
                invite:
                  description: |-
                    A list of user IDs to invite to the room. This will tell the
                    server to invite everyone in the list to the newly created room.
                  items:
                    type: string
                  type: array
                invite_3pid:
                  description: |-
                    A list of objects representing third party IDs to invite into
                    the room.
                  items:
                    $ref: '#/components/schemas/Invite3pid'
                  type: array
                is_direct:
                  description: |-
                    This flag makes the server set the ``is_direct`` flag on the
                    ``m.room.member`` events sent to the users in ``invite`` and
                    ``invite_3pid``. See `Direct Messaging`_ for more information.
                  type: boolean
                name:
                  description: |-
                    If this is included, an ``m.room.name`` event will be sent
                    into the room to indicate the name of the room. See Room
                    Events for more information on ``m.room.name``.
                  type: string
                power_level_content_override:
                  description: |-
                    The power level content to override in the default power level
                    event. This object is applied on top of the generated `m.room.power_levels`_
                    event content prior to it being sent to the room. Defaults to
                    overriding nothing.
                  properties: {}
                  title: Power Level Event Content
                  type: object
                preset:
                  description: |-
                    Convenience parameter for setting various default state events
                    based on a preset.

                    If unspecified, the server should use the ``visibility`` to determine
                    which preset to use. A visbility of ``public`` equates to a preset of
                    ``public_chat`` and ``private`` visibility equates to a preset of
                    ``private_chat``.
                  enum:
                  - private_chat
                  - public_chat
                  - trusted_private_chat
                  type: string
                room_alias_name:
                  description: |-
                    The desired room alias **local part**. If this is included, a
                    room alias will be created and mapped to the newly created
                    room. The alias will belong on the *same* homeserver which
                    created the room. For example, if this was set to "foo" and
                    sent to the homeserver "example.com" the complete room alias
                    would be ``#foo:example.com``.

                    The complete room alias will become the canonical alias for
                    the room.
                  type: string
                room_version:
                  description: |-
                    The room version to set for the room. If not provided, the homeserver is
                    to use its configured default. If provided, the homeserver will return a
                    400 error with the errcode ``M_UNSUPPORTED_ROOM_VERSION`` if it does not
                    support the room version.
                  example: "1"
                  type: string
                topic:
                  description: |-
                    If this is included, an ``m.room.topic`` event will be sent
                    into the room to indicate the topic for the room. See Room
                    Events for more information on ``m.room.topic``.
                  type: string
                visibility:
                  description: |-
                    A ``public`` visibility indicates that the room will be shown
                    in the published room list. A ``private`` visibility will hide
                    the room from the published room list. Rooms default to
                    ``private`` visibility if this key is not included. NB: This
                    should not be confused with ``join_rules`` which also uses the
                    word ``public``.
                  enum:
                  - public
                  - private
                  type: string
              type: object
        description: The desired room configuration.
        required: false
      responses:
        200:
          content:
            application/json:
              example:
                room_id: '!sefiuhWgwghwWgh:example.com'
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
          description: Information about the newly created room.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: |2-

            The request is invalid. A meaningful ``errcode`` and description
            error text will be returned. Example reasons for rejection include:

            - The request body is malformed (``errcode`` set to ``M_BAD_JSON``
              or ``M_NOT_JSON``).

            - The room alias specified is already taken (``errcode`` set to
              ``M_ROOM_IN_USE``).

            - The initial state implied by the parameters to the request is
              invalid: for example, the user's ``power_level`` is set below
              that necessary to set the room name (``errcode`` set to
              ``M_INVALID_ROOM_STATE``).

            - The homeserver doesn't support the requested room version, or
              one or more users being invited to the new room are residents
              of a homeserver which does not support the requested room version.
              The ``errcode`` will be ``M_UNSUPPORTED_ROOM_VERSION`` in these
              cases.
      security:
      - accessToken: []
      summary: Create a new room
      tags:
      - Room creation
      x-codegen-request-body-name: body
  /_matrix/client/unstable/delete_devices:
    post:
      description: |-
        This API endpoint uses the `User-Interactive Authentication API`_.

        Deletes the given devices, and invalidates any access token associated with them.
      operationId: deleteDevices
      requestBody:
        $ref: '#/components/requestBodies/inline_object_5'
        content:
          application/json:
            schema:
              properties:
                auth:
                  additionalProperties:
                    description: Keys dependent on the login type
                    properties: {}
                    type: object
                  description: |-
                    Additional authentication information for the
                    user-interactive authentication API.
                  example:
                    example_credential: verypoorsharedsecret
                    session: xxxxx
                    type: example.type.foo
                  title: Authentication Data
                  type: object
                devices:
                  description: The list of device IDs to delete.
                  example:
                  - QBUAZIFURK
                  - AUIECTSRND
                  items:
                    description: A list of device IDs.
                    type: string
                  type: array
              required:
              - devices
              type: object
        required: false
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: |-
            The devices were successfully removed, or had been removed
            previously.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication response'
          description: The homeserver requires additional authentication information.
      security:
      - accessToken: []
      summary: Bulk deletion of devices
      tags:
      - Device management
      x-codegen-request-body-name: body
  /_matrix/client/unstable/devices:
    get:
      description: Gets information about all devices for the current user.
      operationId: getDevices
      responses:
        200:
          content:
            application/json:
              example:
                devices:
                - device_id: QBUAZIFURK
                  display_name: android
                  last_seen_ip: 1.2.3.4
                  last_seen_ts: 1474491775024
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
          description: Device information
      security:
      - accessToken: []
      summary: List registered devices for the current user
      tags:
      - Device management
  /_matrix/client/unstable/devices/{deviceId}:
    delete:
      description: |-
        This API endpoint uses the `User-Interactive Authentication API`_.

        Deletes the given device, and invalidates any access token associated with it.
      operationId: deleteDevice
      parameters:
      - description: The device to delete.
        example: QBUAZIFURK
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_7'
        content:
          application/json:
            schema:
              properties:
                auth:
                  additionalProperties:
                    description: Keys dependent on the login type
                    properties: {}
                    type: object
                  description: |-
                    Additional authentication information for the
                    user-interactive authentication API.
                  example:
                    example_credential: verypoorsharedsecret
                    session: xxxxx
                    type: example.type.foo
                  title: Authentication Data
                  type: object
              type: object
        required: false
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: |-
            The device was successfully removed, or had been removed
            previously.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication response'
          description: The homeserver requires additional authentication information.
      security:
      - accessToken: []
      summary: Delete a device
      tags:
      - Device management
      x-codegen-request-body-name: body
    get:
      description: Gets information on a single device, by device id.
      operationId: getDevice
      parameters:
      - description: The device to retrieve.
        example: QBUAZIFURK
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                device_id: QBUAZIFURK
                display_name: android
                last_seen_ip: 1.2.3.4
                last_seen_ts: 1474491775024
              schema:
                $ref: '#/components/schemas/inline_response_200_8'
          description: Device information
        404:
          content: {}
          description: The current user has no device with the given ID.
      security:
      - accessToken: []
      summary: Get a single device
      tags:
      - Device management
    put:
      description: Updates the metadata on the given device.
      operationId: updateDevice
      parameters:
      - description: The device to update.
        example: QBUAZIFURK
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_6'
        content:
          application/json:
            schema:
              properties:
                display_name:
                  description: |-
                    The new display name for this device. If not given, the
                    display name is unchanged.
                  example: My other phone
                  type: string
              type: object
        description: New information for the device.
        required: true
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The device was successfully updated.
        404:
          content: {}
          description: The current user has no device with the given ID.
      security:
      - accessToken: []
      summary: Update a device
      tags:
      - Device management
      x-codegen-request-body-name: body
  /_matrix/client/unstable/directory/list/appservice/{networkId}/{roomId}:
    put:
      description: |-
        Updates the visibility of a given room on the application service's room
        directory.

        This API is similar to the room directory visibility API used by clients
        to update the homeserver's more general room directory.

        This API requires the use of an application service access token (``as_token``)
        instead of a typical client's access_token. This API cannot be invoked by
        users who are not identified as application services.
      operationId: updateAppserviceRoomDirectoryVsibility
      parameters:
      - description: |-
          The protocol (network) ID to update the room list for. This would
          have been provided by the application service as being listed as
          a supported protocol.
        example: irc
        in: path
        name: networkId
        required: true
        schema:
          type: string
      - description: The room ID to add to the directory.
        example: '!somewhere:example.org'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_8'
        content:
          application/json:
            schema:
              properties:
                visibility:
                  description: |-
                    Whether the room should be visible (public) in the directory
                    or not (private).
                  enum:
                  - public
                  - private
                  example: public
                  type: string
              required:
              - visibility
              type: object
        required: true
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The room's directory visibility has been updated.
      security:
      - accessToken: []
      summary: Updates a room's visibility in the application service's room directory.
      tags:
      - Application service room directory management
      x-codegen-request-body-name: body
  /_matrix/client/unstable/directory/room/{roomAlias}:
    delete:
      description: |-
        Remove a mapping of room alias to room ID.

        Servers may choose to implement additional access control checks here, for instance that room aliases can only be deleted by their creator or a server administrator.
      operationId: deleteRoomAlias
      parameters:
      - description: The room alias to remove.
        example: '#monkeys:matrix.org'
        in: path
        name: roomAlias
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The mapping was deleted.
        404:
          content:
            application/json:
              example:
                errcode: M_NOT_FOUND
                error: 'Room alias #monkeys:example.org not found.'
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: There is no mapped room ID for this room alias.
      security:
      - accessToken: []
      summary: Remove a mapping of room alias to room ID.
      tags:
      - Room directory
    get:
      description: |-
        Requests that the server resolve a room alias to a room ID.

        The server will use the federation API to resolve the alias if the
        domain part of the alias does not correspond to the server's own
        domain.
      operationId: getRoomIdByAlias
      parameters:
      - description: The room alias.
        example: '#monkeys:matrix.org'
        in: path
        name: roomAlias
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                room_id: '!abnjk1jdasj98:capuchins.com'
                servers:
                - capuchins.com
                - matrix.org
                - another.com
              schema:
                $ref: '#/components/schemas/inline_response_200_9'
          description: The room ID and other information for this alias.
        404:
          content:
            application/json:
              example:
                errcode: M_NOT_FOUND
                error: 'Room alias #monkeys:matrix.org not found.'
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: There is no mapped room ID for this room alias.
      summary: Get the room ID corresponding to this room alias.
      tags:
      - Room directory
    put:
      operationId: setRoomAlias
      parameters:
      - description: The room alias to set.
        example: '#monkeys:matrix.org'
        in: path
        name: roomAlias
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_9'
        content:
          application/json:
            schema:
              example:
                room_id: '!abnjk1jdasj98:capuchins.com'
              properties:
                room_id:
                  description: The room ID to set.
                  type: string
              required:
              - room_id
              type: object
        description: Information about this room alias.
        required: true
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The mapping was created.
        409:
          content:
            application/json:
              example:
                errcode: M_UNKNOWN
                error: 'Room alias #monkeys:matrix.org already exists.'
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: A room alias with that name already exists.
      security:
      - accessToken: []
      summary: Create a new mapping from room alias to room ID.
      tags:
      - Room directory
      x-codegen-request-body-name: body
  /_matrix/client/unstable/events:
    get:
      deprecated: true
      description: |-
        This will listen for new events and return them to the caller. This will
        block until an event is received, or until the ``timeout`` is reached.

        This endpoint was deprecated in r0 of this specification. Clients
        should instead call the |/sync|_ API with a ``since`` parameter. See
        the `migration guide
        <https://matrix.org/docs/guides/client-server-migrating-from-v1.html#deprecated-endpoints>`_.
      operationId: getEvents
      parameters:
      - description: |-
          The token to stream from. This token is either from a previous
          request to this API or from the initial sync API.
        example: s3456_9_0
        in: query
        name: from
        schema:
          type: string
      - description: The maximum time in milliseconds to wait for an event.
        example: "35000"
        in: query
        name: timeout
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              example:
                chunk:
                - content:
                    body: This is an example text message
                    format: org.matrix.custom.html
                    formatted_body: <b>This is an example text message</b>
                    msgtype: m.text
                  event_id: $143273582443PhrSn:example.org
                  origin_server_ts: 1432735824653
                  room_id: '!jEsUZKDJdhlrceRyVU:example.org'
                  sender: '@example:example.org'
                  type: m.room.message
                  unsigned:
                    age: 1234
                end: s3457_9_0
                start: s3456_9_0
              schema:
                $ref: '#/components/schemas/inline_response_200_10'
          description: The events received, which may be none.
        400:
          content: {}
          description: Bad pagination ``from`` parameter.
      security:
      - accessToken: []
      summary: Listen on the event stream.
      tags:
      - Room participation
  /_matrix/client/unstable/events/{eventId}:
    get:
      deprecated: true
      description: |-
        Get a single event based on ``event_id``. You must have permission to
        retrieve this event e.g. by being a member in the room for this event.

        This endpoint was deprecated in r0 of this specification. Clients
        should instead call the |/rooms/{roomId}/event/{eventId}|_ API
        or the |/rooms/{roomId}/context/{eventId}|_ API.
      operationId: getOneEvent
      parameters:
      - description: The event ID to get.
        example: $asfDuShaf7Gafaw:matrix.org
        in: path
        name: eventId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                content:
                  body: This is an example text message
                  format: org.matrix.custom.html
                  formatted_body: <b>This is an example text message</b>
                  msgtype: m.text
                event_id: $143273582443PhrSn:example.org
                origin_server_ts: 1432735824653
                room_id: '!jEsUZKDJdhlrceRyVU:example.org'
                sender: '@example:example.org'
                type: m.room.message
                unsigned:
                  age: 1234
              schema:
                $ref: '#/components/schemas/inline_response_200_11'
          description: The full event.
        404:
          content: {}
          description: The event was not found or you do not have permission to read
            this event.
      security:
      - accessToken: []
      summary: Get a single event by event ID.
      tags:
      - Room participation
  /_matrix/client/unstable/initialSync:
    get:
      deprecated: true
      description: |-
        This returns the full state for this user, with an optional limit on the
        number of messages per room to return.

        This endpoint was deprecated in r0 of this specification. Clients
        should instead call the |/sync|_ API with no ``since`` parameter. See
        the `migration guide
        <https://matrix.org/docs/guides/client-server-migrating-from-v1.html#deprecated-endpoints>`_.
      operationId: initialSync
      parameters:
      - description: The maximum number of messages to return for each room.
        example: "2"
        in: query
        name: limit
        schema:
          type: integer
      - description: |-
          Whether to include rooms that the user has left. If ``false`` then
          only rooms that the user has been invited to or has joined are
          included. If set to ``true`` then rooms that the user has left are
          included as well. By default this is ``false``.
        example: "true"
        in: query
        name: archived
        schema:
          type: boolean
      responses:
        200:
          content:
            application/json:
              example:
                account_data:
                - content:
                    custom_config_key: custom_config_value
                  type: org.example.custom.config
                end: s3456_9_0
                presence:
                - content:
                    avatar_url: mxc://localhost:wefuiwegh8742w
                    currently_active: false
                    last_active_ago: 2478593
                    presence: online
                    status_msg: Making cupcakes
                  sender: '@example:localhost'
                  type: m.presence
                rooms:
                - account_data:
                  - content:
                      tags:
                        work:
                          order: 1
                    type: m.tag
                  - content:
                      custom_config_key: custom_config_value
                    type: org.example.custom.room.config
                  membership: join
                  messages:
                    chunk:
                    - content:
                        body: This is an example text message
                        format: org.matrix.custom.html
                        formatted_body: <b>This is an example text message</b>
                        msgtype: m.text
                      event_id: $143273582443PhrSn:example.org
                      origin_server_ts: 1432735824653
                      room_id: '!TmaZBKYIFrIPVGoUYp:localhost'
                      sender: '@example:example.org'
                      type: m.room.message
                      unsigned:
                        age: 1234
                    - content:
                        body: Gangnam Style
                        info:
                          duration: 2140786
                          h: 320
                          mimetype: video/mp4
                          size: 1563685
                          thumbnail_info:
                            h: 300
                            mimetype: image/jpeg
                            size: 46144
                            w: 300
                          thumbnail_url: mxc://example.org/FHyPlCeYUSFFxlgbQYZmoEoe
                          w: 480
                        msgtype: m.video
                        url: mxc://example.org/a526eYUSFFxlgbQYZmo442
                      event_id: $143273582443PhrSn:example.org
                      origin_server_ts: 1432735824653
                      room_id: '!TmaZBKYIFrIPVGoUYp:localhost'
                      sender: '@example:example.org'
                      type: m.room.message
                      unsigned:
                        age: 1234
                    end: s3456_9_0
                    start: t44-3453_9_0
                  room_id: '!TmaZBKYIFrIPVGoUYp:localhost'
                  state:
                  - content:
                      join_rule: public
                    event_id: $143273582443PhrSn:example.org
                    origin_server_ts: 1432735824653
                    room_id: '!TmaZBKYIFrIPVGoUYp:localhost'
                    sender: '@example:example.org'
                    state_key: ""
                    type: m.room.join_rules
                    unsigned:
                      age: 1234
                  - content:
                      avatar_url: mxc://example.org/SEsfnsuifSDFSSEF
                      displayname: Alice Margatroid
                      membership: join
                    event_id: $143273582443PhrSn:example.org
                    origin_server_ts: 1432735824653
                    room_id: '!TmaZBKYIFrIPVGoUYp:localhost'
                    sender: '@example:example.org'
                    state_key: '@alice:example.org'
                    type: m.room.member
                    unsigned:
                      age: 1234
                  - content:
                      creator: '@example:example.org'
                      m.federate: true
                      predecessor:
                        event_id: $something:example.org
                        room_id: '!oldroom:example.org'
                      room_version: "1"
                    event_id: $143273582443PhrSn:example.org
                    origin_server_ts: 1432735824653
                    room_id: '!TmaZBKYIFrIPVGoUYp:localhost'
                    sender: '@example:example.org'
                    state_key: ""
                    type: m.room.create
                    unsigned:
                      age: 1234
                  - content:
                      ban: 50
                      events:
                        m.room.name: 100
                        m.room.power_levels: 100
                      events_default: 0
                      invite: 50
                      kick: 50
                      notifications:
                        room: 20
                      redact: 50
                      state_default: 50
                      users:
                        '@example:localhost': 100
                      users_default: 0
                    event_id: $143273582443PhrSn:example.org
                    origin_server_ts: 1432735824653
                    room_id: '!TmaZBKYIFrIPVGoUYp:localhost'
                    sender: '@example:example.org'
                    state_key: ""
                    type: m.room.power_levels
                    unsigned:
                      age: 1234
                  visibility: private
              schema:
                $ref: '#/components/schemas/inline_response_200_12'
          description: The user's current state.
        404:
          content: {}
          description: There is no avatar URL for this user or this user does not
            exist.
      security:
      - accessToken: []
      summary: Get the user's current state.
      tags:
      - Room participation
  /_matrix/client/unstable/join/{roomIdOrAlias}:
    post:
      description: |-
        *Note that this API takes either a room ID or alias, unlike* ``/room/{roomId}/join``.

        This API starts a user participating in a particular room, if that user
        is allowed to participate in that room. After this call, the client is
        allowed to see all current state events in the room, and all subsequent
        events associated with the room until the user leaves the room.

        After a user has joined a room, the room will appear as an entry in the
        response of the |/initialSync|_ and |/sync|_ APIs.

        If a ``third_party_signed`` was supplied, the homeserver must verify
        that it matches a pending ``m.room.third_party_invite`` event in the
        room, and perform key validity checking if required by the event.
      operationId: joinRoom
      parameters:
      - description: The room identifier or alias to join.
        example: '#monkeys:matrix.org'
        in: path
        name: roomIdOrAlias
        required: true
        schema:
          type: string
      - description: |-
          The servers to attempt to join the room through. One of the servers
          must be participating in the room.
        example:
        - matrix.org
        - elsewhere.ca
        explode: false
        in: query
        name: server_name
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        $ref: '#/components/requestBodies/inline_object_10'
        content:
          application/json:
            schema:
              properties:
                third_party_signed:
                  $ref: '#/components/schemas/Third Party Signed'
              type: object
        required: false
      responses:
        200:
          content:
            application/json:
              example:
                room_id: '!d41d8cd:matrix.org'
              schema:
                $ref: '#/components/schemas/inline_response_200_13'
          description: |-
            The room has been joined.

            The joined room ID must be returned in the ``room_id`` field.
        403:
          content:
            application/json:
              example:
                errcode: M_FORBIDDEN
                error: You are not invited to this room.
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: |-
            You do not have permission to join the room. A meaningful ``errcode`` and description error text will be returned. Example reasons for rejection are:

            - The room is invite-only and the user was not invited.
            - The user has been banned from the room.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Start the requesting user participating in a particular room.
      tags:
      - Room membership
      x-codegen-request-body-name: third_party_signed
  /_matrix/client/unstable/joined_rooms:
    get:
      description: This API returns a list of the user's current rooms.
      operationId: getJoinedRooms
      responses:
        200:
          content:
            application/json:
              example:
                joined_rooms:
                - '!foo:example.com'
              schema:
                $ref: '#/components/schemas/inline_response_200_14'
          description: A list of the rooms the user is in.
      security:
      - accessToken: []
      summary: Lists the user's current rooms.
      tags:
      - Room membership
  /_matrix/client/unstable/keys/changes:
    get:
      description: |-
        Gets a list of users who have updated their device identity keys since a
        previous sync token.

        The server should include in the results any users who:

        * currently share a room with the calling user (ie, both users have
          membership state ``join``); *and*
        * added new device identity keys or removed an existing device with
          identity keys, between ``from`` and ``to``.
      operationId: getKeysChanges
      parameters:
      - description: |-
          The desired start point of the list. Should be the ``next_batch`` field
          from a response to an earlier call to |/sync|. Users who have not
          uploaded new device identity keys since this point, nor deleted
          existing devices with identity keys since then, will be excluded
          from the results.
        example: s72594_4483_1934
        in: query
        name: from
        required: true
        schema:
          type: string
      - description: |-
          The desired end point of the list. Should be the ``next_batch``
          field from a recent call to |/sync| - typically the most recent
          such call. This may be used by the server as a hint to check its
          caches are up to date.
        example: s75689_5632_2435
        in: query
        name: to
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_15'
          description: The list of users who updated their devices.
      security:
      - accessToken: []
      summary: Query users with recent device key updates.
      tags:
      - End-to-end encryption
  /_matrix/client/unstable/keys/claim:
    post:
      description: Claims one-time keys for use in pre-key messages.
      operationId: claimKeys
      requestBody:
        $ref: '#/components/requestBodies/inline_object_11'
        content:
          application/json:
            schema:
              properties:
                one_time_keys:
                  additionalProperties:
                    additionalProperties:
                      description: algorithm
                      example: signed_curve25519
                      type: string
                    type: object
                  description: |-
                    The keys to be claimed. A map from user ID, to a map from
                    device ID to algorithm name.
                  example:
                    '@alice:example.com':
                      JLAFKJWSCS: signed_curve25519
                  type: object
                timeout:
                  description: |-
                    The time (in milliseconds) to wait when downloading keys from
                    remote servers. 10 seconds is the recommended default.
                  example: 10000
                  type: integer
              required:
              - one_time_keys
              type: object
        description: Query defining the keys to be claimed
        required: false
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_16'
          description: The claimed keys.
      security:
      - accessToken: []
      summary: Claim one-time encryption keys.
      tags:
      - End-to-end encryption
      x-codegen-request-body-name: query
  /_matrix/client/unstable/keys/query:
    post:
      description: Returns the current devices and identity keys for the given users.
      operationId: queryKeys
      requestBody:
        $ref: '#/components/requestBodies/inline_object_12'
        content:
          application/json:
            schema:
              properties:
                device_keys:
                  additionalProperties:
                    items:
                      description: device ID
                      type: string
                    type: array
                  description: |-
                    The keys to be downloaded. A map from user ID, to a list of
                    device IDs, or to an empty list to indicate all devices for the
                    corresponding user.
                  example:
                    '@alice:example.com': []
                  type: object
                timeout:
                  description: |-
                    The time (in milliseconds) to wait when downloading keys from
                    remote servers. 10 seconds is the recommended default.
                  example: 10000
                  type: integer
                token:
                  description: |-
                    If the client is fetching keys as a result of a device update received
                    in a sync request, this should be the 'since' token of that sync request,
                    or any later sync token. This allows the server to ensure its response
                    contains the keys advertised by the notification in that sync.
                  type: string
              required:
              - device_keys
              type: object
        description: Query defining the keys to be downloaded
        required: false
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_17'
          description: The device information
      security:
      - accessToken: []
      summary: Download device identity keys.
      tags:
      - End-to-end encryption
      x-codegen-request-body-name: query
  /_matrix/client/unstable/keys/upload:
    post:
      description: Publishes end-to-end encryption keys for the device.
      operationId: uploadKeys
      requestBody:
        $ref: '#/components/requestBodies/inline_object_13'
        content:
          application/json:
            schema:
              properties:
                device_keys:
                  allOf:
                  - description: Device identity keys
                    properties:
                      algorithms:
                        description: The encryption algorithms supported by this device.
                        example:
                        - m.olm.v1.curve25519-aes-sha2
                        - m.megolm.v1.aes-sha2
                        items:
                          type: string
                        type: array
                      device_id:
                        description: |-
                          The ID of the device these keys belong to. Must match the device ID used
                          when logging in.
                        example: JLAFKJWSCS
                        type: string
                      keys:
                        additionalProperties:
                          type: string
                        description: |-
                          Public identity keys. The names of the properties should be in the
                          format ``<algorithm>:<device_id>``. The keys themselves should be
                          encoded as specified by the key algorithm.
                        example:
                          curve25519:JLAFKJWSCS: 3C5BFWi2Y8MaVvjM8M22DBmh24PmgR0nPvJOIArzgyI
                          ed25519:JLAFKJWSCS: lEuiRJBit0IG6nUf5pUzWTUEsRVVe/HJkoKuEww9ULI
                        type: object
                      signatures:
                        additionalProperties:
                          additionalProperties:
                            type: string
                          type: object
                        description: |-
                          Signatures for the device key object. A map from user ID, to a map from
                          ``<algorithm>:<device_id>`` to the signature.

                          The signature is calculated using the process described at `Signing
                          JSON`_.
                        example:
                          '@alice:example.com':
                            ed25519:JLAFKJWSCS: dSO80A01XiigH3uBiDVx/EjzaoycHcjq9lfQX0uWsqxl2giMIiSPR8a4d291W1ihKJL/a+myXS367WT6NAIcBA
                        type: object
                      user_id:
                        description: |-
                          The ID of the user the device belongs to. Must match the user ID used
                          when logging in.
                        example: '@alice:example.com'
                        type: string
                    required:
                    - algorithms
                    - device_id
                    - keys
                    - signatures
                    - user_id
                    title: DeviceKeys
                    type: object
                  description: |-
                    Identity keys for the device. May be absent if no new
                    identity keys are required.
                  type: object
                one_time_keys:
                  description: |-
                    One-time public keys for "pre-key" messages.  The names of
                    the properties should be in the format
                    ``<algorithm>:<key_id>``. The format of the key is determined
                    by the `key algorithm <#key-algorithms>`_.

                    May be absent if no new one-time keys are required.
                  example: ""
                  type: object
              type: object
        description: The keys to be published
        required: false
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_18'
          description: The provided keys were sucessfully uploaded.
      security:
      - accessToken: []
      summary: Upload end-to-end encryption keys.
      tags:
      - End-to-end encryption
      x-codegen-request-body-name: keys
  /_matrix/client/unstable/login:
    get:
      description: |-
        Gets the homeserver's supported login types to authenticate users. Clients
        should pick one of these and supply it as the ``type`` when logging in.
      operationId: getLoginFlows
      responses:
        200:
          content:
            application/json:
              example:
                flows:
                - type: m.login.password
              schema:
                $ref: '#/components/schemas/inline_response_200_19'
          description: The login types the homeserver supports
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      summary: Get the supported login types to authenticate users
      tags:
      - Session management
    post:
      description: |-
        Authenticates the user, and issues an access token they can
        use to authorize themself in subsequent requests.

        If the client does not supply a ``device_id``, the server must
        auto-generate one.

        The returned access token must be associated with the ``device_id``
        supplied by the client or generated by the server. The server may
        invalidate any access token previously associated with that device. See
        `Relationship between access tokens and devices`_.
      operationId: login
      requestBody:
        $ref: '#/components/requestBodies/inline_object_14'
        content:
          application/json:
            schema:
              example:
                identifier:
                  type: m.id.user
                  user: cheeky_monkey
                initial_device_display_name: Jungle Phone
                password: ilovebananas
                type: m.login.password
              properties:
                address:
                  description: Third party identifier for the user.  Deprecated in
                    favour of ``identifier``.
                  type: string
                device_id:
                  description: |-
                    ID of the client device. If this does not correspond to a
                    known client device, a new device will be created. The server
                    will auto-generate a device_id if this is not specified.
                  type: string
                identifier:
                  $ref: '#/components/schemas/User identifier'
                initial_device_display_name:
                  description: |-
                    A display name to assign to the newly-created device. Ignored
                    if ``device_id`` corresponds to a known device.
                  type: string
                medium:
                  description: When logging in using a third party identifier, the
                    medium of the identifier. Must be 'email'.  Deprecated in favour
                    of ``identifier``.
                  type: string
                password:
                  description: |-
                    Required when ``type`` is ``m.login.password``. The user's
                    password.
                  type: string
                token:
                  description: Required when ``type`` is ``m.login.token``. Part of
                    `Token-based`_ login.
                  type: string
                type:
                  description: The login type being used.
                  enum:
                  - m.login.password
                  - m.login.token
                  type: string
                user:
                  description: The fully qualified user ID or just local part of the
                    user ID, to log in.  Deprecated in favour of ``identifier``.
                  type: string
              required:
              - type
              type: object
        required: false
      responses:
        200:
          content:
            application/json:
              example:
                access_token: abc123
                device_id: GHTYAJCE
                user_id: '@cheeky_monkey:matrix.org'
                well_known:
                  m.homeserver:
                    base_url: https://example.org
                  m.identity_server:
                    base_url: https://id.example.org
              schema:
                $ref: '#/components/schemas/inline_response_200_20'
          description: The user has been authenticated.
        400:
          content:
            application/json:
              example:
                errcode: M_UNKNOWN
                error: Bad login type.
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: Part of the request was invalid. For example, the login type
            may not be recognised.
        403:
          content:
            application/json:
              example:
                errcode: M_FORBIDDEN
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: The login attempt failed. For example, the password may have
            been incorrect.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      summary: Authenticates the user.
      tags:
      - Session management
      x-codegen-request-body-name: body
  /_matrix/client/unstable/logout:
    post:
      description: |-
        Invalidates an existing access token, so that it can no longer be used for
        authorization. The device associated with the access token is also deleted.
        `Device keys <#device-keys>`_ for the device are deleted alongside the device.
      operationId: logout
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
          description: The access token used in the request was succesfully invalidated.
      security:
      - accessToken: []
      summary: Invalidates a user access token
      tags:
      - Session management
  /_matrix/client/unstable/logout/all:
    post:
      description: |-
        Invalidates all access tokens for a user, so that they can no longer be used for
        authorization. This includes the access token that made this request. All devices
        for the user are also deleted. `Device keys <#device-keys>`_ for the device are
        deleted alongside the device.

        This endpoint does not require UI authorization because UI authorization is
        designed to protect against attacks where the someone gets hold of a single access
        token then takes over the account. This endpoint invalidates all access tokens for
        the user, including the token used in the request, and therefore the attacker is
        unable to take over the account in this way.
      operationId: logout_all
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
          description: The user's access tokens were succesfully invalidated.
      security:
      - accessToken: []
      summary: Invalidates all access tokens for a user
      tags:
      - Session management
  /_matrix/client/unstable/notifications:
    get:
      description: |-
        This API is used to paginate through the list of events that the
        user has been, or would have been notified about.
      operationId: getNotifications
      parameters:
      - description: Pagination token given to retrieve the next set of events.
        example: xxxxx
        in: query
        name: from
        schema:
          type: string
      - description: Limit on the number of events to return in this request.
        example: "20"
        in: query
        name: limit
        schema:
          type: integer
      - description: |-
          Allows basic filtering of events returned. Supply ``highlight``
          to return only events where the notification had the highlight
          tweak set.
        example: highlight
        in: query
        name: only
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                next_token: abcdef
                notifications:
                - actions:
                  - notify
                  event:
                    content:
                      body: This is an example text message
                      format: org.matrix.custom.html
                      formatted_body: <b>This is an example text message</b>
                      msgtype: m.text
                    event_id: $143273582443PhrSn:example.org
                    origin_server_ts: 1432735824653
                    room_id: '!jEsUZKDJdhlrceRyVU:example.org'
                    sender: '@example:example.org'
                    type: m.room.message
                    unsigned:
                      age: 1234
                  profile_tag: hcbvkzxhcvb
                  read: true
                  room_id: '!abcdefg:example.com'
                  ts: 1475508881945
              schema:
                $ref: '#/components/schemas/inline_response_200_21'
          description: A batch of events is being returned
      security:
      - accessToken: []
      summary: Gets a list of events that the user has been notified about
      tags:
      - Push notifications
  /_matrix/client/unstable/presence/{userId}/status:
    get:
      description: Get the given user's presence state.
      operationId: getPresence
      parameters:
      - description: The user whose presence state to get.
        example: '@alice:example.com'
        in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                last_active_ago: 420845
                presence: unavailable
              schema:
                $ref: '#/components/schemas/inline_response_200_22'
          description: The presence state for this user.
        403:
          content:
            application/json:
              example:
                errcode: M_FORBIDDEN
                error: You are not allowed to see their presence
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: You are not allowed to see this user's presence status.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: |-
            There is no presence state for this user. This user may not exist or
            isn't exposing presence information to you.
      security:
      - accessToken: []
      summary: Get this user's presence state.
      tags:
      - Presence
    put:
      description: |-
        This API sets the given user's presence state. When setting the status,
        the activity time is updated to reflect that activity; the client does
        not need to specify the ``last_active_ago`` field. You cannot set the
        presence state of another user.
      operationId: setPresence
      parameters:
      - description: The user whose presence state to update.
        example: '@alice:example.com'
        in: path
        name: userId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_15'
        content:
          application/json:
            schema:
              example:
                presence: online
                status_msg: I am here.
              properties:
                presence:
                  description: The new presence state.
                  enum:
                  - online
                  - offline
                  - unavailable
                  type: string
                status_msg:
                  description: The status message to attach to this state.
                  type: string
              required:
              - presence
              type: object
        description: The updated presence state.
        required: true
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The new presence state was set.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Update this user's presence state.
      tags:
      - Presence
      x-codegen-request-body-name: presenceState
  /_matrix/client/unstable/profile/{userId}:
    get:
      description: |-
        Get the combined profile information for this user. This API may be used
        to fetch the user's own profile information or other users; either
        locally or on remote homeservers. This API may return keys which are not
        limited to ``displayname`` or ``avatar_url``.
      operationId: getUserProfile
      parameters:
      - description: The user whose profile information to get.
        example: '@alice:example.com'
        in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                avatar_url: mxc://matrix.org/SDGdghriugerRg
                displayname: Alice Margatroid
              schema:
                $ref: '#/components/schemas/inline_response_200_23'
          description: The avatar URL for this user.
        404:
          content: {}
          description: There is no profile information for this user or this user
            does not exist.
      summary: Get this user's profile information.
      tags:
      - User data
  /_matrix/client/unstable/profile/{userId}/avatar_url:
    get:
      description: |-
        Get the user's avatar URL. This API may be used to fetch the user's
        own avatar URL or to query the URL of other users; either locally or
        on remote homeservers.
      operationId: getAvatarUrl
      parameters:
      - description: The user whose avatar URL to get.
        example: '@alice:example.com'
        in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                avatar_url: mxc://matrix.org/SDGdghriugerRg
              schema:
                $ref: '#/components/schemas/inline_response_200_24'
          description: The avatar URL for this user.
        404:
          content: {}
          description: There is no avatar URL for this user or this user does not
            exist.
      summary: Get the user's avatar URL.
      tags:
      - User data
    put:
      description: |-
        This API sets the given user's avatar URL. You must have permission to
        set this user's avatar URL, e.g. you need to have their ``access_token``.
      operationId: setAvatarUrl
      parameters:
      - description: The user whose avatar URL to set.
        example: '@alice:example.com'
        in: path
        name: userId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_16'
        content:
          application/json:
            schema:
              example:
                avatar_url: mxc://matrix.org/wefh34uihSDRGhw34
              properties:
                avatar_url:
                  description: The new avatar URL for this user.
                  type: string
              type: object
        description: The avatar url info.
        required: true
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The avatar URL was set.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Set the user's avatar URL.
      tags:
      - User data
      x-codegen-request-body-name: avatar_url
  /_matrix/client/unstable/profile/{userId}/displayname:
    get:
      description: |-
        Get the user's display name. This API may be used to fetch the user's
        own displayname or to query the name of other users; either locally or
        on remote homeservers.
      operationId: getDisplayName
      parameters:
      - description: The user whose display name to get.
        example: '@alice:example.com'
        in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                displayname: Alice Margatroid
              schema:
                $ref: '#/components/schemas/inline_response_200_25'
          description: The display name for this user.
        404:
          content: {}
          description: There is no display name for this user or this user does not
            exist.
      summary: Get the user's display name.
      tags:
      - User data
    put:
      description: |-
        This API sets the given user's display name. You must have permission to
        set this user's display name, e.g. you need to have their ``access_token``.
      operationId: setDisplayName
      parameters:
      - description: The user whose display name to set.
        example: '@alice:example.com'
        in: path
        name: userId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_17'
        content:
          application/json:
            schema:
              example:
                displayname: Alice Margatroid
              properties:
                displayname:
                  description: The new display name for this user.
                  type: string
              type: object
        description: The display name info.
        required: true
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The display name was set.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Set the user's display name.
      tags:
      - User data
      x-codegen-request-body-name: displayName
  /_matrix/client/unstable/publicRooms:
    get:
      description: |-
        Lists the public rooms on the server.

        This API returns paginated responses. The rooms are ordered by the number
        of joined members, with the largest rooms first.
      operationId: getPublicRooms
      parameters:
      - description: Limit the number of results returned.
        in: query
        name: limit
        schema:
          type: integer
      - description: |-
          A pagination token from a previous request, allowing clients to
          get the next (or previous) batch of rooms.
          The direction of pagination is specified solely by which token
          is supplied, rather than via an explicit flag.
        in: query
        name: since
        schema:
          type: string
      - description: |-
          The server to fetch the public room lists from. Defaults to the
          local server.
        in: query
        name: server
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_26'
          description: A list of the rooms on the server.
      summary: Lists the public rooms on the server.
      tags:
      - Room discovery
    post:
      description: |-
        Lists the public rooms on the server, with optional filter.

        This API returns paginated responses. The rooms are ordered by the number
        of joined members, with the largest rooms first.
      operationId: queryPublicRooms
      parameters:
      - description: |-
          The server to fetch the public room lists from. Defaults to the
          local server.
        in: query
        name: server
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_18'
        content:
          application/json:
            schema:
              example:
                filter:
                  generic_search_term: foo
                include_all_networks: false
                limit: 10
                third_party_instance_id: irc
              properties:
                filter:
                  $ref: '#/components/schemas/Filter'
                include_all_networks:
                  description: |-
                    Whether or not to include all known networks/protocols from
                    application services on the homeserver. Defaults to false.
                  example: false
                  type: boolean
                limit:
                  description: Limit the number of results returned.
                  type: integer
                since:
                  description: |-
                    A pagination token from a previous request, allowing clients
                    to get the next (or previous) batch of rooms.  The direction
                    of pagination is specified solely by which token is supplied,
                    rather than via an explicit flag.
                  type: string
                third_party_instance_id:
                  description: |-
                    The specific third party network/protocol to request from the
                    homeserver. Can only be used if ``include_all_networks`` is false.
                  example: irc
                  type: string
              type: object
        description: Options for which rooms to return.
        required: true
      responses:
        200:
          content:
            application/json:
              example:
                chunk:
                - aliases:
                  - '#murrays:cheese.bar'
                  avatar_url: mxc://bleeker.street/CHEDDARandBRIE
                  guest_can_join: false
                  name: CHEESE
                  num_joined_members: 37
                  room_id: '!ol19s:bleecker.street'
                  topic: Tasty tasty cheese
                  world_readable: true
                next_batch: p190q
                prev_batch: p1902
                total_room_count_estimate: 115
              schema:
                $ref: '#/components/schemas/inline_response_200_27'
          description: A list of the rooms on the server.
      security:
      - accessToken: []
      summary: Lists the public rooms on the server with optional filter.
      tags:
      - Room discovery
      x-codegen-request-body-name: body
  /_matrix/client/unstable/pushers:
    get:
      description: Gets all currently active pushers for the authenticated user.
      operationId: getPushers
      responses:
        200:
          content:
            application/json:
              example:
                pushers:
                - app_display_name: Appy McAppface
                  app_id: face.mcapp.appy.prod
                  data:
                    url: https://example.com/_matrix/push/v1/notify
                  device_display_name: Alice's Phone
                  kind: http
                  lang: en-US
                  profile_tag: xyz
                  pushkey: Xp/MzCt8/9DcSNE9cuiaoT5Ac55job3TdLSSmtmYl4A=
              schema:
                $ref: '#/components/schemas/inline_response_200_28'
          description: The pushers for this user.
      security:
      - accessToken: []
      summary: Gets the current pushers for the authenticated user
      tags:
      - Push notifications
  /_matrix/client/unstable/pushers/set:
    post:
      description: |-
        This endpoint allows the creation, modification and deletion of `pushers`_
        for this user ID. The behaviour of this endpoint varies depending on the
        values in the JSON body.
      operationId: postPusher
      requestBody:
        $ref: '#/components/requestBodies/inline_object_19'
        content:
          application/json:
            schema:
              example:
                app_display_name: Mat Rix
                app_id: com.example.app.ios
                append: false
                data:
                  format: event_id_only
                  url: https://push-gateway.location.here/_matrix/push/v1/notify
                device_display_name: iPhone 9
                kind: http
                lang: en
                profile_tag: xxyyzz
                pushkey: APA91bHPRgkF3JUikC4ENAHEeMrd41Zxv3hVZjC9KtT8OvPVGJ-hQMRKRrZuJAEcl7B338qju59zJMjw2DELjzEvxwYv7hH5Ynpc1ODQ0aT4U4OFEeco8ohsN5PjL1iC2dNtk2BAokeMCg2ZXKqpc8FXKmhX94kIxQ
              properties:
                app_display_name:
                  description: |-
                    A string that will allow the user to identify what application
                    owns this pusher.
                  type: string
                app_id:
                  description: |-
                    This is a reverse-DNS style identifier for the application.
                    It is recommended that this end with the platform, such that
                    different platform versions get different app identifiers.
                    Max length, 64 chars.

                    If the ``kind`` is ``"email"``, this is ``"m.email"``.
                  type: string
                append:
                  description: |-
                    If true, the homeserver should add another pusher with the
                    given pushkey and App ID in addition to any others with
                    different user IDs. Otherwise, the homeserver must remove any
                    other pushers with the same App ID and pushkey for different
                    users. The default is ``false``.
                  type: boolean
                data:
                  $ref: '#/components/schemas/PusherData_1'
                device_display_name:
                  description: |-
                    A string that will allow the user to identify what device owns
                    this pusher.
                  type: string
                kind:
                  description: |-
                    The kind of pusher to configure. ``"http"`` makes a pusher that
                    sends HTTP pokes. ``"email"`` makes a pusher that emails the
                    user with unread notifications. ``null`` deletes the pusher.
                  type: string
                lang:
                  description: |-
                    The preferred language for receiving notifications (e.g. 'en'
                    or 'en-US').
                  type: string
                profile_tag:
                  description: |-
                    This string determines which set of device specific rules this
                    pusher executes.
                  type: string
                pushkey:
                  description: |-
                    This is a unique identifier for this pusher. The value you
                    should use for this is the routing or destination address
                    information for the notification, for example, the APNS token
                    for APNS or the Registration ID for GCM. If your notification
                    client has no such concept, use any unique identifier.
                    Max length, 512 bytes.

                    If the ``kind`` is ``"email"``, this is the email address to
                    send notifications to.
                  type: string
              required:
              - app_display_name
              - app_id
              - data
              - device_display_name
              - kind
              - lang
              - pushkey
              type: object
        description: The pusher information.
        required: true
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                description: An empty object.
                type: object
          description: The pusher was set.
        400:
          content:
            application/json:
              example:
                errcode: M_MISSING_PARAM
                error: 'Missing parameters: lang, data'
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: One or more of the pusher values were invalid.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Modify a pusher for this user on the homeserver.
      tags:
      - Push notifications
      x-codegen-request-body-name: pusher
  /_matrix/client/unstable/pushrules/:
    get:
      description: |-
        Retrieve all push rulesets for this user. Clients can "drill-down" on
        the rulesets by suffixing a ``scope`` to this path e.g.
        ``/pushrules/global/``. This will return a subset of this data under the
        specified key e.g. the ``global`` key.
      operationId: getPushRules
      responses:
        200:
          content:
            application/json:
              example:
                global:
                  content:
                  - actions:
                    - notify
                    - set_tweak: sound
                      value: default
                    - set_tweak: highlight
                    default: true
                    enabled: true
                    pattern: alice
                    rule_id: .m.rule.contains_user_name
                  override:
                  - actions:
                    - dont_notify
                    conditions: []
                    default: true
                    enabled: false
                    rule_id: .m.rule.master
                  - actions:
                    - dont_notify
                    conditions:
                    - key: content.msgtype
                      kind: event_match
                      pattern: m.notice
                    default: true
                    enabled: true
                    rule_id: .m.rule.suppress_notices
                  room: []
                  sender: []
                  underride:
                  - actions:
                    - notify
                    - set_tweak: sound
                      value: ring
                    - set_tweak: highlight
                      value: false
                    conditions:
                    - key: type
                      kind: event_match
                      pattern: m.call.invite
                    default: true
                    enabled: true
                    rule_id: .m.rule.call
                  - actions:
                    - notify
                    - set_tweak: sound
                      value: default
                    - set_tweak: highlight
                    conditions:
                    - kind: contains_display_name
                    default: true
                    enabled: true
                    rule_id: .m.rule.contains_display_name
                  - actions:
                    - notify
                    - set_tweak: sound
                      value: default
                    - set_tweak: highlight
                      value: false
                    conditions:
                    - is: "2"
                      kind: room_member_count
                    - key: type
                      kind: event_match
                      pattern: m.room.message
                    default: true
                    enabled: true
                    rule_id: .m.rule.room_one_to_one
                  - actions:
                    - notify
                    - set_tweak: sound
                      value: default
                    - set_tweak: highlight
                      value: false
                    conditions:
                    - key: type
                      kind: event_match
                      pattern: m.room.member
                    - key: content.membership
                      kind: event_match
                      pattern: invite
                    - key: state_key
                      kind: event_match
                      pattern: '@alice:example.com'
                    default: true
                    enabled: true
                    rule_id: .m.rule.invite_for_me
                  - actions:
                    - notify
                    - set_tweak: highlight
                      value: false
                    conditions:
                    - key: type
                      kind: event_match
                      pattern: m.room.member
                    default: true
                    enabled: true
                    rule_id: .m.rule.member_event
                  - actions:
                    - notify
                    - set_tweak: highlight
                      value: false
                    conditions:
                    - key: type
                      kind: event_match
                      pattern: m.room.message
                    default: true
                    enabled: true
                    rule_id: .m.rule.message
              schema:
                $ref: '#/components/schemas/inline_response_200_29'
          description: All the push rulesets for this user.
      security:
      - accessToken: []
      summary: Retrieve all push rulesets.
      tags:
      - Push notifications
  /_matrix/client/unstable/pushrules/{scope}/{kind}/{ruleId}:
    delete:
      description: This endpoint removes the push rule defined in the path.
      operationId: deletePushRule
      parameters:
      - description: '``global`` to specify global rules.'
        example: global
        in: path
        name: scope
        required: true
        schema:
          type: string
      - description: |
          The kind of rule
        example: content
        in: path
        name: kind
        required: true
        schema:
          enum:
          - override
          - underride
          - sender
          - room
          - content
          type: string
      - description: |
          The identifier for the rule.
        example: nocake
        in: path
        name: ruleId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The push rule was deleted.
      security:
      - accessToken: []
      summary: Delete a push rule.
      tags:
      - Push notifications
    get:
      description: Retrieve a single specified push rule.
      operationId: getPushRule
      parameters:
      - description: '``global`` to specify global rules.'
        example: global
        in: path
        name: scope
        required: true
        schema:
          type: string
      - description: |
          The kind of rule
        example: content
        in: path
        name: kind
        required: true
        schema:
          enum:
          - override
          - underride
          - sender
          - room
          - content
          type: string
      - description: |
          The identifier for the rule.
        example: nocake
        in: path
        name: ruleId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                actions:
                - dont_notify
                default: false
                enabled: true
                pattern: cake*lie
                rule_id: nocake
              schema:
                $ref: '#/components/schemas/inline_response_200_30'
          description: |-
            The specific push rule. This will also include keys specific to the
            rule itself such as the rule's ``actions`` and ``conditions`` if set.
      security:
      - accessToken: []
      summary: Retrieve a push rule.
      tags:
      - Push notifications
    put:
      description: |-
        This endpoint allows the creation, modification and deletion of pushers
        for this user ID. The behaviour of this endpoint varies depending on the
        values in the JSON body.

        When creating push rules, they MUST be enabled by default.
      operationId: setPushRule
      parameters:
      - description: '``global`` to specify global rules.'
        example: global
        in: path
        name: scope
        required: true
        schema:
          type: string
      - description: |
          The kind of rule
        example: content
        in: path
        name: kind
        required: true
        schema:
          enum:
          - override
          - underride
          - sender
          - room
          - content
          type: string
      - description: |
          The identifier for the rule.
        example: nocake
        in: path
        name: ruleId
        required: true
        schema:
          type: string
      - description: |-
          Use 'before' with a ``rule_id`` as its value to make the new rule the
          next-most important rule with respect to the given user defined rule.
          It is not possible to add a rule relative to a predefined server rule.
        example: someRuleId
        in: query
        name: before
        schema:
          type: string
      - description: |-
          This makes the new rule the next-less important rule relative to the
          given user defined rule. It is not possible to add a rule relative
          to a predefined server rule.
        example: anotherRuleId
        in: query
        name: after
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_20'
        content:
          application/json:
            schema:
              example:
                actions:
                - notify
                pattern: cake*lie
              properties:
                actions:
                  description: The action(s) to perform when the conditions for this
                    rule are met.
                  items:
                    enum:
                    - notify
                    - dont_notify
                    - coalesce
                    - set_tweak
                    type: string
                  type: array
                conditions:
                  description: |-
                    The conditions that must hold true for an event in order for a
                    rule to be applied to an event. A rule with no conditions
                    always matches. Only applicable to ``underride`` and ``override`` rules.
                  items:
                    allOf:
                    - properties:
                        is:
                          description: |-
                            Required for ``room_member_count`` conditions. A decimal integer
                            optionally prefixed by one of, ==, <, >, >= or <=. A prefix of < matches
                            rooms where the member count is strictly less than the given number and
                            so forth. If no prefix is present, this parameter defaults to ==.
                          type: string
                        key:
                          description: |-
                            Required for ``event_match`` conditions. The dot-separated field of the
                            event to match.

                            Required for ``sender_notification_permission`` conditions. The field in
                            the power level event the user needs a minimum power level for. Fields
                            must be specified under the ``notifications`` property in the power level
                            event's ``content``.
                          type: string
                          x-example: content.body
                        kind:
                          description: |-
                            The kind of condition to apply. See `conditions <#conditions>`_ for
                            more information on the allowed kinds and how they work.
                          type: string
                        pattern:
                          description: |-
                            Required for ``event_match`` conditions. The glob-style pattern to
                            match against. Patterns with no special glob characters should be
                            treated as having asterisks prepended and appended when testing the
                            condition.
                          type: string
                      required:
                      - kind
                      title: PushCondition
                      type: object
                    type: object
                  type: array
                pattern:
                  description: Only applicable to ``content`` rules. The glob-style
                    pattern to match against.
                  type: string
              required:
              - actions
              type: object
        description: |-
          The push rule data. Additional top-level keys may be present depending
          on the parameters for the rule ``kind``.
        required: true
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The push rule was created/updated.
        400:
          content:
            application/json:
              example:
                errcode: M_UNKNOWN
                error: 'before/after rule not found: someRuleId'
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: There was a problem configuring this push rule.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Add or change a push rule.
      tags:
      - Push notifications
      x-codegen-request-body-name: pushrule
  /_matrix/client/unstable/pushrules/{scope}/{kind}/{ruleId}/actions:
    put:
      description: |-
        This endpoint allows clients to change the actions of a push rule.
        This can be used to change the actions of builtin rules.
      operationId: setPushRuleActions
      parameters:
      - description: '``global`` to specify global rules.'
        example: global
        in: path
        name: scope
        required: true
        schema:
          type: string
      - description: |
          The kind of rule
        example: room
        in: path
        name: kind
        required: true
        schema:
          enum:
          - override
          - underride
          - sender
          - room
          - content
          type: string
      - description: |
          The identifier for the rule.
        example: '#spam:example.com'
        in: path
        name: ruleId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_21'
        content:
          application/json:
            schema:
              example:
                actions:
                - notify
              properties:
                actions:
                  description: The action(s) to perform for this rule.
                  items:
                    enum:
                    - notify
                    - dont_notify
                    - coalesce
                    - set_tweak
                    type: string
                  type: array
              required:
              - actions
              type: object
        description: |
          The action(s) to perform when the conditions for this rule are met.
        required: true
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The actions for the push rule were set.
      security:
      - accessToken: []
      summary: Set the actions for a push rule.
      tags:
      - Push notifications
      x-codegen-request-body-name: body
  /_matrix/client/unstable/pushrules/{scope}/{kind}/{ruleId}/enabled:
    put:
      description: This endpoint allows clients to enable or disable the specified
        push rule.
      operationId: setPushRuleEnabled
      parameters:
      - description: '``global`` to specify global rules.'
        example: global
        in: path
        name: scope
        required: true
        schema:
          type: string
      - description: |
          The kind of rule
        example: content
        in: path
        name: kind
        required: true
        schema:
          enum:
          - override
          - underride
          - sender
          - room
          - content
          type: string
      - description: |
          The identifier for the rule.
        example: nocake
        in: path
        name: ruleId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_22'
        content:
          application/json:
            schema:
              example:
                enabled: true
              properties:
                enabled:
                  description: Whether the push rule is enabled or not.
                  type: boolean
              required:
              - enabled
              type: object
        description: |
          Whether the push rule is enabled or not.
        required: true
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The push rule was enabled or disabled.
      security:
      - accessToken: []
      summary: Enable or disable a push rule.
      tags:
      - Push notifications
      x-codegen-request-body-name: body
  /_matrix/client/unstable/register:
    post:
      description: |-
        This API endpoint uses the `User-Interactive Authentication API`_, except in
        the cases where a guest account is being registered.

        Register for an account on this homeserver.

        There are two kinds of user account:

        - `user` accounts. These accounts may use the full API described in this specification.

        - `guest` accounts. These accounts may have limited permissions and may not be supported by all servers.

        If registration is successful, this endpoint will issue an access token
        the client can use to authorize itself in subsequent requests.

        If the client does not supply a ``device_id``, the server must
        auto-generate one.

        The server SHOULD register an account with a User ID based on the
        ``username`` provided, if any. Note that the grammar of Matrix User ID
        localparts is restricted, so the server MUST either map the provided
        ``username`` onto a ``user_id`` in a logical manner, or reject
        ``username``\s which do not comply to the grammar, with
        ``M_INVALID_USERNAME``.

        Matrix clients MUST NOT assume that localpart of the registered
        ``user_id`` matches the provided ``username``.

        The returned access token must be associated with the ``device_id``
        supplied by the client or generated by the server. The server may
        invalidate any access token previously associated with that device. See
        `Relationship between access tokens and devices`_.

        When registering a guest account, all parameters in the request body
        with the exception of ``initial_device_display_name`` MUST BE ignored
        by the server. The server MUST pick a ``device_id`` for the account
        regardless of input.

        Any user ID returned by this API must conform to the grammar given in the
        `Matrix specification <../appendices.html#user-identifiers>`_.
      operationId: register
      parameters:
      - description: The kind of account to register. Defaults to ``user``.
        example: user
        in: query
        name: kind
        schema:
          default: user
          enum:
          - guest
          - user
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_23'
        content:
          application/json:
            schema:
              properties:
                auth:
                  additionalProperties:
                    description: Keys dependent on the login type
                    properties: {}
                    type: object
                  description: |-
                    Additional authentication information for the
                    user-interactive authentication API. Note that this
                    information is *not* used to define how the registered user
                    should be authenticated, but is instead used to
                    authenticate the ``register`` call itself.
                  example:
                    example_credential: verypoorsharedsecret
                    session: xxxxx
                    type: example.type.foo
                  title: Authentication Data
                  type: object
                bind_email:
                  description: |-
                    If true, the server binds the email used for authentication to
                    the Matrix ID with the identity server.
                  example: false
                  type: boolean
                bind_msisdn:
                  description: |-
                    If true, the server binds the phone number used for authentication
                    to the Matrix ID with the identity server.
                  example: false
                  type: boolean
                device_id:
                  description: |-
                    ID of the client device. If this does not correspond to a
                    known client device, a new device will be created. The server
                    will auto-generate a device_id if this is not specified.
                  example: GHTYAJCE
                  type: string
                inhibit_login:
                  description: |-
                    If true, an ``access_token`` and ``device_id`` should not be
                    returned from this call, therefore preventing an automatic
                    login. Defaults to false.
                  example: false
                  type: boolean
                initial_device_display_name:
                  description: |-
                    A display name to assign to the newly-created device. Ignored
                    if ``device_id`` corresponds to a known device.
                  example: Jungle Phone
                  type: string
                password:
                  description: The desired password for the account.
                  example: ilovebananas
                  type: string
                username:
                  description: |-
                    The basis for the localpart of the desired Matrix ID. If omitted,
                    the homeserver MUST generate a Matrix ID local part.
                  example: cheeky_monkey
                  type: string
              type: object
        required: false
      responses:
        200:
          content:
            application/json:
              example:
                access_token: abc123
                device_id: GHTYAJCE
                user_id: '@cheeky_monkey:matrix.org'
              schema:
                $ref: '#/components/schemas/inline_response_200_31'
          description: The account has been registered.
        400:
          content:
            application/json:
              example:
                errcode: M_USER_IN_USE
                error: Desired user ID is already taken.
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: |-
            Part of the request was invalid. This may include one of the following error codes:

            * ``M_USER_IN_USE`` : The desired user ID is already taken.
            * ``M_INVALID_USERNAME`` : The desired user ID is not a valid user name.
            * ``M_EXCLUSIVE`` : The desired user ID is in the exclusive namespace
              claimed by an application service.

            These errors may be returned at any stage of the registration process,
            including after authentication if the requested user ID was registered
            whilst the client was performing authentication.

            Homeservers MUST perform the relevant checks and return these codes before
            performing User-Interactive Authentication, although they may also return
            them after authentication is completed if, for example, the requested user ID
            was registered whilst the client was performing authentication.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication response'
          description: The homeserver requires additional authentication information.
        403:
          content:
            application/json:
              example:
                errcode: M_FORBIDDEN
                error: Registration is disabled
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: |-
            The homeserver does not permit registering the account. This response
            can be used to identify that a particular ``kind`` of account is not
            allowed, or that registration is generally not supported by the homeserver.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      summary: Register for an account on this homeserver.
      tags:
      - User data
      x-codegen-request-body-name: body
  /_matrix/client/unstable/register/available:
    get:
      description: |-
        Checks to see if a username is available, and valid, for the server.

        The server should check to ensure that, at the time of the request, the
        username requested is available for use. This includes verifying that an
        application service has not claimed the username and that the username
        fits the server's desired requirements (for example, a server could dictate
        that it does not permit usernames with underscores).

        Matrix clients may wish to use this API prior to attempting registration,
        however the clients must also be aware that using this API does not normally
        reserve the username. This can mean that the username becomes unavailable
        between checking its availability and attempting to register it.
      operationId: checkUsernameAvailability
      parameters:
      - description: The username to check the availability of.
        example: my_cool_localpart
        in: query
        name: username
        required: true
        schema:
          default: my_cool_localpart
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                available: true
              schema:
                $ref: '#/components/schemas/inline_response_200_32'
          description: The username is available
        400:
          content:
            application/json:
              example:
                errcode: M_USER_IN_USE
                error: Desired user ID is already taken.
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: |-
            Part of the request was invalid or the username is not available. This may
            include one of the following error codes:

            * ``M_USER_IN_USE`` : The desired username is already taken.
            * ``M_INVALID_USERNAME`` : The desired username is not a valid user name.
            * ``M_EXCLUSIVE`` : The desired username is in the exclusive namespace
              claimed by an application service.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      summary: Checks to see if a username is available on the server.
      tags:
      - User data
  /_matrix/client/unstable/rooms/{roomId}/ban:
    post:
      description: |-
        Ban a user in the room. If the user is currently in the room, also kick them.

        When a user is banned from a room, they may not join it or be invited to it until they are unbanned.

        The caller must have the required power level in order to perform this operation.
      operationId: ban
      parameters:
      - description: The room identifier (not alias) from which the user should be
          banned.
        example: '!e42d8c:matrix.org'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_24'
        content:
          application/json:
            schema:
              example:
                reason: Telling unfunny jokes
                user_id: '@cheeky_monkey:matrix.org'
              properties:
                reason:
                  description: The reason the user has been banned. This will be supplied
                    as the ``reason`` on the target's updated `m.room.member`_ event.
                  type: string
                user_id:
                  description: The fully qualified user ID of the user being banned.
                  type: string
              required:
              - user_id
              type: object
        required: true
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The user has been kicked and banned from the room.
        403:
          content:
            application/json:
              example:
                errcode: M_FORBIDDEN
                error: You do not have a high enough power level to ban from this
                  room.
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: |-
            You do not have permission to ban the user from the room. A meaningful ``errcode`` and description error text will be returned. Example reasons for rejections are:

            - The banner is not currently in the room.
            - The banner's power level is insufficient to ban users from the room.
      security:
      - accessToken: []
      summary: Ban a user in the room.
      tags:
      - Room membership
      x-codegen-request-body-name: body
  /_matrix/client/unstable/rooms/{roomId}/context/{eventId}:
    get:
      description: |-
        This API returns a number of events that happened just before and
        after the specified event. This allows clients to get the context
        surrounding an event.

        *Note*: This endpoint supports lazy-loading of room member events. See
        `Lazy-loading room members <#lazy-loading-room-members>`_ for more information.
      operationId: getEventContext
      parameters:
      - description: The room to get events from.
        example: '!636q39766251:example.com'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      - description: The event to get context around.
        example: $f3h4d129462ha:example.com
        in: path
        name: eventId
        required: true
        schema:
          type: string
      - description: 'The maximum number of events to return. Default: 10.'
        example: 3
        in: query
        name: limit
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              example:
                end: t29-57_2_0_2
                event:
                  content:
                    body: filename.jpg
                    info:
                      h: 398
                      mimetype: image/jpeg
                      size: 31037
                      w: 394
                    msgtype: m.image
                    url: mxc://example.org/JWEIFJgwEIhweiWJE
                  event_id: $f3h4d129462ha:example.com
                  origin_server_ts: 1432735824653
                  room_id: '!636q39766251:example.com'
                  sender: '@example:example.org'
                  type: m.room.message
                  unsigned:
                    age: 1234
                events_after:
                - content:
                    body: This is an example text message
                    format: org.matrix.custom.html
                    formatted_body: <b>This is an example text message</b>
                    msgtype: m.text
                  event_id: $143273582443PhrSn:example.org
                  origin_server_ts: 1432735824653
                  room_id: '!636q39766251:example.com'
                  sender: '@example:example.org'
                  type: m.room.message
                  unsigned:
                    age: 1234
                events_before:
                - content:
                    body: something-important.doc
                    filename: something-important.doc
                    info:
                      mimetype: application/msword
                      size: 46144
                    msgtype: m.file
                    url: mxc://example.org/FHyPlCeYUSFFxlgbQYZmoEoe
                  event_id: $143273582443PhrSn:example.org
                  origin_server_ts: 1432735824653
                  room_id: '!636q39766251:example.com'
                  sender: '@example:example.org'
                  type: m.room.message
                  unsigned:
                    age: 1234
                start: t27-54_2_0_2
                state:
                - content:
                    creator: '@example:example.org'
                    m.federate: true
                    predecessor:
                      event_id: $something:example.org
                      room_id: '!oldroom:example.org'
                    room_version: "1"
                  event_id: $143273582443PhrSn:example.org
                  origin_server_ts: 1432735824653
                  room_id: '!636q39766251:example.com'
                  sender: '@example:example.org'
                  state_key: ""
                  type: m.room.create
                  unsigned:
                    age: 1234
                - content:
                    avatar_url: mxc://example.org/SEsfnsuifSDFSSEF
                    displayname: Alice Margatroid
                    membership: join
                  event_id: $143273582443PhrSn:example.org
                  origin_server_ts: 1432735824653
                  room_id: '!636q39766251:example.com'
                  sender: '@example:example.org'
                  state_key: '@alice:example.org'
                  type: m.room.member
                  unsigned:
                    age: 1234
              schema:
                $ref: '#/components/schemas/inline_response_200_33'
          description: The events and state surrounding the requested event.
      security:
      - accessToken: []
      summary: Get events and state around the specified event.
      tags:
      - Room participation
  /_matrix/client/unstable/rooms/{roomId}/event/{eventId}:
    get:
      description: |-
        Get a single event based on ``roomId/eventId``. You must have permission to
        retrieve this event e.g. by being a member in the room for this event.
      operationId: getOneRoomEvent
      parameters:
      - description: The ID of the room the event is in.
        example: '!636q39766251:matrix.org'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      - description: The event ID to get.
        example: $asfDuShaf7Gafaw:matrix.org
        in: path
        name: eventId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                content:
                  body: This is an example text message
                  format: org.matrix.custom.html
                  formatted_body: <b>This is an example text message</b>
                  msgtype: m.text
                event_id: $143273582443PhrSn:example.org
                origin_server_ts: 1432735824653
                room_id: '!636q39766251:matrix.org'
                sender: '@example:example.org'
                type: m.room.message
                unsigned:
                  age: 1234
              schema:
                $ref: '#/components/schemas/inline_response_200_11'
          description: The full event.
        404:
          content:
            application/json:
              example:
                errcode: M_NOT_FOUND
                error: Event not found.
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: The event was not found or you do not have permission to read
            this event.
      security:
      - accessToken: []
      summary: Get a single event by event ID.
      tags:
      - Room participation
  /_matrix/client/unstable/rooms/{roomId}/forget:
    post:
      description: |-
        This API stops a user remembering about a particular room.

        In general, history is a first class citizen in Matrix. After this API
        is called, however, a user will no longer be able to retrieve history
        for this room. If all users on a homeserver forget a room, the room is
        eligible for deletion from that homeserver.

        If the user is currently joined to the room, they must leave the room
        before calling this API.
      operationId: forgetRoom
      parameters:
      - description: The room identifier to forget.
        example: '!au1ba7o:matrix.org'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The room has been forgotten.
        400:
          content:
            application/json:
              example:
                errcode: M_UNKNOWN
                error: User @example:matrix.org is in room !au1ba7o:matrix.org
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: The user has not left the room
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Stop the requesting user remembering about a particular room.
      tags:
      - Room membership
  /_matrix/client/unstable/rooms/{roomId}/initialSync:
    get:
      deprecated: true
      description: |-
        Get a copy of the current state and the most recent messages in a room.

        This endpoint was deprecated in r0 of this specification. There is no
        direct replacement; the relevant information is returned by the
        |/sync|_ API. See the `migration guide
        <https://matrix.org/docs/guides/client-server-migrating-from-v1.html#deprecated-endpoints>`_.
      operationId: roomInitialSync
      parameters:
      - description: The room to get the data.
        example: '!636q39766251:example.com'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                account_data:
                - content:
                    tags:
                      work:
                        order: "1"
                  type: m.tag
                membership: join
                messages:
                  chunk:
                  - content:
                      body: This is an example text message
                      format: org.matrix.custom.html
                      formatted_body: <b>This is an example text message</b>
                      msgtype: m.text
                    event_id: $143273582443PhrSn:example.org
                    origin_server_ts: 1432735824653
                    room_id: '!636q39766251:example.com'
                    sender: '@example:example.org'
                    type: m.room.message
                    unsigned:
                      age: 1234
                  - content:
                      body: something-important.doc
                      filename: something-important.doc
                      info:
                        mimetype: application/msword
                        size: 46144
                      msgtype: m.file
                      url: mxc://example.org/FHyPlCeYUSFFxlgbQYZmoEoe
                    event_id: $143273582443PhrSn:example.org
                    origin_server_ts: 1432735824653
                    room_id: '!636q39766251:example.com'
                    sender: '@example:example.org'
                    type: m.room.message
                    unsigned:
                      age: 1234
                  end: s3456_9_0
                  start: t44-3453_9_0
                room_id: '!636q39766251:example.com'
                state:
                - content:
                    join_rule: public
                  event_id: $143273582443PhrSn:example.org
                  origin_server_ts: 1432735824653
                  room_id: '!636q39766251:example.com'
                  sender: '@example:example.org'
                  state_key: ""
                  type: m.room.join_rules
                  unsigned:
                    age: 1234
                - content:
                    avatar_url: mxc://example.org/SEsfnsuifSDFSSEF
                    displayname: Alice Margatroid
                    membership: join
                  event_id: $143273582443PhrSn:example.org
                  origin_server_ts: 1432735824653
                  room_id: '!636q39766251:example.com'
                  sender: '@example:example.org'
                  state_key: '@alice:example.org'
                  type: m.room.member
                  unsigned:
                    age: 1234
                - content:
                    creator: '@example:example.org'
                    m.federate: true
                    predecessor:
                      event_id: $something:example.org
                      room_id: '!oldroom:example.org'
                    room_version: "1"
                  event_id: $143273582443PhrSn:example.org
                  origin_server_ts: 1432735824653
                  room_id: '!636q39766251:example.com'
                  sender: '@example:example.org'
                  state_key: ""
                  type: m.room.create
                  unsigned:
                    age: 1234
                - content:
                    ban: 50
                    events:
                      m.room.name: 100
                      m.room.power_levels: 100
                    events_default: 0
                    invite: 50
                    kick: 50
                    notifications:
                      room: 20
                    redact: 50
                    state_default: 50
                    users:
                      '@example:localhost': 100
                    users_default: 0
                  event_id: $143273582443PhrSn:example.org
                  origin_server_ts: 1432735824653
                  room_id: '!636q39766251:example.com'
                  sender: '@example:example.org'
                  state_key: ""
                  type: m.room.power_levels
                  unsigned:
                    age: 1234
                visibility: private
              schema:
                $ref: '#/components/schemas/RoomInfo_1'
          description: The current state of the room
        403:
          content: {}
          description: |
            You aren't a member of the room and weren't previously a member of the room.
      security:
      - accessToken: []
      summary: Snapshot the current state of a room and its most recent messages.
      tags:
      - Room participation
  /_matrix/client/unstable/rooms/{roomId}/invite:
    post:
      description: |-
        .. _invite-by-third-party-id-endpoint:

        *Note that there are two forms of this API, which are documented separately.
        This version of the API does not require that the inviter know the Matrix
        identifier of the invitee, and instead relies on third party identifiers.
        The homeserver uses an identity server to perform the mapping from
        third party identifier to a Matrix identifier. The other is documented in the*
        `joining rooms section`_.

        This API invites a user to participate in a particular room.
        They do not start participating in the room until they actually join the
        room.

        Only users currently in a particular room can invite other users to
        join that room.

        If the identity server did know the Matrix user identifier for the
        third party identifier, the homeserver will append a ``m.room.member``
        event to the room.

        If the identity server does not know a Matrix user identifier for the
        passed third party identifier, the homeserver will issue an invitation
        which can be accepted upon providing proof of ownership of the third
        party identifier. This is achieved by the identity server generating a
        token, which it gives to the inviting homeserver. The homeserver will
        add an ``m.room.third_party_invite`` event into the graph for the room,
        containing that token.

        When the invitee binds the invited third party identifier to a Matrix
        user ID, the identity server will give the user a list of pending
        invitations, each containing:

        - The room ID to which they were invited

        - The token given to the homeserver

        - A signature of the token, signed with the identity server's private key

        - The matrix user ID who invited them to the room

        If a token is requested from the identity server, the homeserver will
        append a ``m.room.third_party_invite`` event to the room.

        .. _joining rooms section: `invite-by-user-id-endpoint`_
      operationId: inviteBy3PID
      parameters:
      - description: The room identifier (not alias) to which to invite the user.
        example: '!d41d8cd:matrix.org'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_25'
        content:
          application/json:
            schema:
              example:
                address: cheeky@monkey.com
                id_server: matrix.org
                medium: email
              properties:
                address:
                  description: The invitee's third party identifier.
                  type: string
                id_server:
                  description: The hostname+port of the identity server which should
                    be used for third party identifier lookups.
                  type: string
                medium:
                  description: The kind of address being passed in the address field,
                    for example ``email``.
                  type: string
              required:
              - address
              - id_server
              - medium
              type: object
        required: true
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The user has been invited to join the room.
        403:
          content:
            application/json:
              example:
                errcode: M_FORBIDDEN
                error: '@cheeky_monkey:matrix.org is banned from the room'
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: |-
            You do not have permission to invite the user to the room. A meaningful ``errcode`` and description error text will be returned. Example reasons for rejections are:

            - The invitee has been banned from the room.
            - The invitee is already a member of the room.
            - The inviter is not currently in the room.
            - The inviter's power level is insufficient to invite users to the room.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Invite a user to participate in a particular room.
      tags:
      - Room membership
      x-codegen-request-body-name: body
  '/_matrix/client/unstable/rooms/{roomId}/invite ':
    post:
      description: |-
        .. _invite-by-user-id-endpoint:

        *Note that there are two forms of this API, which are documented separately.
        This version of the API requires that the inviter knows the Matrix
        identifier of the invitee. The other is documented in the*
        `third party invites section`_.

        This API invites a user to participate in a particular room.
        They do not start participating in the room until they actually join the
        room.

        Only users currently in a particular room can invite other users to
        join that room.

        If the user was invited to the room, the homeserver will append a
        ``m.room.member`` event to the room.

        .. _third party invites section: `invite-by-third-party-id-endpoint`_
      operationId: inviteUser
      parameters:
      - description: The room identifier (not alias) to which to invite the user.
        example: '!d41d8cd:matrix.org'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_26'
        content:
          application/json:
            schema:
              example:
                user_id: '@cheeky_monkey:matrix.org'
              properties:
                user_id:
                  description: The fully qualified user ID of the invitee.
                  type: string
              required:
              - user_id
              type: object
        required: true
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The user has been invited to join the room.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: |2-

            The request is invalid. A meaningful ``errcode`` and description
            error text will be returned. Example reasons for rejection include:

            - The request body is malformed (``errcode`` set to ``M_BAD_JSON``
              or ``M_NOT_JSON``).

            - One or more users being invited to the room are residents of a
              homeserver which does not support the requested room version. The
              ``errcode`` will be ``M_UNSUPPORTED_ROOM_VERSION`` in these cases.
        403:
          content:
            application/json:
              example:
                errcode: M_FORBIDDEN
                error: '@cheeky_monkey:matrix.org is banned from the room'
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: |-
            You do not have permission to invite the user to the room. A meaningful ``errcode`` and description error text will be returned. Example reasons for rejections are:

            - The invitee has been banned from the room.
            - The invitee is already a member of the room.
            - The inviter is not currently in the room.
            - The inviter's power level is insufficient to invite users to the room.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Invite a user to participate in a particular room.
      tags:
      - Room membership
      x-codegen-request-body-name: body
  /_matrix/client/unstable/rooms/{roomId}/join:
    post:
      description: |-
        *Note that this API requires a room ID, not alias.* ``/join/{roomIdOrAlias}`` *exists if you have a room alias.*

        This API starts a user participating in a particular room, if that user
        is allowed to participate in that room. After this call, the client is
        allowed to see all current state events in the room, and all subsequent
        events associated with the room until the user leaves the room.

        After a user has joined a room, the room will appear as an entry in the
        response of the |/initialSync|_ and |/sync|_ APIs.

        If a ``third_party_signed`` was supplied, the homeserver must verify
        that it matches a pending ``m.room.third_party_invite`` event in the
        room, and perform key validity checking if required by the event.
      operationId: joinRoomById
      parameters:
      - description: The room identifier (not alias) to join.
        example: '!d41d8cd:matrix.org'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_27'
        content:
          application/json:
            schema:
              properties:
                third_party_signed:
                  $ref: '#/components/schemas/Third Party Signed'
              type: object
        required: false
      responses:
        200:
          content:
            application/json:
              example:
                room_id: '!d41d8cd:matrix.org'
              schema:
                $ref: '#/components/schemas/inline_response_200_13'
          description: |-
            The room has been joined.

            The joined room ID must be returned in the ``room_id`` field.
        403:
          content:
            application/json:
              example:
                errcode: M_FORBIDDEN
                error: You are not invited to this room.
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: |-
            You do not have permission to join the room. A meaningful ``errcode`` and description error text will be returned. Example reasons for rejection are:

            - The room is invite-only and the user was not invited.
            - The user has been banned from the room.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Start the requesting user participating in a particular room.
      tags:
      - Room membership
      x-codegen-request-body-name: third_party_signed
  /_matrix/client/unstable/rooms/{roomId}/joined_members:
    get:
      description: This API returns a map of MXIDs to member info objects for members
        of the room. The current user must be in the room for it to work, unless it
        is an Application Service in which case any of the AS's users must be in the
        room. This API is primarily for Application Services and should be faster
        to respond than ``/members`` as it can be implemented more efficiently on
        the server.
      operationId: getJoinedMembersByRoom
      parameters:
      - description: The room to get the members of.
        example: '!636q39766251:example.com'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                joined:
                  '@bar:example.com':
                    avatar_url: mxc://riot.ovh/printErCATzZijQsSDWorRaK
                    display_name: Bar
              schema:
                $ref: '#/components/schemas/inline_response_200_34'
          description: A map of MXID to room member objects.
        403:
          content: {}
          description: |
            You aren't a member of the room.
      security:
      - accessToken: []
      summary: Gets the list of currently joined users and their profile data.
      tags:
      - Room participation
  /_matrix/client/unstable/rooms/{roomId}/kick:
    post:
      description: |-
        Kick a user from the room.

        The caller must have the required power level in order to perform this operation.

        Kicking a user adjusts the target member's membership state to be ``leave`` with an
        optional ``reason``. Like with other membership changes, a user can directly adjust
        the target member's state by making a request to ``/rooms/<room id>/state/m.room.member/<user id>``.
      operationId: kick
      parameters:
      - description: The room identifier (not alias) from which the user should be
          kicked.
        example: '!e42d8c:matrix.org'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_28'
        content:
          application/json:
            schema:
              example:
                reason: Telling unfunny jokes
                user_id: '@cheeky_monkey:matrix.org'
              properties:
                reason:
                  description: "The reason the user has been kicked. This will be\
                    \ supplied as the \n``reason`` on the target's updated `m.room.member`_\
                    \ event."
                  type: string
                user_id:
                  description: The fully qualified user ID of the user being kicked.
                  type: string
              required:
              - user_id
              type: object
        required: true
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The user has been kicked from the room.
        403:
          content:
            application/json:
              example:
                errcode: M_FORBIDDEN
                error: You do not have a high enough power level to kick from this
                  room.
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: |-
            You do not have permission to kick the user from the room. A meaningful ``errcode`` and description error text will be returned. Example reasons for rejections are:

            - The kicker is not currently in the room.
            - The kickee is not currently in the room.
            - The kicker's power level is insufficient to kick users from the room.
      security:
      - accessToken: []
      summary: Kick a user from the room.
      tags:
      - Room membership
      x-codegen-request-body-name: body
  /_matrix/client/unstable/rooms/{roomId}/leave:
    post:
      description: |-
        This API stops a user participating in a particular room.

        If the user was already in the room, they will no longer be able to see
        new events in the room. If the room requires an invite to join, they
        will need to be re-invited before they can re-join.

        If the user was invited to the room, but had not joined, this call
        serves to reject the invite.

        The user will still be allowed to retrieve history from the room which
        they were previously allowed to see.
      operationId: leaveRoom
      parameters:
      - description: The room identifier to leave.
        example: '!nkl290a:matrix.org'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The room has been left.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Stop the requesting user participating in a particular room.
      tags:
      - Room membership
  /_matrix/client/unstable/rooms/{roomId}/members:
    get:
      description: Get the list of members for this room.
      operationId: getMembersByRoom
      parameters:
      - description: The room to get the member events for.
        example: '!636q39766251:example.com'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      - description: |-
          The point in time (pagination token) to return members for in the room.
          This token can be obtained from a ``prev_batch`` token returned for
          each room by the sync API. Defaults to the current state of the room,
          as determined by the server.
        example: YWxsCgpOb25lLDM1ODcwOA
        in: query
        name: at
        schema:
          type: string
      - description: |-
          The kind of membership to filter for. Defaults to no filtering if
          unspecified. When specified alongside ``not_membership``, the two
          parameters create an 'or' condition: either the membership *is*
          the same as ``membership`` **or** *is not* the same as ``not_membership``.
        example: join
        in: query
        name: membership
        schema:
          enum:
          - join
          - invite
          - leave
          - ban
          type: string
      - description: |-
          The kind of membership to exclude from the results. Defaults to no
          filtering if unspecified.
        example: leave
        in: query
        name: not_membership
        schema:
          enum:
          - join
          - invite
          - leave
          - ban
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                chunk:
                - content:
                    avatar_url: mxc://example.org/SEsfnsuifSDFSSEF
                    displayname: Alice Margatroid
                    membership: join
                  event_id: $143273582443PhrSn:example.org
                  origin_server_ts: 1432735824653
                  room_id: '!636q39766251:example.com'
                  sender: '@example:example.org'
                  state_key: '@alice:example.org'
                  type: m.room.member
                  unsigned:
                    age: 1234
              schema:
                $ref: '#/components/schemas/inline_response_200_35'
          description: |-
            A list of members of the room. If you are joined to the room then
            this will be the current members of the room. If you have left the
            room then this will be the members of the room when you left.
        403:
          content: {}
          description: |
            You aren't a member of the room and weren't previously a member of the room.
      security:
      - accessToken: []
      summary: Get the m.room.member events for the room.
      tags:
      - Room participation
  /_matrix/client/unstable/rooms/{roomId}/messages:
    get:
      description: |-
        This API returns a list of message and state events for a room. It uses
        pagination query parameters to paginate history in the room.

        *Note*: This endpoint supports lazy-loading of room member events. See
        `Lazy-loading room members <#lazy-loading-room-members>`_ for more information.
      operationId: getRoomEvents
      parameters:
      - description: The room to get events from.
        example: '!636q39766251:example.com'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      - description: |-
          The token to start returning events from. This token can be obtained
          from a ``prev_batch`` token returned for each room by the sync API,
          or from a ``start`` or ``end`` token returned by a previous request
          to this endpoint.
        example: s345_678_333
        in: query
        name: from
        required: true
        schema:
          type: string
      - description: |-
          The token to stop returning events at. This token can be obtained from
          a ``prev_batch`` token returned for each room by the sync endpoint,
          or from a ``start`` or ``end`` token returned by a previous request to
          this endpoint.
        in: query
        name: to
        schema:
          type: string
      - description: The direction to return events from.
        example: b
        in: query
        name: dir
        required: true
        schema:
          enum:
          - b
          - f
          type: string
      - description: 'The maximum number of events to return. Default: 10.'
        example: "3"
        in: query
        name: limit
        schema:
          type: integer
      - description: A JSON RoomEventFilter to filter returned events with.
        example: '{"contains_url":true}'
        in: query
        name: filter
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                chunk:
                - content:
                    body: This is an example text message
                    format: org.matrix.custom.html
                    formatted_body: <b>This is an example text message</b>
                    msgtype: m.text
                  event_id: $143273582443PhrSn:example.org
                  origin_server_ts: 1432735824653
                  room_id: '!636q39766251:example.com'
                  sender: '@example:example.org'
                  type: m.room.message
                  unsigned:
                    age: 1234
                - content:
                    name: The room name
                  event_id: $143273582443PhrSn:example.org
                  origin_server_ts: 1432735824653
                  room_id: '!636q39766251:example.com'
                  sender: '@example:example.org'
                  state_key: ""
                  type: m.room.name
                  unsigned:
                    age: 1234
                - content:
                    body: Gangnam Style
                    info:
                      duration: 2140786
                      h: 320
                      mimetype: video/mp4
                      size: 1563685
                      thumbnail_info:
                        h: 300
                        mimetype: image/jpeg
                        size: 46144
                        w: 300
                      thumbnail_url: mxc://example.org/FHyPlCeYUSFFxlgbQYZmoEoe
                      w: 480
                    msgtype: m.video
                    url: mxc://example.org/a526eYUSFFxlgbQYZmo442
                  event_id: $143273582443PhrSn:example.org
                  origin_server_ts: 1432735824653
                  room_id: '!636q39766251:example.com'
                  sender: '@example:example.org'
                  type: m.room.message
                  unsigned:
                    age: 1234
                end: t47409-4357353_219380_26003_2265
                start: t47429-4392820_219380_26003_2265
              schema:
                $ref: '#/components/schemas/inline_response_200_36'
          description: A list of messages with a new token to request more.
        403:
          content: {}
          description: |
            You aren't a member of the room.
      security:
      - accessToken: []
      summary: Get a list of events for this room
      tags:
      - Room participation
  /_matrix/client/unstable/rooms/{roomId}/read_markers:
    post:
      description: |-
        Sets the position of the read marker for a given room, and optionally
        the read receipt's location.
      operationId: setReadMarker
      parameters:
      - description: The room ID to set the read marker in for the user.
        example: '!somewhere:example.org'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_29'
        content:
          application/json:
            schema:
              properties:
                m.fully_read:
                  description: |-
                    The event ID the read marker should be located at. The
                    event MUST belong to the room.
                  example: $somewhere:example.org
                  type: string
                m.read:
                  description: |-
                    The event ID to set the read receipt location at. This is
                    equivalent to calling ``/receipt/m.read/$elsewhere:example.org``
                    and is provided here to save that extra call.
                  example: $elsewhere:example.org
                  type: string
              required:
              - m.fully_read
              type: object
        description: The read marker and optional read receipt locations.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
          description: The read marker, and read receipt if provided, have been updated.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Set the position of the read marker for a room.
      tags:
      - Read Markers
      x-codegen-request-body-name: body
  /_matrix/client/unstable/rooms/{roomId}/receipt/{receiptType}/{eventId}:
    post:
      description: |-
        This API updates the marker for the given receipt type to the event ID
        specified.
      operationId: postReceipt
      parameters:
      - description: The room in which to send the event.
        example: '!wefuh21ffskfuh345:example.com'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      - description: The type of receipt to send.
        example: m.read
        in: path
        name: receiptType
        required: true
        schema:
          enum:
          - m.read
          type: string
      - description: The event ID to acknowledge up to.
        example: $1924376522eioj:example.com
        in: path
        name: eventId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              example: {}
              type: object
        description: |-
          Extra receipt information to attach to ``content`` if any. The
          server will automatically set the ``ts`` field.
        required: false
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The receipt was sent.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Send a receipt for the given event ID.
      tags:
      - Room participation
      x-codegen-request-body-name: receipt
  /_matrix/client/unstable/rooms/{roomId}/redact/{eventId}/{txnId}:
    put:
      description: |-
        Strips all information out of an event which isn't critical to the
        integrity of the server-side representation of the room.

        This cannot be undone.

        Users may redact their own events, and any user with a power level
        greater than or equal to the `redact` power level of the room may
        redact events there.
      operationId: redactEvent
      parameters:
      - description: The room from which to redact the event.
        example: '!637q39766251:example.com'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      - description: The ID of the event to redact
        example: bai2b1i9:matrix.org
        in: path
        name: eventId
        required: true
        schema:
          type: string
      - description: |-
          The transaction ID for this event. Clients should generate a
          unique ID; it will be used by the server to ensure idempotency of requests.
        example: "37"
        in: path
        name: txnId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_30'
        content:
          application/json:
            schema:
              example:
                reason: Indecent material
              properties:
                reason:
                  description: The reason for the event being redacted.
                  type: string
              type: object
        required: false
      responses:
        200:
          content:
            application/json:
              example:
                event_id: $YUwQidLecu:example.com
              schema:
                $ref: '#/components/schemas/inline_response_200_37'
          description: An ID for the redaction event.
      security:
      - accessToken: []
      summary: Strips all non-integrity-critical information out of an event.
      tags:
      - Room participation
      x-codegen-request-body-name: body
  /_matrix/client/unstable/rooms/{roomId}/report/{eventId}:
    post:
      description: |-
        Reports an event as inappropriate to the server, which may then notify
        the appropriate people.
      operationId: reportContent
      parameters:
      - description: The room in which the event being reported is located.
        example: '!637q39766251:example.com'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      - description: The event to report.
        example: $something:example.org
        in: path
        name: eventId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_31'
        content:
          application/json:
            schema:
              example:
                reason: this makes me sad
                score: -100
              properties:
                reason:
                  description: The reason the content is being reported. May be blank.
                  type: string
                score:
                  description: |-
                    The score to rate this content as where -100 is most offensive
                    and 0 is inoffensive.
                  type: integer
              required:
              - reason
              - score
              type: object
        required: false
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The event has been reported successfully.
      security:
      - accessToken: []
      summary: Reports an event as inappropriate.
      tags:
      - Reporting content
      x-codegen-request-body-name: body
  /_matrix/client/unstable/rooms/{roomId}/send/{eventType}/{txnId}:
    put:
      description: |-
        This endpoint is used to send a message event to a room. Message events
        allow access to historical events and pagination, making them suited
        for "once-off" activity in a room.

        The body of the request should be the content object of the event; the
        fields in this object will vary depending on the type of event. See
        `Room Events`_ for the m. event specification.
      operationId: sendMessage
      parameters:
      - description: The room to send the event to.
        example: '!636q39766251:example.com'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      - description: The type of event to send.
        example: m.room.message
        in: path
        name: eventType
        required: true
        schema:
          type: string
      - description: |-
          The transaction ID for this event. Clients should generate an
          ID unique across requests with the same access token; it will be
          used by the server to ensure idempotency of requests.
        example: "35"
        in: path
        name: txnId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              example:
                body: hello
                msgtype: m.text
              type: object
        required: false
      responses:
        200:
          content:
            application/json:
              example:
                event_id: $YUwRidLecu:example.com
              schema:
                $ref: '#/components/schemas/inline_response_200_37'
          description: An ID for the sent event.
      security:
      - accessToken: []
      summary: Send a message event to the given room.
      tags:
      - Room participation
      x-codegen-request-body-name: body
  /_matrix/client/unstable/rooms/{roomId}/state:
    get:
      description: Get the state events for the current state of a room.
      operationId: getRoomState
      parameters:
      - description: The room to look up the state for.
        example: '!636q39766251:example.com'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
              - content:
                  join_rule: public
                event_id: $143273582443PhrSn:example.org
                origin_server_ts: 1432735824653
                room_id: '!636q39766251:example.com'
                sender: '@example:example.org'
                state_key: ""
                type: m.room.join_rules
                unsigned:
                  age: 1234
              - content:
                  avatar_url: mxc://example.org/SEsfnsuifSDFSSEF
                  displayname: Alice Margatroid
                  membership: join
                event_id: $143273582443PhrSn:example.org
                origin_server_ts: 1432735824653
                room_id: '!636q39766251:example.com'
                sender: '@example:example.org'
                state_key: '@alice:example.org'
                type: m.room.member
                unsigned:
                  age: 1234
              - content:
                  creator: '@example:example.org'
                  m.federate: true
                  predecessor:
                    event_id: $something:example.org
                    room_id: '!oldroom:example.org'
                  room_version: "1"
                event_id: $143273582443PhrSn:example.org
                origin_server_ts: 1432735824653
                room_id: '!636q39766251:example.com'
                sender: '@example:example.org'
                state_key: ""
                type: m.room.create
                unsigned:
                  age: 1234
              - content:
                  ban: 50
                  events:
                    m.room.name: 100
                    m.room.power_levels: 100
                  events_default: 0
                  invite: 50
                  kick: 50
                  notifications:
                    room: 20
                  redact: 50
                  state_default: 50
                  users:
                    '@example:localhost': 100
                  users_default: 0
                event_id: $143273582443PhrSn:example.org
                origin_server_ts: 1432735824653
                room_id: '!636q39766251:example.com'
                sender: '@example:example.org'
                state_key: ""
                type: m.room.power_levels
                unsigned:
                  age: 1234
              schema:
                description: |-
                  If the user is a member of the room this will be the
                  current state of the room as a list of events. If the user
                  has left the room then this will be the state of the room
                  when they left as a list of events.
                items:
                  allOf:
                  - allOf:
                    - description: Room Events have the following fields.
                      properties:
                        room_id:
                          description: |-
                            The ID of the room associated with this event. Will not be present on events
                            that arrive through ``/sync``, despite being required everywhere else.
                          type: string
                      required:
                      - room_id
                      title: Room Event
                      type: object
                    - description: In addition to the Room Event fields, State Events
                        have the following additional fields.
                      properties:
                        prev_content:
                          description: Optional. The previous ``content`` for this
                            event. If there is no previous content, this key will
                            be missing.
                          properties: {}
                          title: EventContent
                          type: object
                        state_key:
                          description: |-
                            A unique key which defines the overwriting semantics for this piece of room state. This value is often a zero-length string. The presence of this key makes this event a State Event.
                            State keys starting with an ``@`` are reserved for referencing user IDs, such as room members. With the exception of a few events, state events set with a given user's ID as the state key MUST only be set by that user.
                          type: string
                      required:
                      - state_key
                      title: State Event
                      type: object
                    description: State Events have the following fields.
                    title: State Event
                    type: object
                  title: StateEvent
                  type: object
                title: RoomState
                type: array
          description: The current state of the room
        403:
          content: {}
          description: |
            You aren't a member of the room and weren't previously a member of the room.
      security:
      - accessToken: []
      summary: Get all state events in the current state of a room.
      tags:
      - Room participation
  /_matrix/client/unstable/rooms/{roomId}/state/{eventType}/{stateKey}:
    get:
      description: |-
        .. For backwards compatibility with older links...
        .. _`get-matrix-client-unstable-rooms-roomid-state-eventtype`:

        Looks up the contents of a state event in a room. If the user is
        joined to the room then the state is taken from the current
        state of the room. If the user has left the room then the state is
        taken from the state of the room when they left.
      operationId: getRoomStateWithKey
      parameters:
      - description: The room to look up the state in.
        example: '!636q39766251:example.com'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      - description: The type of state to look up.
        example: m.room.name
        in: path
        name: eventType
        required: true
        schema:
          type: string
      - description: |-
          The key of the state to look up. Defaults to an empty string. When
          an empty string, the trailing slash on this endpoint is optional.
        example: ""
        in: path
        name: stateKey
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                name: Example room name
              schema:
                type: object
          description: The content of the state event.
        403:
          content: {}
          description: |
            You aren't a member of the room and weren't previously a member of the room.
        404:
          content: {}
          description: The room has no state with the given type or key.
      security:
      - accessToken: []
      summary: Get the state identified by the type and key.
      tags:
      - Room participation
    put:
      description: |
        .. For backwards compatibility with older links...
        .. _`put-matrix-client-unstable-rooms-roomid-state-eventtype`:

        State events can be sent using this endpoint.  These events will be
        overwritten if ``<room id>``, ``<event type>`` and ``<state key>`` all
        match.

        Requests to this endpoint **cannot use transaction IDs**
        like other ``PUT`` paths because they cannot be differentiated from the
        ``state_key``. Furthermore, ``POST`` is unsupported on state paths.

        The body of the request should be the content object of the event; the
        fields in this object will vary depending on the type of event. See
        `Room Events`_ for the ``m.`` event specification.
      operationId: setRoomStateWithKey
      parameters:
      - description: The room to set the state in
        example: '!636q39766251:example.com'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      - description: The type of event to send.
        example: m.room.member
        in: path
        name: eventType
        required: true
        schema:
          type: string
      - description: |-
          The state_key for the state to send. Defaults to the empty string. When
          an empty string, the trailing slash on this endpoint is optional.
        example: '@alice:example.com'
        in: path
        name: stateKey
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              example:
                avatar_url: mxc://localhost/SEsfnsuifSDFSSEF
                displayname: Alice Margatroid
                membership: join
              type: object
        required: false
      responses:
        200:
          content:
            application/json:
              example:
                event_id: $YUwRidLecu:example.com
              schema:
                $ref: '#/components/schemas/inline_response_200_37'
          description: An ID for the sent event.
        403:
          content:
            application/json:
              example:
                errcode: M_FORBIDDEN
                error: You do not have permission to send the event.
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: The sender doesn't have permission to send the event into the
            room.
      security:
      - accessToken: []
      summary: Send a state event to the given room.
      tags:
      - Room participation
      x-codegen-request-body-name: body
  /_matrix/client/unstable/rooms/{roomId}/typing/{userId}:
    put:
      description: |-
        This tells the server that the user is typing for the next N
        milliseconds where N is the value specified in the ``timeout`` key.
        Alternatively, if ``typing`` is ``false``, it tells the server that the
        user has stopped typing.
      operationId: setTyping
      parameters:
      - description: The user who has started to type.
        example: '@alice:example.com'
        in: path
        name: userId
        required: true
        schema:
          type: string
      - description: The room in which the user is typing.
        example: '!wefh3sfukhs:example.com'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_32'
        content:
          application/json:
            schema:
              example:
                timeout: 30000
                typing: true
              properties:
                timeout:
                  description: The length of time in milliseconds to mark this user
                    as typing.
                  type: integer
                typing:
                  description: |-
                    Whether the user is typing or not. If ``false``, the ``timeout``
                    key can be omitted.
                  type: boolean
              required:
              - typing
              type: object
        description: The current typing state.
        required: true
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The new typing state was set.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Informs the server that the user has started or stopped typing.
      tags:
      - Room participation
      x-codegen-request-body-name: typingState
  /_matrix/client/unstable/rooms/{roomId}/unban:
    post:
      description: |-
        Unban a user from the room. This allows them to be invited to the room,
        and join if they would otherwise be allowed to join according to its join rules.

        The caller must have the required power level in order to perform this operation.
      operationId: unban
      parameters:
      - description: The room identifier (not alias) from which the user should be
          unbanned.
        example: '!e42d8c:matrix.org'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_33'
        content:
          application/json:
            schema:
              example:
                user_id: '@cheeky_monkey:matrix.org'
              properties:
                user_id:
                  description: The fully qualified user ID of the user being unbanned.
                  type: string
              required:
              - user_id
              type: object
        required: true
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The user has been unbanned from the room.
        403:
          content:
            application/json:
              example:
                errcode: M_FORBIDDEN
                error: You do not have a high enough power level to unban from this
                  room.
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: |-
            You do not have permission to unban the user from the room. A meaningful ``errcode`` and description error text will be returned. Example reasons for rejections are:

            - The unbanner's power level is insufficient to unban users from the room.
      security:
      - accessToken: []
      summary: Unban a user from the room.
      tags:
      - Room membership
      x-codegen-request-body-name: body
  /_matrix/client/unstable/rooms/{roomId}/upgrade:
    post:
      description: Upgrades the given room to a particular room version.
      operationId: upgradeRoom
      parameters:
      - description: The ID of the room to upgrade.
        example: '!oldroom:example.org'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_34'
        content:
          application/json:
            schema:
              example:
                new_version: "2"
              properties:
                new_version:
                  description: The new version for the room.
                  type: string
              required:
              - new_version
              type: object
        description: The request body
        required: true
      responses:
        200:
          content:
            application/json:
              example:
                replacement_room: '!newroom:example.org'
              schema:
                $ref: '#/components/schemas/inline_response_200_38'
          description: The room was successfully upgraded.
        400:
          content:
            application/json:
              example:
                errcode: M_UNSUPPORTED_ROOM_VERSION
                error: This server does not support that room version
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: |-
            The request was invalid. One way this can happen is if the room version
            requested is not supported by the homeserver.
        403:
          content:
            application/json:
              example:
                errcode: M_FORBIDDEN
                error: You cannot upgrade this room
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: The user is not permitted to upgrade the room.
      security:
      - accessToken: []
      summary: Upgrades a room to a new room version.
      tags:
      - Room ugprades
      x-codegen-request-body-name: body
  /_matrix/client/unstable/search:
    post:
      description: Performs a full text search across different categories.
      operationId: search
      parameters:
      - description: |-
          The point to return events from. If given, this should be a
          ``next_batch`` result from a previous call to this endpoint.
        example: YWxsCgpOb25lLDM1ODcwOA
        in: query
        name: next_batch
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_35'
        content:
          application/json:
            schema:
              example:
                search_categories:
                  room_events:
                    groupings:
                      group_by:
                      - key: room_id
                    keys:
                    - content.body
                    order_by: recent
                    search_term: martians and men
              properties:
                search_categories:
                  $ref: '#/components/schemas/Categories'
              required:
              - search_categories
              type: object
        required: false
      responses:
        200:
          content:
            application/json:
              example:
                search_categories:
                  room_events:
                    count: 1224
                    groups:
                      room_id:
                        '!qPewotXpIctQySfjSy:localhost':
                          next_batch: BdgFsdfHSf-dsFD
                          order: 1
                          results:
                          - $144429830826TWwbB:localhost
                    highlights:
                    - martians
                    - men
                    next_batch: 5FdgFsd234dfgsdfFD
                    results:
                    - rank: 0.00424866
                      result:
                        content:
                          body: This is an example text message
                          format: org.matrix.custom.html
                          formatted_body: <b>This is an example text message</b>
                          msgtype: m.text
                        event_id: $144429830826TWwbB:localhost
                        origin_server_ts: 1432735824653
                        room_id: '!qPewotXpIctQySfjSy:localhost'
                        sender: '@example:example.org'
                        type: m.room.message
                        unsigned:
                          age: 1234
              schema:
                $ref: '#/components/schemas/Results'
          description: Results of the search.
        400:
          content: {}
          description: Part of the request was invalid.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Perform a server-side search.
      tags:
      - Search
      x-codegen-request-body-name: body
  /_matrix/client/unstable/sendToDevice/{eventType}/{txnId}:
    put:
      description: |-
        This endpoint is used to send send-to-device events to a set of
        client devices.
      operationId: sendToDevice
      parameters:
      - description: The type of event to send.
        example: m.new_device
        in: path
        name: eventType
        required: true
        schema:
          type: string
      - description: |-
          The transaction ID for this event. Clients should generate an
          ID unique across requests with the same access token; it will be
          used by the server to ensure idempotency of requests.
        example: "35"
        in: path
        name: txnId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/body'
        content:
          application/json:
            schema:
              properties:
                messages:
                  additionalProperties:
                    additionalProperties:
                      description: Message content
                      properties: {}
                      title: EventContent
                      type: object
                    type: object
                  description: |-
                    The messages to send. A map from user ID, to a map from
                    device ID to message body. The device ID may also be `*`,
                    meaning all known devices for the user.
                  example:
                    '@alice:example.com':
                      TLLBEANAAG:
                        example_content_key: value
                  type: object
              title: body
              type: object
        required: true
      responses:
        200:
          content:
            application/json:
              example: {}
          description: The message was successfully sent.
      security:
      - accessToken: []
      summary: Send an event to a given set of devices.
      tags:
      - Send-to-Device messaging
      x-codegen-request-body-name: body
  /_matrix/client/unstable/sync:
    get:
      description: |-
        Synchronise the client's state with the latest state on the server.
        Clients use this API when they first log in to get an initial snapshot
        of the state on the server, and then continue to call this API to get
        incremental deltas to the state, and to receive new messages.

        *Note*: This endpoint supports lazy-loading. See `Filtering <#filtering>`_
        for more information. Lazy-loading members is only supported on a ``StateFilter``
        for this endpoint. When lazy-loading is enabled, servers MUST include the
        syncing user's own membership event when they join a room, or when the
        full state of rooms is requested, to aid discovering the user's avatar &
        displayname.

        Like other members, the user's own membership event is eligible
        for being considered redundant by the server. When a sync is ``limited``,
        the server MUST return membership events for events in the gap
        (between ``since`` and the start of the returned timeline), regardless
        as to whether or not they are redundant.  This ensures that joins/leaves
        and profile changes which occur during the gap are not lost.
      operationId: sync
      parameters:
      - description: |-
          The ID of a filter created using the filter API or a filter JSON
          object encoded as a string. The server will detect whether it is
          an ID or a JSON object by whether the first character is a ``"{"``
          open brace. Passing the JSON inline is best suited to one off
          requests. Creating a filter using the filter API is recommended for
          clients that reuse the same filter multiple times, for example in
          long poll requests.

          See `Filtering <#filtering>`_ for more information.
        example: 66696p746572
        in: query
        name: filter
        schema:
          type: string
      - description: A point in time to continue a sync from.
        example: s72594_4483_1934
        in: query
        name: since
        schema:
          type: string
      - description: |-
          Controls whether to include the full state for all rooms the user
          is a member of.

          If this is set to ``true``, then all state events will be returned,
          even if ``since`` is non-empty. The timeline will still be limited
          by the ``since`` parameter. In this case, the ``timeout`` parameter
          will be ignored and the query will return immediately, possibly with
          an empty timeline.

          If ``false``, and ``since`` is non-empty, only state which has
          changed since the point indicated by ``since`` will be returned.

          By default, this is ``false``.
        example: "false"
        in: query
        name: full_state
        schema:
          type: boolean
      - description: |-
          Controls whether the client is automatically marked as online by
          polling this API. If this parameter is omitted then the client is
          automatically marked as online when it uses this API. Otherwise if
          the parameter is set to "offline" then the client is not marked as
          being online when it uses this API. When set to "unavailable", the
          client is marked as being idle.
        example: offline
        in: query
        name: set_presence
        schema:
          enum:
          - offline
          - online
          - unavailable
          type: string
      - description: |-
          The maximum time to wait, in milliseconds, before returning this
          request. If no events (or other data) become available before this
          time elapses, the server will return a response with empty fields.

          By default, this is ``0``, so the server will return immediately
          even if the response is empty.
        example: 30000
        in: query
        name: timeout
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              example:
                account_data:
                  events:
                  - content:
                      custom_config_key: custom_config_value
                    type: org.example.custom.config
                next_batch: s72595_4483_1934
                presence:
                  events:
                  - content:
                      avatar_url: mxc://localhost:wefuiwegh8742w
                      currently_active: false
                      last_active_ago: 2478593
                      presence: online
                      status_msg: Making cupcakes
                    sender: '@example:localhost'
                    type: m.presence
                rooms:
                  invite:
                    '!696r7674:example.com':
                      invite_state:
                        events:
                        - content:
                            name: My Room Name
                          sender: '@alice:example.com'
                          state_key: ""
                          type: m.room.name
                        - content:
                            membership: invite
                          sender: '@alice:example.com'
                          state_key: '@bob:example.com'
                          type: m.room.member
                  join:
                    '!726s6s6q:example.com':
                      account_data:
                        events:
                        - content:
                            tags:
                              u.work:
                                order: 0.9
                          type: m.tag
                        - content:
                            custom_config_key: custom_config_value
                          type: org.example.custom.room.config
                      ephemeral:
                        events:
                        - content:
                            user_ids:
                            - '@alice:matrix.org'
                            - '@bob:example.com'
                          room_id: '!jEsUZKDJdhlrceRyVU:example.org'
                          type: m.typing
                      state:
                        events:
                        - content:
                            avatar_url: mxc://example.org/SEsfnsuifSDFSSEF
                            displayname: Alice Margatroid
                            membership: join
                          event_id: $143273582443PhrSn:example.org
                          origin_server_ts: 1432735824653
                          room_id: '!726s6s6q:example.com'
                          sender: '@example:example.org'
                          state_key: '@alice:example.org'
                          type: m.room.member
                          unsigned:
                            age: 1234
                      summary:
                        m.heroes:
                        - '@alice:example.com'
                        - '@bob:example.com'
                        m.invited_member_count: 0
                        m.joined_member_count: 2
                      timeline:
                        events:
                        - content:
                            avatar_url: mxc://example.org/SEsfnsuifSDFSSEF
                            displayname: Alice Margatroid
                            membership: join
                          event_id: $143273582443PhrSn:example.org
                          origin_server_ts: 1432735824653
                          room_id: '!726s6s6q:example.com'
                          sender: '@example:example.org'
                          state_key: '@alice:example.org'
                          type: m.room.member
                          unsigned:
                            age: 1234
                        - content:
                            body: This is an example text message
                            format: org.matrix.custom.html
                            formatted_body: <b>This is an example text message</b>
                            msgtype: m.text
                          event_id: $143273582443PhrSn:example.org
                          origin_server_ts: 1432735824653
                          room_id: '!726s6s6q:example.com'
                          sender: '@example:example.org'
                          type: m.room.message
                          unsigned:
                            age: 1234
                        limited: true
                        prev_batch: t34-23535_0_0
                  leave: {}
              schema:
                $ref: '#/components/schemas/inline_response_200_39'
          description: The initial snapshot or delta for the client to use to update
            their state.
      security:
      - accessToken: []
      summary: Synchronise the client's state and receive new messages.
      tags:
      - Room participation
  /_matrix/client/unstable/user/{userId}/account_data/{type}:
    get:
      description: |-
        Get some account_data for the client. This config is only visible to the user
        that set the account_data.
      operationId: getAccountData
      parameters:
      - description: |-
          The ID of the user to get account_data for. The access token must be
          authorized to make requests for this user ID.
        example: '@alice:example.com'
        in: path
        name: userId
        required: true
        schema:
          type: string
      - description: |-
          The event type of the account_data to get. Custom types should be
          namespaced to avoid clashes.
        example: org.example.custom.config
        in: path
        name: type
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                example:
                  custom_account_data_key: custom_config_value
                type: object
          description: The account data content for the given type.
      security:
      - accessToken: []
      summary: Get some account_data for the user.
      tags:
      - User data
    put:
      description: |-
        Set some account_data for the client. This config is only visible to the user
        that set the account_data. The config will be synced to clients in the
        top-level ``account_data``.
      operationId: setAccountData
      parameters:
      - description: |-
          The ID of the user to set account_data for. The access token must be
          authorized to make requests for this user ID.
        example: '@alice:example.com'
        in: path
        name: userId
        required: true
        schema:
          type: string
      - description: |-
          The event type of the account_data to set. Custom types should be
          namespaced to avoid clashes.
        example: org.example.custom.config
        in: path
        name: type
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              example:
                custom_account_data_key: custom_config_value
              type: object
        description: The content of the account_data
        required: true
      responses:
        200:
          content: {}
          description: The account_data was successfully added.
      security:
      - accessToken: []
      summary: Set some account_data for the user.
      tags:
      - User data
      x-codegen-request-body-name: content
  /_matrix/client/unstable/user/{userId}/filter:
    post:
      description: |-
        Uploads a new filter definition to the homeserver.
        Returns a filter ID that may be used in future requests to
        restrict which events are returned to the client.
      operationId: defineFilter
      parameters:
      - description: The id of the user uploading the filter. The access token must
          be authorized to make requests for this user id.
        example: '@alice:example.com'
        in: path
        name: userId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - properties:
                  account_data:
                    allOf:
                    - properties:
                        limit:
                          description: The maximum number of events to return.
                          type: integer
                        not_senders:
                          description: A list of sender IDs to exclude. If this list
                            is absent then no senders are excluded. A matching sender
                            will be excluded even if it is listed in the ``'senders'``
                            filter.
                          items:
                            type: string
                          type: array
                        not_types:
                          description: A list of event types to exclude. If this list
                            is absent then no event types are excluded. A matching
                            type will be excluded even if it is listed in the ``'types'``
                            filter. A '*' can be used as a wildcard to match any sequence
                            of characters.
                          items:
                            type: string
                          type: array
                        senders:
                          description: A list of senders IDs to include. If this list
                            is absent then all senders are included.
                          items:
                            type: string
                          type: array
                        types:
                          description: A list of event types to include. If this list
                            is absent then all event types are included. A ``'*'``
                            can be used as a wildcard to match any sequence of characters.
                          items:
                            type: string
                          type: array
                      title: EventFilter
                      type: object
                    description: The user account data that isn't associated with
                      rooms to include.
                    type: object
                  event_fields:
                    description: List of event fields to include. If this list is
                      absent then all fields are included. The entries may include
                      '.' characters to indicate sub-fields. So ['content.body'] will
                      include the 'body' field of the 'content' object. A literal
                      '.' character in a field name may be escaped using a '\\'. A
                      server may include more fields than were requested.
                    items:
                      type: string
                    type: array
                  event_format:
                    description: The format to use for events. 'client' will return
                      the events in a format suitable for clients. 'federation' will
                      return the raw event as received over federation. The default
                      is 'client'.
                    enum:
                    - client
                    - federation
                    type: string
                  presence:
                    allOf:
                    - properties:
                        limit:
                          description: The maximum number of events to return.
                          type: integer
                        not_senders:
                          description: A list of sender IDs to exclude. If this list
                            is absent then no senders are excluded. A matching sender
                            will be excluded even if it is listed in the ``'senders'``
                            filter.
                          items:
                            type: string
                          type: array
                        not_types:
                          description: A list of event types to exclude. If this list
                            is absent then no event types are excluded. A matching
                            type will be excluded even if it is listed in the ``'types'``
                            filter. A '*' can be used as a wildcard to match any sequence
                            of characters.
                          items:
                            type: string
                          type: array
                        senders:
                          description: A list of senders IDs to include. If this list
                            is absent then all senders are included.
                          items:
                            type: string
                          type: array
                        types:
                          description: A list of event types to include. If this list
                            is absent then all event types are included. A ``'*'``
                            can be used as a wildcard to match any sequence of characters.
                          items:
                            type: string
                          type: array
                      title: EventFilter
                      type: object
                    description: The presence updates to include.
                    type: object
                  room:
                    description: Filters to be applied to room data.
                    properties:
                      account_data:
                        allOf:
                        - allOf:
                          - properties:
                              limit:
                                description: The maximum number of events to return.
                                type: integer
                              not_senders:
                                description: A list of sender IDs to exclude. If this
                                  list is absent then no senders are excluded. A matching
                                  sender will be excluded even if it is listed in
                                  the ``'senders'`` filter.
                                items:
                                  type: string
                                type: array
                              not_types:
                                description: A list of event types to exclude. If
                                  this list is absent then no event types are excluded.
                                  A matching type will be excluded even if it is listed
                                  in the ``'types'`` filter. A '*' can be used as
                                  a wildcard to match any sequence of characters.
                                items:
                                  type: string
                                type: array
                              senders:
                                description: A list of senders IDs to include. If
                                  this list is absent then all senders are included.
                                items:
                                  type: string
                                type: array
                              types:
                                description: A list of event types to include. If
                                  this list is absent then all event types are included.
                                  A ``'*'`` can be used as a wildcard to match any
                                  sequence of characters.
                                items:
                                  type: string
                                type: array
                            title: EventFilter
                            type: object
                          - properties:
                              contains_url:
                                description: If ``true``, includes only events with
                                  a ``url`` key in their content. If ``false``, excludes
                                  those events. If omitted, ``url`` key is not considered
                                  for filtering.
                                type: boolean
                              include_redundant_members:
                                description: |-
                                  If ``true``, sends all membership events for all events, even if they have already
                                  been sent to the client. Does not
                                  apply unless ``lazy_load_members`` is ``true``. See
                                  `Lazy-loading room members <#lazy-loading-room-members>`_
                                  for more information. Defaults to ``false``.
                                type: boolean
                              lazy_load_members:
                                description: |-
                                  If ``true``, enables lazy-loading of membership events. See
                                  `Lazy-loading room members <#lazy-loading-room-members>`_
                                  for more information. Defaults to ``false``.
                                type: boolean
                              not_rooms:
                                description: A list of room IDs to exclude. If this
                                  list is absent then no rooms are excluded. A matching
                                  room will be excluded even if it is listed in the
                                  ``'rooms'`` filter.
                                items:
                                  type: string
                                type: array
                              rooms:
                                description: A list of room IDs to include. If this
                                  list is absent then all rooms are included.
                                items:
                                  type: string
                                type: array
                            title: RoomEventFilter
                            type: object
                          type: object
                        description: The per user account data to include for rooms.
                        type: object
                      ephemeral:
                        allOf:
                        - allOf:
                          - properties:
                              limit:
                                description: The maximum number of events to return.
                                type: integer
                              not_senders:
                                description: A list of sender IDs to exclude. If this
                                  list is absent then no senders are excluded. A matching
                                  sender will be excluded even if it is listed in
                                  the ``'senders'`` filter.
                                items:
                                  type: string
                                type: array
                              not_types:
                                description: A list of event types to exclude. If
                                  this list is absent then no event types are excluded.
                                  A matching type will be excluded even if it is listed
                                  in the ``'types'`` filter. A '*' can be used as
                                  a wildcard to match any sequence of characters.
                                items:
                                  type: string
                                type: array
                              senders:
                                description: A list of senders IDs to include. If
                                  this list is absent then all senders are included.
                                items:
                                  type: string
                                type: array
                              types:
                                description: A list of event types to include. If
                                  this list is absent then all event types are included.
                                  A ``'*'`` can be used as a wildcard to match any
                                  sequence of characters.
                                items:
                                  type: string
                                type: array
                            title: EventFilter
                            type: object
                          - properties:
                              contains_url:
                                description: If ``true``, includes only events with
                                  a ``url`` key in their content. If ``false``, excludes
                                  those events. If omitted, ``url`` key is not considered
                                  for filtering.
                                type: boolean
                              include_redundant_members:
                                description: |-
                                  If ``true``, sends all membership events for all events, even if they have already
                                  been sent to the client. Does not
                                  apply unless ``lazy_load_members`` is ``true``. See
                                  `Lazy-loading room members <#lazy-loading-room-members>`_
                                  for more information. Defaults to ``false``.
                                type: boolean
                              lazy_load_members:
                                description: |-
                                  If ``true``, enables lazy-loading of membership events. See
                                  `Lazy-loading room members <#lazy-loading-room-members>`_
                                  for more information. Defaults to ``false``.
                                type: boolean
                              not_rooms:
                                description: A list of room IDs to exclude. If this
                                  list is absent then no rooms are excluded. A matching
                                  room will be excluded even if it is listed in the
                                  ``'rooms'`` filter.
                                items:
                                  type: string
                                type: array
                              rooms:
                                description: A list of room IDs to include. If this
                                  list is absent then all rooms are included.
                                items:
                                  type: string
                                type: array
                            title: RoomEventFilter
                            type: object
                          type: object
                        description: The events that aren't recorded in the room history,
                          e.g. typing and receipts, to include for rooms.
                        type: object
                      include_leave:
                        description: Include rooms that the user has left in the sync,
                          default false
                        type: boolean
                      not_rooms:
                        description: A list of room IDs to exclude. If this list is
                          absent then no rooms are excluded. A matching room will
                          be excluded even if it is listed in the ``'rooms'`` filter.
                          This filter is applied before the filters in ``ephemeral``,
                          ``state``, ``timeline`` or ``account_data``
                        items:
                          type: string
                        type: array
                      rooms:
                        description: A list of room IDs to include. If this list is
                          absent then all rooms are included. This filter is applied
                          before the filters in ``ephemeral``, ``state``, ``timeline``
                          or ``account_data``
                        items:
                          type: string
                        type: array
                      state:
                        allOf:
                        - allOf:
                          - properties:
                              limit:
                                description: The maximum number of events to return.
                                type: integer
                              not_senders:
                                description: A list of sender IDs to exclude. If this
                                  list is absent then no senders are excluded. A matching
                                  sender will be excluded even if it is listed in
                                  the ``'senders'`` filter.
                                items:
                                  type: string
                                type: array
                              not_types:
                                description: A list of event types to exclude. If
                                  this list is absent then no event types are excluded.
                                  A matching type will be excluded even if it is listed
                                  in the ``'types'`` filter. A '*' can be used as
                                  a wildcard to match any sequence of characters.
                                items:
                                  type: string
                                type: array
                              senders:
                                description: A list of senders IDs to include. If
                                  this list is absent then all senders are included.
                                items:
                                  type: string
                                type: array
                              types:
                                description: A list of event types to include. If
                                  this list is absent then all event types are included.
                                  A ``'*'`` can be used as a wildcard to match any
                                  sequence of characters.
                                items:
                                  type: string
                                type: array
                            title: EventFilter
                            type: object
                          - properties:
                              contains_url:
                                description: If ``true``, includes only events with
                                  a ``url`` key in their content. If ``false``, excludes
                                  those events. If omitted, ``url`` key is not considered
                                  for filtering.
                                type: boolean
                              include_redundant_members:
                                description: |-
                                  If ``true``, sends all membership events for all events, even if they have already
                                  been sent to the client. Does not
                                  apply unless ``lazy_load_members`` is ``true``. See
                                  `Lazy-loading room members <#lazy-loading-room-members>`_
                                  for more information. Defaults to ``false``.
                                type: boolean
                              lazy_load_members:
                                description: |-
                                  If ``true``, enables lazy-loading of membership events. See
                                  `Lazy-loading room members <#lazy-loading-room-members>`_
                                  for more information. Defaults to ``false``.
                                type: boolean
                              not_rooms:
                                description: A list of room IDs to exclude. If this
                                  list is absent then no rooms are excluded. A matching
                                  room will be excluded even if it is listed in the
                                  ``'rooms'`` filter.
                                items:
                                  type: string
                                type: array
                              rooms:
                                description: A list of room IDs to include. If this
                                  list is absent then all rooms are included.
                                items:
                                  type: string
                                type: array
                            title: RoomEventFilter
                            type: object
                          type: object
                        description: The state events to include for rooms.
                        title: StateFilter
                        type: object
                      timeline:
                        allOf:
                        - allOf:
                          - properties:
                              limit:
                                description: The maximum number of events to return.
                                type: integer
                              not_senders:
                                description: A list of sender IDs to exclude. If this
                                  list is absent then no senders are excluded. A matching
                                  sender will be excluded even if it is listed in
                                  the ``'senders'`` filter.
                                items:
                                  type: string
                                type: array
                              not_types:
                                description: A list of event types to exclude. If
                                  this list is absent then no event types are excluded.
                                  A matching type will be excluded even if it is listed
                                  in the ``'types'`` filter. A '*' can be used as
                                  a wildcard to match any sequence of characters.
                                items:
                                  type: string
                                type: array
                              senders:
                                description: A list of senders IDs to include. If
                                  this list is absent then all senders are included.
                                items:
                                  type: string
                                type: array
                              types:
                                description: A list of event types to include. If
                                  this list is absent then all event types are included.
                                  A ``'*'`` can be used as a wildcard to match any
                                  sequence of characters.
                                items:
                                  type: string
                                type: array
                            title: EventFilter
                            type: object
                          - properties:
                              contains_url:
                                description: If ``true``, includes only events with
                                  a ``url`` key in their content. If ``false``, excludes
                                  those events. If omitted, ``url`` key is not considered
                                  for filtering.
                                type: boolean
                              include_redundant_members:
                                description: |-
                                  If ``true``, sends all membership events for all events, even if they have already
                                  been sent to the client. Does not
                                  apply unless ``lazy_load_members`` is ``true``. See
                                  `Lazy-loading room members <#lazy-loading-room-members>`_
                                  for more information. Defaults to ``false``.
                                type: boolean
                              lazy_load_members:
                                description: |-
                                  If ``true``, enables lazy-loading of membership events. See
                                  `Lazy-loading room members <#lazy-loading-room-members>`_
                                  for more information. Defaults to ``false``.
                                type: boolean
                              not_rooms:
                                description: A list of room IDs to exclude. If this
                                  list is absent then no rooms are excluded. A matching
                                  room will be excluded even if it is listed in the
                                  ``'rooms'`` filter.
                                items:
                                  type: string
                                type: array
                              rooms:
                                description: A list of room IDs to include. If this
                                  list is absent then all rooms are included.
                                items:
                                  type: string
                                type: array
                            title: RoomEventFilter
                            type: object
                          type: object
                        description: The message and state update events to include
                          for rooms.
                        type: object
                    title: RoomFilter
                    type: object
                title: Filter
                type: object
        description: The filter to upload.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_40'
          description: The filter was created.
      security:
      - accessToken: []
      summary: Upload a new filter.
      tags:
      - Room participation
      x-codegen-request-body-name: filter
  /_matrix/client/unstable/user/{userId}/filter/{filterId}:
    get:
      operationId: getFilter
      parameters:
      - description: The user ID to download a filter for.
        example: '@alice:example.com'
        in: path
        name: userId
        required: true
        schema:
          type: string
      - description: The filter ID to download.
        example: 66696p746572
        in: path
        name: filterId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                event_fields:
                - type
                - content
                - sender
                event_format: client
                presence:
                  not_senders:
                  - '@alice:example.com'
                  types:
                  - m.presence
                room:
                  ephemeral:
                    not_rooms:
                    - '!726s6s6q:example.com'
                    not_senders:
                    - '@spam:example.com'
                    types:
                    - m.receipt
                    - m.typing
                  state:
                    not_rooms:
                    - '!726s6s6q:example.com'
                    types:
                    - m.room.*
                  timeline:
                    limit: 10
                    not_rooms:
                    - '!726s6s6q:example.com'
                    not_senders:
                    - '@spam:example.com'
                    types:
                    - m.room.message
              schema:
                $ref: '#/components/schemas/inline_response_200_41'
          description: '"The filter defintion"'
        404:
          content: {}
          description: Unknown filter.
      security:
      - accessToken: []
      summary: Download a filter
      tags:
      - Room participation
  /_matrix/client/unstable/user/{userId}/openid/request_token:
    post:
      description: |-
        Gets an OpenID token object that the requester may supply to another
        service to verify their identity in Matrix. The generated token is only
        valid for exchanging for user information from the federation API for
        OpenID.

        The access token generated is only valid for the OpenID API. It cannot
        be used to request another OpenID access token or call ``/sync``, for
        example.
      operationId: requestOpenIdToken
      parameters:
      - description: |-
          The user to request and OpenID token for. Should be the user who
          is authenticated for the request.
        example: '@alice:example.com'
        in: path
        name: userId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              example: {}
              type: object
        description: An empty object. Reserved for future expansion.
        required: true
      responses:
        200:
          content:
            application/json:
              example:
                access_token: SomeT0kenHere
                expires_in: 3600
                matrix_server_name: example.com
                token_type: Bearer
              schema:
                $ref: '#/components/schemas/inline_response_200_42'
          description: |-
            OpenID token information. This response is nearly compatible with the
            response documented in the `OpenID 1.0 Specification <http://openid.net/specs/openid-connect-core-1_0.html#TokenResponse>`_
            with the only difference being the lack of an ``id_token``. Instead,
            the Matrix homeserver's name is provided.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Get an OpenID token object to verify the requester's identity.
      tags:
      - OpenID
      x-codegen-request-body-name: body
  /_matrix/client/unstable/user/{userId}/rooms/{roomId}/account_data/{type}:
    get:
      description: |-
        Get some account_data for the client on a given room. This config is only
        visible to the user that set the account_data.
      operationId: getAccountDataPerRoom
      parameters:
      - description: |-
          The ID of the user to set account_data for. The access token must be
          authorized to make requests for this user ID.
        example: '@alice:example.com'
        in: path
        name: userId
        required: true
        schema:
          type: string
      - description: The ID of the room to get account_data for.
        example: '!726s6s6q:example.com'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      - description: |-
          The event type of the account_data to get. Custom types should be
          namespaced to avoid clashes.
        example: org.example.custom.room.config
        in: path
        name: type
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                example:
                  custom_account_data_key: custom_config_value
                type: object
          description: The account data content for the given type.
      security:
      - accessToken: []
      summary: Get some account_data for the user.
      tags:
      - User data
    put:
      description: |-
        Set some account_data for the client on a given room. This config is only
        visible to the user that set the account_data. The config will be synced to
        clients in the per-room ``account_data``.
      operationId: setAccountDataPerRoom
      parameters:
      - description: |-
          The ID of the user to set account_data for. The access token must be
          authorized to make requests for this user ID.
        example: '@alice:example.com'
        in: path
        name: userId
        required: true
        schema:
          type: string
      - description: The ID of the room to set account_data on.
        example: '!726s6s6q:example.com'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      - description: |-
          The event type of the account_data to set. Custom types should be
          namespaced to avoid clashes.
        example: org.example.custom.room.config
        in: path
        name: type
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              example:
                custom_account_data_key: custom_account_data_value
              type: object
        description: The content of the account_data
        required: true
      responses:
        200:
          content: {}
          description: The account_data was successfully added.
      security:
      - accessToken: []
      summary: Set some account_data for the user.
      tags:
      - User data
      x-codegen-request-body-name: content
  /_matrix/client/unstable/user/{userId}/rooms/{roomId}/tags:
    get:
      description: List the tags set by a user on a room.
      operationId: getRoomTags
      parameters:
      - description: |-
          The id of the user to get tags for. The access token must be
          authorized to make requests for this user ID.
        example: '@alice:example.com'
        in: path
        name: userId
        required: true
        schema:
          type: string
      - description: The ID of the room to get tags for.
        example: '!726s6s6q:example.com'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                tags:
                  m.favourite:
                    order: 0.1
                  u.Customers: {}
                  u.Work:
                    order: 0.7
              schema:
                $ref: '#/components/schemas/inline_response_200_43'
          description: The list of tags for the user for the room.
      security:
      - accessToken: []
      summary: List the tags for a room.
      tags:
      - User data
  /_matrix/client/unstable/user/{userId}/rooms/{roomId}/tags/{tag}:
    delete:
      description: Remove a tag from the room.
      operationId: deleteRoomTag
      parameters:
      - description: |-
          The id of the user to remove a tag for. The access token must be
          authorized to make requests for this user ID.
        example: '@alice:example.com'
        in: path
        name: userId
        required: true
        schema:
          type: string
      - description: The ID of the room to remove a tag from.
        example: '!726s6s6q:example.com'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      - description: The tag to remove.
        example: u.work
        in: path
        name: tag
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The tag was successfully removed.
      security:
      - accessToken: []
      summary: Remove a tag from the room.
      tags:
      - User data
    put:
      description: Add a tag to the room.
      operationId: setRoomTag
      parameters:
      - description: |-
          The id of the user to add a tag for. The access token must be
          authorized to make requests for this user ID.
        example: '@alice:example.com'
        in: path
        name: userId
        required: true
        schema:
          type: string
      - description: The ID of the room to add a tag to.
        example: '!726s6s6q:example.com'
        in: path
        name: roomId
        required: true
        schema:
          type: string
      - description: The tag to add.
        example: u.work
        in: path
        name: tag
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/inline_object_36'
        content:
          application/json:
            schema:
              example:
                order: 0.25
              properties:
                order:
                  description: |-
                    A number in a range ``[0,1]`` describing a relative
                    position of the room under the given tag.
                  format: float
                  type: number
              type: object
        description: Extra data for the tag, e.g. ordering.
        required: true
      responses:
        200:
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: The tag was successfully added.
      security:
      - accessToken: []
      summary: Add a tag to a room.
      tags:
      - User data
      x-codegen-request-body-name: body
  /_matrix/client/unstable/user_directory/search:
    post:
      description: "Performs a search for users on the homeserver. The homeserver\
        \ may\ndetermine which subset of users are searched, however the homeserver\n\
        MUST at a minimum consider the users the requesting user shares a\nroom with\
        \ and those who reside in public rooms (known to the homeserver).\nThe search\
        \ MUST consider local users to the homeserver, and SHOULD\nquery remote users\
        \ as part of the search.\n\nThe search is performed case-insensitively on\
        \ user IDs and display\nnames preferably using a collation determined based\
        \ upon the \n``Accept-Language`` header provided in the request, if present."
      operationId: searchUserDirectory
      requestBody:
        $ref: '#/components/requestBodies/inline_object_37'
        content:
          application/json:
            schema:
              properties:
                limit:
                  description: The maximum number of results to return. Defaults to
                    10.
                  example: 10
                  type: integer
                search_term:
                  description: The term to search for
                  example: foo
                  type: string
              required:
              - search_term
              type: object
        required: false
      responses:
        200:
          content:
            application/json:
              example:
                limited: false
                results:
                - avatar_url: mxc://bar.com/foo
                  display_name: Foo
                  user_id: '@foo:bar.com'
              schema:
                $ref: '#/components/schemas/inline_response_200_44'
          description: The results of the search.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Searches the user directory.
      tags:
      - User data
      x-codegen-request-body-name: body
  /_matrix/client/unstable/voip/turnServer:
    get:
      description: |-
        This API provides credentials for the client to use when initiating
        calls.
      operationId: getTurnServer
      responses:
        200:
          content:
            application/json:
              example:
                password: JlKfBy1QwLrO20385QyAtEyIv0=
                ttl: 86400
                uris:
                - turn:turn.example.com:3478?transport=udp
                - turn:10.20.30.40:3478?transport=tcp
                - turns:10.20.30.40:443?transport=tcp
                username: 1443779631:@user:example.com
              schema:
                $ref: '#/components/schemas/inline_response_200_45'
          description: The TURN server credentials.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Obtain TURN server credentials.
      tags:
      - VOIP
  /_matrix/client/versions:
    get:
      description: |-
        Gets the versions of the specification supported by the server.

        Values will take the form ``rX.Y.Z``.

        Only the latest ``Z`` value will be reported for each supported ``X.Y`` value.
        i.e. if the server implements ``r0.0.0``, ``r0.0.1``, and ``r1.2.0``, it will report ``r0.0.1`` and ``r1.2.0``.

        The server may additionally advertise experimental features it supports
        through ``unstable_features``. These features should be namespaced and
        may optionally include version information within their name if desired.
        Features listed here are not for optionally toggling parts of the Matrix
        specification and should only be used to advertise support for a feature
        which has not yet landed in the spec. For example, a feature currently
        undergoing the proposal process may appear here and eventually be taken
        off this list once the feature lands in the spec and the server deems it
        reasonable to do so. Servers may wish to keep advertising features here
        after they've been released into the spec to give clients a chance to
        upgrade appropriately. Additionally, clients should avoid using unstable
        features in their stable releases.
      operationId: getVersions
      responses:
        200:
          content:
            application/json:
              example:
                unstable_features:
                  org.example.my_feature: true
                versions:
                - r0.0.1
              schema:
                $ref: '#/components/schemas/inline_response_200_46'
          description: The versions supported by the server.
      summary: Gets the versions of the specification supported by the server.
      tags:
      - Server administration
  /_matrix/media/unstable/config:
    get:
      description: |-
        This endpoint allows clients to retrieve the configuration of the content
        repository, such as upload limitations.
        Clients SHOULD use this as a guide when using content repository endpoints.
        All values are intentionally left optional. Clients SHOULD follow
        the advice given in the field description when the field is not available.

        **NOTE:** Both clients and server administrators should be aware that proxies
        between the client and the server may affect the apparent behaviour of content
        repository APIs, for example, proxies may enforce a lower upload size limit
        than is advertised by the server on this endpoint.
      operationId: getConfig
      responses:
        200:
          content:
            application/json:
              example:
                m.upload.size: 50000000
              schema:
                $ref: '#/components/schemas/inline_response_200_47'
          description: The public content repository configuration for the matrix
            server.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Get the configuration for the content repository.
      tags:
      - Media
  /_matrix/media/unstable/download/{serverName}/{mediaId}:
    get:
      operationId: getContent
      parameters:
      - description: |
          The server name from the ``mxc://`` URI (the authoritory component)
        example: matrix.org
        in: path
        name: serverName
        required: true
        schema:
          type: string
      - description: |
          The media ID from the ``mxc://`` URI (the path component)
        example: ascERGshawAWawugaAcauga
        in: path
        name: mediaId
        required: true
        schema:
          type: string
      - description: |
          Indicates to the server that it should not attempt to fetch the media if it is deemed
          remote. This is to prevent routing loops where the server contacts itself. Defaults to
          true if not provided.
        example: false
        in: query
        name: allow_remote
        schema:
          default: true
          type: boolean
      responses:
        200:
          content:
            '*/*':
              schema:
                description: '**Required.** The bytes for the uploaded file.'
                format: binary
                type: string
          description: The content that was previously uploaded.
          headers:
            Content-Disposition:
              description: The name of the file that was previously uploaded, if set.
              schema:
                type: string
            Content-Type:
              description: The content type of the file that was previously uploaded.
              schema:
                type: string
        429:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
        502:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_403'
            application/json:
              example:
                errcode: M_TOO_LARGE
                error: Content is too large to serve
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: The content is too large for the server to serve.
      summary: Download content from the content repository.
      tags:
      - Media
  /_matrix/media/unstable/download/{serverName}/{mediaId}/{fileName}:
    get:
      operationId: getContentOverrideName
      parameters:
      - description: |
          The server name from the ``mxc://`` URI (the authoritory component)
        example: matrix.org
        in: path
        name: serverName
        required: true
        schema:
          type: string
      - description: |
          The media ID from the ``mxc://`` URI (the path component)
        example: ascERGshawAWawugaAcauga
        in: path
        name: mediaId
        required: true
        schema:
          type: string
      - description: A filename to give in the ``Content-Disposition`` header.
        example: filename.jpg
        in: path
        name: fileName
        required: true
        schema:
          type: string
      - description: |
          Indicates to the server that it should not attempt to fetch the media if it is deemed
          remote. This is to prevent routing loops where the server contacts itself. Defaults to
          true if not provided.
        example: false
        in: query
        name: allow_remote
        schema:
          default: true
          type: boolean
      responses:
        200:
          content:
            '*/*':
              schema:
                description: '**Required.** The bytes for the uploaded file.'
                format: binary
                type: string
          description: The content that was previously uploaded.
          headers:
            Content-Disposition:
              description: |-
                The ``fileName`` requested or the name of the file that was previously
                uploaded, if set.
              schema:
                type: string
            Content-Type:
              description: The content type of the file that was previously uploaded.
              schema:
                type: string
        429:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
        502:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_403'
            application/json:
              example:
                errcode: M_TOO_LARGE
                error: Content is too large to serve
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: The content is too large for the server to serve.
      summary: |-
        Download content from the content repository. This is the same as
        the download endpoint above, except permitting a desired file name.
      tags:
      - Media
  /_matrix/media/unstable/preview_url:
    get:
      operationId: getUrlPreview
      parameters:
      - description: The URL to get a preview of.
        example: https://matrix.org
        in: query
        name: url
        required: true
        schema:
          type: string
      - description: |-
          The preferred point in time to return a preview for. The server may
          return a newer version if it does not have the requested version
          available.
        example: 1510610716656
        in: query
        name: ts
        schema:
          format: int64
          type: integer
      responses:
        200:
          content:
            application/json:
              example:
                matrix:image:size: 102400
                og:description: This is a really cool blog post from matrix.org
                og:image: mxc://example.com/ascERGshawAWawugaAcauga
                og:image:height: 48
                og:image:type: image/png
                og:image:width: 48
                og:title: Matrix Blog Post
              schema:
                $ref: '#/components/schemas/inline_response_200_48'
          description: |-
            The OpenGraph data for the URL, which may be empty. Some values are
            replaced with matrix equivalents if they are provided in the response.
            The differences from the OpenGraph protocol are described here.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Get information about a URL for a client
      tags:
      - Media
  /_matrix/media/unstable/thumbnail/{serverName}/{mediaId}:
    get:
      operationId: getContentThumbnail
      parameters:
      - description: |
          The server name from the ``mxc://`` URI (the authoritory component)
        example: example.org
        in: path
        name: serverName
        required: true
        schema:
          type: string
      - description: |
          The media ID from the ``mxc://`` URI (the path component)
        example: ascERGshawAWawugaAcauga
        in: path
        name: mediaId
        required: true
        schema:
          type: string
      - description: |-
          The *desired* width of the thumbnail. The actual thumbnail may be
          larger than the size specified.
        example: 64
        in: query
        name: width
        required: true
        schema:
          type: integer
      - description: |-
          The *desired* height of the thumbnail. The actual thumbnail may be
          larger than the size specified.
        example: 64
        in: query
        name: height
        required: true
        schema:
          type: integer
      - description: |-
          The desired resizing method. See the `thumbnailing <#thumbnails>`_
          section for more information.
        example: scale
        in: query
        name: method
        schema:
          enum:
          - crop
          - scale
          type: string
      - description: |
          Indicates to the server that it should not attempt to fetch the media if it is deemed
          remote. This is to prevent routing loops where the server contacts itself. Defaults to
          true if not provided.
        example: false
        in: query
        name: allow_remote
        schema:
          default: true
          type: boolean
      responses:
        200:
          content:
            image/jpeg:
              schema:
                description: '**Required.** The bytes for the thumbnail.'
                format: binary
                type: string
            image/png:
              schema:
                description: '**Required.** The bytes for the thumbnail.'
                format: binary
                type: string
          description: A thumbnail of the requested content.
          headers:
            Content-Type:
              description: The content type of the thumbnail.
              schema:
                enum:
                - image/jpeg
                - image/png
                type: string
        400:
          content:
            image/jpeg:
              schema:
                $ref: '#/components/schemas/inline_response_403'
            image/png:
              schema:
                $ref: '#/components/schemas/inline_response_403'
            application/json:
              example:
                errcode: M_UNKNOWN
                error: Cannot generate thumbnails for the requested content
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: |-
            The request does not make sense to the server, or the server cannot thumbnail
            the content. For example, the client requested non-integer dimensions or asked
            for negatively-sized images.
        413:
          content:
            image/jpeg:
              schema:
                $ref: '#/components/schemas/inline_response_403'
            image/png:
              schema:
                $ref: '#/components/schemas/inline_response_403'
            application/json:
              example:
                errcode: M_TOO_LARGE
                error: Content is too large to thumbnail
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: The local content is too large for the server to thumbnail.
        429:
          content:
            image/jpeg:
              schema:
                $ref: '#/components/schemas/inline_response_429'
            image/png:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
        502:
          content:
            image/jpeg:
              schema:
                $ref: '#/components/schemas/inline_response_403'
            image/png:
              schema:
                $ref: '#/components/schemas/inline_response_403'
            application/json:
              example:
                errcode: M_TOO_LARGE
                error: Content is too large to thumbnail
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: The remote content is too large for the server to thumbnail.
      summary: |-
        Download a thumbnail of content from the content repository. See the `thumbnailing <#thumbnails>`_
        section for more information.
      tags:
      - Media
  /_matrix/media/unstable/upload:
    post:
      operationId: uploadContent
      parameters:
      - description: The content type of the file being uploaded
        example: 'Content-Type: application/pdf'
        in: header
        name: Content-Type
        schema:
          type: string
      - description: The name of the file being uploaded
        example: War and Peace.pdf
        in: query
        name: filename
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              example: <bytes>
              format: byte
              type: string
        description: The content to be uploaded.
        required: true
      responses:
        200:
          content:
            application/json:
              example:
                content_uri: mxc://example.com/AQwafuaFswefuhsfAFAgsw
              schema:
                $ref: '#/components/schemas/inline_response_200_49'
          description: The `MXC URI`_ for the uploaded content.
        403:
          content:
            application/json:
              example:
                errcode: M_FORBIDDEN
                error: Cannot upload this content
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: |-
            The user does not have permission to upload the content. Some reasons for this error include:

            - The server does not permit the file type.
            - The user has reached a quota for uploaded content.
        413:
          content:
            application/json:
              example:
                errcode: M_TOO_LARGE
                error: Cannot upload files larger than 100mb
              schema:
                $ref: '#/components/schemas/inline_response_403'
          description: The uploaded content is too large for the server.
        429:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
          description: This request was rate-limited.
      security:
      - accessToken: []
      summary: Upload some content to the content repository.
      tags:
      - Media
      x-codegen-request-body-name: <content>
components:
  requestBodies:
    inline_object_30:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_30'
      required: false
    inline_object_10:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_10'
      required: false
    inline_object_32:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_32'
      required: true
    inline_object_31:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_31'
      required: false
    inline_object_12:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_12'
      required: false
    inline_object_34:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_34'
      required: true
    inline_object_11:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_11'
      required: false
    inline_object_33:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_33'
      required: true
    inline_object_14:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_14'
      required: false
    body:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/body'
      required: true
    inline_object_36:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_36'
      required: true
    inline_object_13:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_13'
      required: false
    inline_object_35:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_35'
      required: false
    inline_object_16:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_16'
      required: true
    inline_object_15:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_15'
      required: true
    inline_object_37:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_37'
      required: false
    inline_object_29:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_29'
      required: true
    inline_object_28:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_28'
      required: true
    inline_object_1:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_1'
      required: false
    inline_object_9:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_9'
      required: true
    inline_object_21:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_21'
      required: true
    inline_object_8:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_8'
      required: true
    inline_object_20:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_20'
      required: true
    inline_object_7:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_7'
      required: false
    inline_object_23:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_23'
      required: false
    inline_object_6:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_6'
      required: true
    inline_object_22:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_22'
      required: true
    inline_object_5:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_5'
      required: false
    inline_object_25:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_25'
      required: true
    inline_object_4:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_4'
      required: false
    inline_object_24:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_24'
      required: true
    inline_object_3:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_3'
      required: false
    inline_object_27:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_27'
      required: false
    inline_object_2:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_2'
      required: false
    inline_object_26:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_26'
      required: true
    inline_object_18:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_18'
      required: true
    inline_object_17:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_17'
      required: true
    inline_object_19:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_19'
      required: true
    inline_object:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object'
      required: false
  schemas:
    inline_response_200_33:
      description: The events and state surrounding the requested event.
      example:
        events_before:
        - '{}'
        - '{}'
        start: start
        end: end
        state:
        - '{}'
        - '{}'
        event: '{}'
        events_after:
        - '{}'
        - '{}'
      properties:
        end:
          description: A token that can be used to paginate forwards with.
          type: string
        event:
          allOf:
          - description: Room Events have the following fields.
            properties:
              room_id:
                description: |-
                  The ID of the room associated with this event. Will not be present on events
                  that arrive through ``/sync``, despite being required everywhere else.
                type: string
            required:
            - room_id
            title: Room Event
            type: object
          description: Details of the requested event.
          type: object
        events_after:
          description: |-
            A list of room events that happened just after the
            requested event, in chronological order.
          items:
            allOf:
            - description: Room Events have the following fields.
              properties:
                room_id:
                  description: |-
                    The ID of the room associated with this event. Will not be present on events
                    that arrive through ``/sync``, despite being required everywhere else.
                  type: string
              required:
              - room_id
              title: Room Event
              type: object
            type: object
          type: array
        events_before:
          description: |-
            A list of room events that happened just before the
            requested event, in reverse-chronological order.
          items:
            allOf:
            - description: Room Events have the following fields.
              properties:
                room_id:
                  description: |-
                    The ID of the room associated with this event. Will not be present on events
                    that arrive through ``/sync``, despite being required everywhere else.
                  type: string
              required:
              - room_id
              title: Room Event
              type: object
            type: object
          type: array
        start:
          description: A token that can be used to paginate backwards with.
          type: string
        state:
          description: The state of the room at the last event returned.
          items:
            allOf:
            - allOf:
              - description: Room Events have the following fields.
                properties:
                  room_id:
                    description: |-
                      The ID of the room associated with this event. Will not be present on events
                      that arrive through ``/sync``, despite being required everywhere else.
                    type: string
                required:
                - room_id
                title: Room Event
                type: object
              - description: In addition to the Room Event fields, State Events have
                  the following additional fields.
                properties:
                  prev_content:
                    description: Optional. The previous ``content`` for this event.
                      If there is no previous content, this key will be missing.
                    properties: {}
                    title: EventContent
                    type: object
                  state_key:
                    description: |-
                      A unique key which defines the overwriting semantics for this piece of room state. This value is often a zero-length string. The presence of this key makes this event a State Event.
                      State keys starting with an ``@`` are reserved for referencing user IDs, such as room members. With the exception of a few events, state events set with a given user's ID as the state key MUST only be set by that user.
                    type: string
                required:
                - state_key
                title: State Event
                type: object
              description: State Events have the following fields.
              title: State Event
              type: object
            type: object
          type: array
    inline_response_200_32:
      example:
        available: true
      properties:
        available:
          description: |-
            A flag to indicate that the username is available. This should always
            be ``true`` when the server replies with 200 OK.
          type: boolean
    inline_response_200_35:
      example:
        chunk:
        - '{}'
        - '{}'
      properties:
        chunk:
          items:
            allOf:
            - description: |-
                Adjusts the membership state for a user in a room. It is preferable to use the membership APIs (``/rooms/<room id>/invite`` etc) when performing membership actions rather than adjusting the state directly as there are a restricted set of valid transformations. For example, user A cannot force user B to join a room, and trying to force this state change directly will fail.

                The following membership states are specified:

                - ``invite`` - The user has been invited to join a room, but has not yet joined it. They may not participate in the room until they join.

                - ``join`` - The user has joined the room (possibly after accepting an invite), and may participate in it.

                - ``leave`` - The user was once joined to the room, but has since left (possibly by choice, or possibly by being kicked).

                - ``ban`` - The user has been banned from the room, and is no longer allowed to join it until they are un-banned from the room (by having their membership state set to a value other than ``ban``).

                - ``knock`` - This is a reserved word, which currently has no meaning.

                The ``third_party_invite`` property will be set if this invite is an ``invite`` event and is the successor of an ``m.room.third_party_invite`` event, and absent otherwise.

                This event may also include an ``invite_room_state`` key inside the event's ``unsigned`` data.
                If present, this contains an array of ``StrippedState`` Events. These events provide information
                on a subset of state events such as the room name.

                The user for which a membership applies is represented by the ``state_key``. Under some conditions,
                the ``sender`` and ``state_key`` may not match - this may be interpreted as the ``sender`` affecting
                the membership state of the ``state_key`` user.

                The ``membership`` for a given user can change over time. The table below represents the various changes
                over time and how clients and servers must interpret those changes. Previous membership can be retrieved
                from the ``prev_content`` object on an event. If not present, the user's previous membership must be assumed
                as ``leave``.

                .. TODO: Improve how this table is written? We use a csv-table to get around vertical header restrictions.

                .. csv-table::
                  :header-rows: 1
                  :stub-columns: 1

                  "","to ``invite``","to ``join``","to ``leave``","to ``ban``","to ``knock``"
                  "from ``invite``","No change.","User joined the room.","If the ``state_key`` is the same as the ``sender``, the user rejected the invite. Otherwise, the ``state_key`` user had their invite revoked.","User was banned.","Not implemented."
                  "from ``join``","Must never happen.","``displayname`` or ``avatar_url`` changed.","If the ``state_key`` is the same as the ``sender``, the user left. Otherwise, the ``state_key`` user was kicked.","User was kicked and banned.","Not implemented."
                  "from ``leave``","New invitation sent.","User joined.","No change.","User was banned.","Not implemented."
                  "from ``ban``","Must never happen.","Must never happen.","User was unbanned.","No change.","Not implemented."
                  "from ``knock``","Not implemented.","Not implemented.","Not implemented.","Not implemented.","Not implemented."
              properties:
                content:
                  properties:
                    avatar_url:
                      description: The avatar URL for this user, if any. This is added
                        by the homeserver.
                      type: string
                    is_direct:
                      description: Flag indicating if the room containing this event
                        was created with the intention of being a direct chat. See
                        `Direct Messaging`_.
                      type: boolean
                    membership:
                      description: The membership state of the user.
                      enum:
                      - invite
                      - join
                      - knock
                      - leave
                      - ban
                      type: string
                    third_party_invite:
                      properties:
                        display_name:
                          description: A name which can be displayed to represent
                            the user instead of their third party identifier
                          type: string
                        signed:
                          description: A block of content which has been signed, which
                            servers can use to verify the event. Clients should ignore
                            this.
                          properties:
                            mxid:
                              description: The invited matrix user ID. Must be equal
                                to the user_id property of the event.
                              type: string
                            signatures:
                              description: A single signature from the verifying server,
                                in the format specified by the Signing Events section
                                of the server-server API.
                              properties: {}
                              title: Signatures
                              type: object
                            token:
                              description: The token property of the containing third_party_invite
                                object.
                              type: string
                          required:
                          - mxid
                          - signatures
                          - token
                          title: signed
                          type: object
                      required:
                      - display_name
                      - signed
                      title: Invite
                      type: object
                    unsigned:
                      description: Contains optional extra information about the event.
                      properties:
                        invite_room_state:
                          description: A subset of the state of the room at the time
                            of the invite, if ``membership`` is ``invite``. Note that
                            this state is informational, and SHOULD NOT be trusted;
                            once the client has joined the room, it SHOULD fetch the
                            live state from the server and discard the invite_room_state.
                            Also, clients must not rely on any particular state being
                            present here; they SHOULD behave properly (with possibly
                            a degraded but not a broken experience) in the absence
                            of any particular events here. If they are set on the
                            room, at least the state for ``m.room.avatar``, ``m.room.canonical_alias``,
                            ``m.room.join_rules``, and ``m.room.name`` SHOULD be included.
                          items:
                            description: |-
                              A stripped down state event, with only the ``type``, ``state_key``,
                              ``sender``, and ``content`` keys.
                            properties:
                              content:
                                description: The ``content`` for the event.
                                properties: {}
                                title: EventContent
                                type: object
                              sender:
                                description: The ``sender`` for the event.
                                type: string
                              state_key:
                                description: The ``state_key`` for the event.
                                type: string
                              type:
                                description: The ``type`` for the event.
                                type: string
                            required:
                            - content
                            - sender
                            - state_key
                            - type
                            title: StrippedState
                            type: object
                          type: array
                      title: UnsignedData
                      type: object
                  required:
                  - membership
                  title: EventContent
                  type: object
                state_key:
                  description: |-
                    The ``user_id`` this membership event relates to. In all cases except for when ``membership`` is
                    ``join``, the user ID sending the event does not need to match the user ID in the ``state_key``,
                    unlike other events. Regular authorisation rules still apply.
                  type: string
                type:
                  enum:
                  - m.room.member
                  type: string
              title: The current membership state of a user in the room.
              type: object
            title: MemberEvent
            type: object
          type: array
    inline_response_200_34:
      example:
        joined:
          key:
            avatar_url: avatar_url
            display_name: display_name
      properties:
        joined:
          additionalProperties:
            $ref: '#/components/schemas/RoomMember'
          description: A map from user ID to a RoomMember object.
          type: object
    inline_response_200_31:
      example:
        access_token: access_token
        device_id: device_id
        user_id: user_id
        home_server: home_server
      properties:
        access_token:
          description: |-
            An access token for the account.
            This access token can then be used to authorize other requests.
            Required if the ``inhibit_login`` option is false.
          type: string
        device_id:
          description: |-
            ID of the registered device. Will be the same as the
            corresponding parameter in the request, if one was specified.
            Required if the ``inhibit_login`` option is false.
          type: string
        home_server:
          description: |-
            The server_name of the homeserver on which the account has
            been registered.

            **Deprecated**. Clients should extract the server_name from
            ``user_id`` (by splitting at the first colon) if they require
            it. Note also that ``homeserver`` is not spelt this way.
          type: string
        user_id:
          description: |-
            The fully-qualified Matrix user ID (MXID) that has been registered.

            Any user ID returned by this API must conform to the grammar given in the
            `Matrix specification <../appendices.html#user-identifiers>`_.
          type: string
      required:
      - user_id
    inline_response_200_30:
      description: The push rule.
      example:
        rule_id: rule_id
        default: true
        pattern: pattern
        conditions:
        - '{}'
        - '{}'
        actions:
        - actions
        - actions
        enabled: true
      properties:
        actions:
          description: The actions to perform when this rule is matched.
          items:
            description: //TODO automatically added by openapi-generator due to undefined
              type
            type: string
          type: array
        conditions:
          description: |-
            The conditions that must hold true for an event in order for a rule to be
            applied to an event. A rule with no conditions always matches. Only
            applicable to ``underride`` and ``override`` rules.
          items:
            allOf:
            - properties:
                is:
                  description: |-
                    Required for ``room_member_count`` conditions. A decimal integer
                    optionally prefixed by one of, ==, <, >, >= or <=. A prefix of < matches
                    rooms where the member count is strictly less than the given number and
                    so forth. If no prefix is present, this parameter defaults to ==.
                  type: string
                key:
                  description: |-
                    Required for ``event_match`` conditions. The dot-separated field of the
                    event to match.

                    Required for ``sender_notification_permission`` conditions. The field in
                    the power level event the user needs a minimum power level for. Fields
                    must be specified under the ``notifications`` property in the power level
                    event's ``content``.
                  type: string
                  x-example: content.body
                kind:
                  description: |-
                    The kind of condition to apply. See `conditions <#conditions>`_ for
                    more information on the allowed kinds and how they work.
                  type: string
                pattern:
                  description: |-
                    Required for ``event_match`` conditions. The glob-style pattern to
                    match against. Patterns with no special glob characters should be
                    treated as having asterisks prepended and appended when testing the
                    condition.
                  type: string
              required:
              - kind
              title: PushCondition
              type: object
            type: object
          type: array
        default:
          description: Whether this is a default rule, or has been set explicitly.
          type: boolean
        enabled:
          description: Whether the push rule is enabled or not.
          type: boolean
        pattern:
          description: |-
            The glob-style pattern to match against.  Only applicable to ``content``
            rules.
          type: string
        rule_id:
          description: The ID of this rule.
          type: string
      required:
      - actions
      - default
      - enabled
      - rule_id
    inline_response_200_37:
      example:
        event_id: event_id
      properties:
        event_id:
          description: A unique identifier for the event.
          type: string
    Invite3pid:
      properties:
        address:
          description: The invitee's third party identifier.
          type: string
        id_server:
          description: The hostname+port of the identity server which should be used
            for third party identifier lookups.
          type: string
        medium:
          description: The kind of address being passed in the address field, for
            example ``email``.
          type: string
      required:
      - address
      - id_server
      - medium
    inline_response_200_36:
      description: A list of messages with a new token to request more.
      example:
        start: start
        chunk:
        - room_id: room_id
        - room_id: room_id
        end: end
        state:
        - '{}'
        - '{}'
      properties:
        chunk:
          description: |-
            A list of room events. The order depends on the ``dir`` parameter.
            For ``dir=b`` events will be in reverse-chronological order,
            for ``dir=f`` in chronological order, so that events start
            at the ``from`` point.
          items:
            $ref: '#/components/schemas/RoomEvent'
          type: array
        end:
          description: |-
            The token the pagination ends at. If ``dir=b`` this token should
            be used again to request even earlier events.
          type: string
        start:
          description: |-
            The token the pagination starts from. If ``dir=b`` this will be
            the token supplied in ``from``.
          type: string
        state:
          description: |-
            A list of state events relevant to showing the ``chunk``. For example, if
            ``lazy_load_members`` is enabled in the filter then this may contain
            the membership events for the senders of events in the ``chunk``.

            Unless ``include_redundant_members`` is ``true``, the server
            may remove membership events which would have already been
            sent to the client in prior calls to this endpoint, assuming
            the membership of those members has not changed.
          items:
            allOf:
            - description: Room Events have the following fields.
              properties:
                room_id:
                  description: |-
                    The ID of the room associated with this event. Will not be present on events
                    that arrive through ``/sync``, despite being required everywhere else.
                  type: string
              required:
              - room_id
              title: Room Event
              type: object
            - description: In addition to the Room Event fields, State Events have
                the following additional fields.
              properties:
                prev_content:
                  description: Optional. The previous ``content`` for this event.
                    If there is no previous content, this key will be missing.
                  properties: {}
                  title: EventContent
                  type: object
                state_key:
                  description: |-
                    A unique key which defines the overwriting semantics for this piece of room state. This value is often a zero-length string. The presence of this key makes this event a State Event.
                    State keys starting with an ``@`` are reserved for referencing user IDs, such as room members. With the exception of a few events, state events set with a given user's ID as the state key MUST only be set by that user.
                  type: string
              required:
              - state_key
              title: State Event
              type: object
            description: State Events have the following fields.
            title: RoomStateEvent
            type: object
          type: array
    inline_response_200_39:
      example:
        rooms:
          leave:
            key:
              timeline: '{}'
              account_data: '{}'
              state: '{}'
          invite:
            key:
              invite_state:
                events:
                - state_key: state_key
                  sender: sender
                  type: type
                  content: '{}'
                - state_key: state_key
                  sender: sender
                  type: type
                  content: '{}'
          join:
            key:
              summary:
                m.invited_member_count: 6
                m.heroes:
                - m.heroes
                - m.heroes
                m.joined_member_count: 1
              ephemeral: '{}'
              timeline: '{}'
              account_data: '{}'
              state: '{}'
              unread_notifications:
                highlight_count: 5
                notification_count: 5
        next_batch: next_batch
        to_device: '{}'
        device_lists: '{}'
        account_data: '{}'
        presence: '{}'
        device_one_time_keys_count:
          key: 0
      properties:
        account_data:
          allOf:
          - properties:
              events:
                description: List of events.
                items:
                  allOf:
                  - description: The basic set of fields all events must have.
                    properties:
                      content:
                        description: The fields in this object will vary depending
                          on the type of event. When interacting with the REST API,
                          this is the HTTP body.
                        properties: {}
                        type: object
                      type:
                        description: The type of event. This SHOULD be namespaced
                          similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
                        type: string
                    required:
                    - content
                    - type
                    title: Event
                    type: object
                  type: object
                type: array
            type: object
          description: The global private data created by this user.
          title: Account Data
          type: object
        device_lists:
          description: |-
            Information on end-to-end device updates, as specified in
            |device_lists_sync|_.
          properties: {}
          title: DeviceLists
          type: object
        device_one_time_keys_count:
          additionalProperties:
            type: integer
          description: |-
            Information on end-to-end encryption keys, as specified
            in |device_lists_sync|_.
          title: One-time keys count
          type: object
        next_batch:
          description: |-
            The batch token to supply in the ``since`` param of the next
            ``/sync`` request.
          type: string
        presence:
          allOf:
          - properties:
              events:
                description: List of events.
                items:
                  allOf:
                  - description: The basic set of fields all events must have.
                    properties:
                      content:
                        description: The fields in this object will vary depending
                          on the type of event. When interacting with the REST API,
                          this is the HTTP body.
                        properties: {}
                        type: object
                      type:
                        description: The type of event. This SHOULD be namespaced
                          similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
                        type: string
                    required:
                    - content
                    - type
                    title: Event
                    type: object
                  type: object
                type: array
            type: object
          description: The updates to the presence status of other users.
          title: Presence
          type: object
        rooms:
          $ref: '#/components/schemas/Rooms'
        to_device:
          description: |-
            Information on the send-to-device messages for the client
            device, as defined in |send_to_device_sync|_.
          properties: {}
          title: ToDevice
          type: object
      required:
      - next_batch
    inline_response_200_38:
      example:
        replacement_room: replacement_room
      properties:
        replacement_room:
          description: The ID of the new room.
          type: string
      required:
      - replacement_room
    RoomSummary:
      description: |-
        Information about the room which clients may need to
        correctly render it to users.
      example:
        m.invited_member_count: 6
        m.heroes:
        - m.heroes
        - m.heroes
        m.joined_member_count: 1
      properties:
        m.heroes:
          description: |-
            The users which can be used to generate a room name
            if the room does not have one. Required if the room's
            ``m.room.name`` or ``m.room.canonical_alias`` state events
            are unset or empty.

            This should be the first 5 members of the room, ordered
            by stream ordering, which are joined or invited. The
            list must never include the client's own user ID. When
            no joined or invited members are available, this should
            consist of the banned and left users. More than 5 members
            may be provided, however less than 5 should only be provided
            when there are less than 5 members to represent.

            When lazy-loading room members is enabled, the membership
            events for the heroes MUST be included in the ``state``,
            unless they are redundant. When the list of users changes,
            the server notifies the client by sending a fresh list of
            heroes. If there are no changes since the last sync, this
            field may be omitted.
          items:
            type: string
          type: array
        m.invited_member_count:
          description: |-
            The number of users with ``membership`` of ``invite``.
            If this field has not changed since the last sync, it
            may be omitted. Required otherwise.
          type: integer
        m.joined_member_count:
          description: |-
            The number of users with ``membership`` of ``join``,
            including the client's own user ID. If this field has
            not changed since the last sync, it may be omitted.
            Required otherwise.
          type: integer
    Third Party Signed:
      description: |-
        A signature of an ``m.third_party_invite`` token to prove that this user
        owns a third party identity which has been invited to the room.
      properties:
        mxid:
          description: The Matrix ID of the invitee.
          example: '@bob:example.org'
          type: string
        sender:
          description: The Matrix ID of the user who issued the invite.
          example: '@alice:example.org'
          type: string
        signatures:
          description: A signatures object containing a signature of the entire signed
            object.
          example:
            example.org:
              ed25519:0: some9signature
          properties: {}
          title: Signatures
          type: object
        token:
          description: The state key of the m.third_party_invite event.
          example: random8nonce
          type: string
      required:
      - mxid
      - sender
      - signatures
      - token
    RoomInfo_1:
      example:
        room_id: room_id
        visibility: private
        messages:
          start: start
          chunk:
          - '{}'
          - '{}'
          end: end
        account_data:
        - '{}'
        - '{}'
        membership: invite
        state:
        - '{}'
        - '{}'
      properties:
        account_data:
          description: The private data that this user has attached to this room.
          items:
            allOf:
            - description: The basic set of fields all events must have.
              properties:
                content:
                  description: The fields in this object will vary depending on the
                    type of event. When interacting with the REST API, this is the
                    HTTP body.
                  properties: {}
                  type: object
                type:
                  description: The type of event. This SHOULD be namespaced similar
                    to Java package naming conventions e.g. 'com.example.subdomain.event.type'
                  type: string
              required:
              - content
              - type
              title: Event
              type: object
            title: Event
            type: object
          type: array
        membership:
          description: The user's membership state in this room.
          enum:
          - invite
          - join
          - leave
          - ban
          type: string
        messages:
          $ref: '#/components/schemas/PaginationChunk'
        room_id:
          description: The ID of this room.
          type: string
        state:
          description: |-
            If the user is a member of the room this will be the
            current state of the room as a list of events. If the
            user has left the room this will be the state of the
            room when they left it.
          items:
            allOf:
            - allOf:
              - description: Room Events have the following fields.
                properties:
                  room_id:
                    description: |-
                      The ID of the room associated with this event. Will not be present on events
                      that arrive through ``/sync``, despite being required everywhere else.
                    type: string
                required:
                - room_id
                title: Room Event
                type: object
              - description: In addition to the Room Event fields, State Events have
                  the following additional fields.
                properties:
                  prev_content:
                    description: Optional. The previous ``content`` for this event.
                      If there is no previous content, this key will be missing.
                    properties: {}
                    title: EventContent
                    type: object
                  state_key:
                    description: |-
                      A unique key which defines the overwriting semantics for this piece of room state. This value is often a zero-length string. The presence of this key makes this event a State Event.
                      State keys starting with an ``@`` are reserved for referencing user IDs, such as room members. With the exception of a few events, state events set with a given user's ID as the state key MUST only be set by that user.
                    type: string
                required:
                - state_key
                title: State Event
                type: object
              description: State Events have the following fields.
              title: State Event
              type: object
            title: StateEvent
            type: object
          type: array
        visibility:
          description: |-
            Whether this room is visible to the ``/publicRooms`` API
            or not."
          enum:
          - private
          - public
          type: string
      required:
      - room_id
    Result Room Events:
      description: Mapping of category name to search criteria.
      example:
        highlights:
        - highlights
        - highlights
        next_batch: next_batch
        count: 0
        groups:
          key:
            key: '{}'
        state:
          key:
          - '{}'
          - '{}'
        results:
        - result:
            room_id: room_id
          context:
            events_before:
            - room_id: room_id
            - room_id: room_id
            start: start
            end: end
            profile_info:
              key:
                avatar_url: avatar_url
                displayname: displayname
            events_after:
            - room_id: room_id
            - room_id: room_id
          rank: 6.027456183070403
        - result:
            room_id: room_id
          context:
            events_before:
            - room_id: room_id
            - room_id: room_id
            start: start
            end: end
            profile_info:
              key:
                avatar_url: avatar_url
                displayname: displayname
            events_after:
            - room_id: room_id
            - room_id: room_id
          rank: 6.027456183070403
      properties:
        count:
          description: An approximate count of the total number of results found.
          type: integer
        groups:
          additionalProperties:
            additionalProperties:
              description: The results for a particular group value.
              properties:
                next_batch:
                  description: |-
                    Token that can be used to get the next batch
                    of results in the group, by passing as the
                    `next_batch` parameter to the next call. If
                    this field is absent, there are no more
                    results in this group.
                  title: Next Batch in Group
                  type: string
                order:
                  description: |-
                    Key that can be used to order different
                    groups.
                  title: Group Order
                  type: integer
                results:
                  description: Which results are in this group.
                  items:
                    title: Result Event ID
                    type: string
                  type: array
              title: Group Value
              type: object
            description: The results for a given group.
            title: Group Key
            type: object
          description: |-
            Any groups that were requested.

            The outer ``string`` key is the group key requested (eg: ``room_id``
            or ``sender``). The inner ``string`` key is the grouped value (eg:
            a room's ID or a user's ID).
          title: Groups
          type: object
        highlights:
          description: List of words which should be highlighted, useful for stemming
            which may change the query terms.
          items:
            type: string
          title: Highlights
          type: array
        next_batch:
          description: |-
            Token that can be used to get the next batch of
            results, by passing as the `next_batch` parameter to
            the next call. If this field is absent, there are no
            more results.
          title: Next Batch
          type: string
        results:
          description: List of results in the requested order.
          items:
            $ref: '#/components/schemas/Result'
          title: Results
          type: array
        state:
          additionalProperties:
            items:
              allOf:
              - description: Room Events have the following fields.
                properties:
                  room_id:
                    description: |-
                      The ID of the room associated with this event. Will not be present on events
                      that arrive through ``/sync``, despite being required everywhere else.
                    type: string
                required:
                - room_id
                title: Room Event
                type: object
              - description: In addition to the Room Event fields, State Events have
                  the following additional fields.
                properties:
                  prev_content:
                    description: Optional. The previous ``content`` for this event.
                      If there is no previous content, this key will be missing.
                    properties: {}
                    title: EventContent
                    type: object
                  state_key:
                    description: |-
                      A unique key which defines the overwriting semantics for this piece of room state. This value is often a zero-length string. The presence of this key makes this event a State Event.
                      State keys starting with an ``@`` are reserved for referencing user IDs, such as room members. With the exception of a few events, state events set with a given user's ID as the state key MUST only be set by that user.
                    type: string
                required:
                - state_key
                title: State Event
                type: object
              description: State Events have the following fields.
              title: State Event
              type: object
            title: Room State
            type: array
          description: |-
            The current state for every room in the results.
            This is included if the request had the
            ``include_state`` key set with a value of ``true``.

            The ``string`` key is the room ID for which the ``State
            Event`` array belongs to.
          title: Current state
          type: object
    DeviceInfo:
      example:
        sessions:
        - connections:
          - last_seen: 0
            ip: ip
            user_agent: user_agent
          - last_seen: 0
            ip: ip
            user_agent: user_agent
        - connections:
          - last_seen: 0
            ip: ip
            user_agent: user_agent
          - last_seen: 0
            ip: ip
            user_agent: user_agent
      properties:
        sessions:
          description: A user's sessions (i.e. what they did with an access token
            from one login).
          items:
            $ref: '#/components/schemas/SessionInfo'
          type: array
    PusherData:
      description: |-
        A dictionary of information for the pusher implementation
        itself.
      example:
        format: format
        url: url
      properties:
        format:
          description: |-
            The format to use when sending notifications to the Push
            Gateway.
          type: string
        url:
          description: |-
            Required if ``kind`` is ``http``. The URL to use to send
            notifications to.
          type: string
    RoomFilter:
      description: Filters to be applied to room data.
      example:
        rooms:
        - rooms
        - rooms
        ephemeral: '{}'
        timeline: '{}'
        account_data: '{}'
        state: '{}'
        include_leave: true
        not_rooms:
        - not_rooms
        - not_rooms
      properties:
        account_data:
          allOf:
          - allOf:
            - properties:
                limit:
                  description: The maximum number of events to return.
                  type: integer
                not_senders:
                  description: A list of sender IDs to exclude. If this list is absent
                    then no senders are excluded. A matching sender will be excluded
                    even if it is listed in the ``'senders'`` filter.
                  items:
                    type: string
                  type: array
                not_types:
                  description: A list of event types to exclude. If this list is absent
                    then no event types are excluded. A matching type will be excluded
                    even if it is listed in the ``'types'`` filter. A '*' can be used
                    as a wildcard to match any sequence of characters.
                  items:
                    type: string
                  type: array
                senders:
                  description: A list of senders IDs to include. If this list is absent
                    then all senders are included.
                  items:
                    type: string
                  type: array
                types:
                  description: A list of event types to include. If this list is absent
                    then all event types are included. A ``'*'`` can be used as a
                    wildcard to match any sequence of characters.
                  items:
                    type: string
                  type: array
              title: EventFilter
              type: object
            - properties:
                contains_url:
                  description: If ``true``, includes only events with a ``url`` key
                    in their content. If ``false``, excludes those events. If omitted,
                    ``url`` key is not considered for filtering.
                  type: boolean
                include_redundant_members:
                  description: |-
                    If ``true``, sends all membership events for all events, even if they have already
                    been sent to the client. Does not
                    apply unless ``lazy_load_members`` is ``true``. See
                    `Lazy-loading room members <#lazy-loading-room-members>`_
                    for more information. Defaults to ``false``.
                  type: boolean
                lazy_load_members:
                  description: |-
                    If ``true``, enables lazy-loading of membership events. See
                    `Lazy-loading room members <#lazy-loading-room-members>`_
                    for more information. Defaults to ``false``.
                  type: boolean
                not_rooms:
                  description: A list of room IDs to exclude. If this list is absent
                    then no rooms are excluded. A matching room will be excluded even
                    if it is listed in the ``'rooms'`` filter.
                  items:
                    type: string
                  type: array
                rooms:
                  description: A list of room IDs to include. If this list is absent
                    then all rooms are included.
                  items:
                    type: string
                  type: array
              title: RoomEventFilter
              type: object
            type: object
          description: The per user account data to include for rooms.
          type: object
        ephemeral:
          allOf:
          - allOf:
            - properties:
                limit:
                  description: The maximum number of events to return.
                  type: integer
                not_senders:
                  description: A list of sender IDs to exclude. If this list is absent
                    then no senders are excluded. A matching sender will be excluded
                    even if it is listed in the ``'senders'`` filter.
                  items:
                    type: string
                  type: array
                not_types:
                  description: A list of event types to exclude. If this list is absent
                    then no event types are excluded. A matching type will be excluded
                    even if it is listed in the ``'types'`` filter. A '*' can be used
                    as a wildcard to match any sequence of characters.
                  items:
                    type: string
                  type: array
                senders:
                  description: A list of senders IDs to include. If this list is absent
                    then all senders are included.
                  items:
                    type: string
                  type: array
                types:
                  description: A list of event types to include. If this list is absent
                    then all event types are included. A ``'*'`` can be used as a
                    wildcard to match any sequence of characters.
                  items:
                    type: string
                  type: array
              title: EventFilter
              type: object
            - properties:
                contains_url:
                  description: If ``true``, includes only events with a ``url`` key
                    in their content. If ``false``, excludes those events. If omitted,
                    ``url`` key is not considered for filtering.
                  type: boolean
                include_redundant_members:
                  description: |-
                    If ``true``, sends all membership events for all events, even if they have already
                    been sent to the client. Does not
                    apply unless ``lazy_load_members`` is ``true``. See
                    `Lazy-loading room members <#lazy-loading-room-members>`_
                    for more information. Defaults to ``false``.
                  type: boolean
                lazy_load_members:
                  description: |-
                    If ``true``, enables lazy-loading of membership events. See
                    `Lazy-loading room members <#lazy-loading-room-members>`_
                    for more information. Defaults to ``false``.
                  type: boolean
                not_rooms:
                  description: A list of room IDs to exclude. If this list is absent
                    then no rooms are excluded. A matching room will be excluded even
                    if it is listed in the ``'rooms'`` filter.
                  items:
                    type: string
                  type: array
                rooms:
                  description: A list of room IDs to include. If this list is absent
                    then all rooms are included.
                  items:
                    type: string
                  type: array
              title: RoomEventFilter
              type: object
            type: object
          description: The events that aren't recorded in the room history, e.g. typing
            and receipts, to include for rooms.
          type: object
        include_leave:
          description: Include rooms that the user has left in the sync, default false
          type: boolean
        not_rooms:
          description: A list of room IDs to exclude. If this list is absent then
            no rooms are excluded. A matching room will be excluded even if it is
            listed in the ``'rooms'`` filter. This filter is applied before the filters
            in ``ephemeral``, ``state``, ``timeline`` or ``account_data``
          items:
            type: string
          type: array
        rooms:
          description: A list of room IDs to include. If this list is absent then
            all rooms are included. This filter is applied before the filters in ``ephemeral``,
            ``state``, ``timeline`` or ``account_data``
          items:
            type: string
          type: array
        state:
          allOf:
          - allOf:
            - properties:
                limit:
                  description: The maximum number of events to return.
                  type: integer
                not_senders:
                  description: A list of sender IDs to exclude. If this list is absent
                    then no senders are excluded. A matching sender will be excluded
                    even if it is listed in the ``'senders'`` filter.
                  items:
                    type: string
                  type: array
                not_types:
                  description: A list of event types to exclude. If this list is absent
                    then no event types are excluded. A matching type will be excluded
                    even if it is listed in the ``'types'`` filter. A '*' can be used
                    as a wildcard to match any sequence of characters.
                  items:
                    type: string
                  type: array
                senders:
                  description: A list of senders IDs to include. If this list is absent
                    then all senders are included.
                  items:
                    type: string
                  type: array
                types:
                  description: A list of event types to include. If this list is absent
                    then all event types are included. A ``'*'`` can be used as a
                    wildcard to match any sequence of characters.
                  items:
                    type: string
                  type: array
              title: EventFilter
              type: object
            - properties:
                contains_url:
                  description: If ``true``, includes only events with a ``url`` key
                    in their content. If ``false``, excludes those events. If omitted,
                    ``url`` key is not considered for filtering.
                  type: boolean
                include_redundant_members:
                  description: |-
                    If ``true``, sends all membership events for all events, even if they have already
                    been sent to the client. Does not
                    apply unless ``lazy_load_members`` is ``true``. See
                    `Lazy-loading room members <#lazy-loading-room-members>`_
                    for more information. Defaults to ``false``.
                  type: boolean
                lazy_load_members:
                  description: |-
                    If ``true``, enables lazy-loading of membership events. See
                    `Lazy-loading room members <#lazy-loading-room-members>`_
                    for more information. Defaults to ``false``.
                  type: boolean
                not_rooms:
                  description: A list of room IDs to exclude. If this list is absent
                    then no rooms are excluded. A matching room will be excluded even
                    if it is listed in the ``'rooms'`` filter.
                  items:
                    type: string
                  type: array
                rooms:
                  description: A list of room IDs to include. If this list is absent
                    then all rooms are included.
                  items:
                    type: string
                  type: array
              title: RoomEventFilter
              type: object
            type: object
          description: The state events to include for rooms.
          title: StateFilter
          type: object
        timeline:
          allOf:
          - allOf:
            - properties:
                limit:
                  description: The maximum number of events to return.
                  type: integer
                not_senders:
                  description: A list of sender IDs to exclude. If this list is absent
                    then no senders are excluded. A matching sender will be excluded
                    even if it is listed in the ``'senders'`` filter.
                  items:
                    type: string
                  type: array
                not_types:
                  description: A list of event types to exclude. If this list is absent
                    then no event types are excluded. A matching type will be excluded
                    even if it is listed in the ``'types'`` filter. A '*' can be used
                    as a wildcard to match any sequence of characters.
                  items:
                    type: string
                  type: array
                senders:
                  description: A list of senders IDs to include. If this list is absent
                    then all senders are included.
                  items:
                    type: string
                  type: array
                types:
                  description: A list of event types to include. If this list is absent
                    then all event types are included. A ``'*'`` can be used as a
                    wildcard to match any sequence of characters.
                  items:
                    type: string
                  type: array
              title: EventFilter
              type: object
            - properties:
                contains_url:
                  description: If ``true``, includes only events with a ``url`` key
                    in their content. If ``false``, excludes those events. If omitted,
                    ``url`` key is not considered for filtering.
                  type: boolean
                include_redundant_members:
                  description: |-
                    If ``true``, sends all membership events for all events, even if they have already
                    been sent to the client. Does not
                    apply unless ``lazy_load_members`` is ``true``. See
                    `Lazy-loading room members <#lazy-loading-room-members>`_
                    for more information. Defaults to ``false``.
                  type: boolean
                lazy_load_members:
                  description: |-
                    If ``true``, enables lazy-loading of membership events. See
                    `Lazy-loading room members <#lazy-loading-room-members>`_
                    for more information. Defaults to ``false``.
                  type: boolean
                not_rooms:
                  description: A list of room IDs to exclude. If this list is absent
                    then no rooms are excluded. A matching room will be excluded even
                    if it is listed in the ``'rooms'`` filter.
                  items:
                    type: string
                  type: array
                rooms:
                  description: A list of room IDs to include. If this list is absent
                    then all rooms are included.
                  items:
                    type: string
                  type: array
              title: RoomEventFilter
              type: object
            type: object
          description: The message and state update events to include for rooms.
          type: object
    StrippedState:
      description: |-
        A stripped down state event, with only the ``type``, ``state_key``,
        ``sender``, and ``content`` keys.
      example:
        state_key: state_key
        sender: sender
        type: type
        content: '{}'
      properties:
        content:
          description: The ``content`` for the event.
          properties: {}
          title: EventContent
          type: object
        sender:
          description: The ``sender`` for the event.
          type: string
        state_key:
          description: The ``state_key`` for the event.
          type: string
        type:
          description: The ``type`` for the event.
          type: string
      required:
      - content
      - sender
      - state_key
      - type
    inline_response_429:
      description: The rate limit was reached for this request
      properties:
        errcode:
          description: The M_LIMIT_EXCEEDED error code
          example: M_LIMIT_EXCEEDED
          type: string
        error:
          description: A human-readable error message.
          example: Too many requests
          type: string
        retry_after_ms:
          description: |-
            The amount of time in milliseconds the client should wait
            before trying the request again.
          example: 2000
          type: integer
      required:
      - errcode
    inline_response_200_22:
      example:
        currently_active: true
        last_active_ago: 0
        presence: online
      properties:
        currently_active:
          description: Whether the user is currently active
          type: boolean
        last_active_ago:
          description: |-
            The length of time in milliseconds since an action was performed
            by this user.
          type: integer
        presence:
          description: This user's presence.
          enum:
          - online
          - offline
          - unavailable
          type: string
      required:
      - presence
    inline_response_200_21:
      example:
        next_token: next_token
        notifications:
        - room_id: room_id
          read: true
          profile_tag: profile_tag
          event: '{}'
          actions:
          - actions
          - actions
          ts: 0
        - room_id: room_id
          read: true
          profile_tag: profile_tag
          event: '{}'
          actions:
          - actions
          - actions
          ts: 0
      properties:
        next_token:
          description: |-
            The token to supply in the ``from`` param of the next
            ``/notifications`` request in order to request more
            events. If this is absent, there are no more results.
          type: string
        notifications:
          description: The list of events that triggered notifications.
          items:
            $ref: '#/components/schemas/Notification'
          type: array
      required:
      - notifications
    inline_response_200_24:
      example:
        avatar_url: avatar_url
      properties:
        avatar_url:
          description: The user's avatar URL if they have set one, otherwise not present.
          type: string
    inline_response_200_23:
      example:
        avatar_url: avatar_url
        displayname: displayname
      properties:
        avatar_url:
          description: The user's avatar URL if they have set one, otherwise not present.
          type: string
        displayname:
          description: The user's display name if they have set one, otherwise not
            present.
          type: string
    Categories:
      description: Describes which categories to search in and their criteria.
      properties:
        room_events:
          $ref: '#/components/schemas/Room Events Criteria'
    inline_response_200_20:
      example:
        access_token: access_token
        device_id: device_id
        user_id: user_id
        well_known:
          m.homeserver:
            base_url: https://matrix.example.com
          m.identity_server:
            base_url: https://identity.example.com
          org.example.custom.property:
            app_url: https://custom.app.example.org
        home_server: home_server
      properties:
        access_token:
          description: |-
            An access token for the account.
            This access token can then be used to authorize other requests.
          type: string
        device_id:
          description: |-
            ID of the logged-in device. Will be the same as the
            corresponding parameter in the request, if one was specified.
          type: string
        home_server:
          description: |-
            The server_name of the homeserver on which the account has
            been registered.

            **Deprecated**. Clients should extract the server_name from
            ``user_id`` (by splitting at the first colon) if they require
            it. Note also that ``homeserver`` is not spelt this way.
          type: string
        user_id:
          description: The fully-qualified Matrix ID that has been registered.
          type: string
        well_known:
          additionalProperties:
            description: Application-dependent keys using Java package naming convention.
            properties: {}
            type: object
          description: |-
            Optional client configuration provided by the server. If present,
            clients SHOULD use the provided object to reconfigure themselves,
            optionally validating the URLs within. This object takes the same
            form as the one returned from .well-known autodiscovery.
          example:
            m.homeserver:
              base_url: https://matrix.example.com
            m.identity_server:
              base_url: https://identity.example.com
            org.example.custom.property:
              app_url: https://custom.app.example.org
          title: Discovery Information
          type: object
    inline_response_200_29:
      example:
        global: '{}'
      properties:
        global:
          allOf:
          - properties:
              content:
                items:
                  allOf:
                  - properties:
                      actions:
                        description: The actions to perform when this rule is matched.
                        type: array
                      conditions:
                        description: |-
                          The conditions that must hold true for an event in order for a rule to be
                          applied to an event. A rule with no conditions always matches. Only
                          applicable to ``underride`` and ``override`` rules.
                        items:
                          allOf:
                          - properties:
                              is:
                                description: |-
                                  Required for ``room_member_count`` conditions. A decimal integer
                                  optionally prefixed by one of, ==, <, >, >= or <=. A prefix of < matches
                                  rooms where the member count is strictly less than the given number and
                                  so forth. If no prefix is present, this parameter defaults to ==.
                                type: string
                              key:
                                description: |-
                                  Required for ``event_match`` conditions. The dot-separated field of the
                                  event to match.

                                  Required for ``sender_notification_permission`` conditions. The field in
                                  the power level event the user needs a minimum power level for. Fields
                                  must be specified under the ``notifications`` property in the power level
                                  event's ``content``.
                                type: string
                                x-example: content.body
                              kind:
                                description: |-
                                  The kind of condition to apply. See `conditions <#conditions>`_ for
                                  more information on the allowed kinds and how they work.
                                type: string
                              pattern:
                                description: |-
                                  Required for ``event_match`` conditions. The glob-style pattern to
                                  match against. Patterns with no special glob characters should be
                                  treated as having asterisks prepended and appended when testing the
                                  condition.
                                type: string
                            required:
                            - kind
                            title: PushCondition
                            type: object
                          type: object
                        type: array
                      default:
                        description: Whether this is a default rule, or has been set
                          explicitly.
                        type: boolean
                      enabled:
                        description: Whether the push rule is enabled or not.
                        type: boolean
                      pattern:
                        description: |-
                          The glob-style pattern to match against.  Only applicable to ``content``
                          rules.
                        type: string
                      rule_id:
                        description: The ID of this rule.
                        type: string
                    required:
                    - actions
                    - default
                    - enabled
                    - rule_id
                    title: PushRule
                    type: object
                  title: PushRule
                  type: object
                type: array
              override:
                items:
                  allOf:
                  - properties:
                      actions:
                        description: The actions to perform when this rule is matched.
                        type: array
                      conditions:
                        description: |-
                          The conditions that must hold true for an event in order for a rule to be
                          applied to an event. A rule with no conditions always matches. Only
                          applicable to ``underride`` and ``override`` rules.
                        items:
                          allOf:
                          - properties:
                              is:
                                description: |-
                                  Required for ``room_member_count`` conditions. A decimal integer
                                  optionally prefixed by one of, ==, <, >, >= or <=. A prefix of < matches
                                  rooms where the member count is strictly less than the given number and
                                  so forth. If no prefix is present, this parameter defaults to ==.
                                type: string
                              key:
                                description: |-
                                  Required for ``event_match`` conditions. The dot-separated field of the
                                  event to match.

                                  Required for ``sender_notification_permission`` conditions. The field in
                                  the power level event the user needs a minimum power level for. Fields
                                  must be specified under the ``notifications`` property in the power level
                                  event's ``content``.
                                type: string
                                x-example: content.body
                              kind:
                                description: |-
                                  The kind of condition to apply. See `conditions <#conditions>`_ for
                                  more information on the allowed kinds and how they work.
                                type: string
                              pattern:
                                description: |-
                                  Required for ``event_match`` conditions. The glob-style pattern to
                                  match against. Patterns with no special glob characters should be
                                  treated as having asterisks prepended and appended when testing the
                                  condition.
                                type: string
                            required:
                            - kind
                            title: PushCondition
                            type: object
                          type: object
                        type: array
                      default:
                        description: Whether this is a default rule, or has been set
                          explicitly.
                        type: boolean
                      enabled:
                        description: Whether the push rule is enabled or not.
                        type: boolean
                      pattern:
                        description: |-
                          The glob-style pattern to match against.  Only applicable to ``content``
                          rules.
                        type: string
                      rule_id:
                        description: The ID of this rule.
                        type: string
                    required:
                    - actions
                    - default
                    - enabled
                    - rule_id
                    title: PushRule
                    type: object
                  title: PushRule
                  type: object
                type: array
              room:
                items:
                  allOf:
                  - properties:
                      actions:
                        description: The actions to perform when this rule is matched.
                        type: array
                      conditions:
                        description: |-
                          The conditions that must hold true for an event in order for a rule to be
                          applied to an event. A rule with no conditions always matches. Only
                          applicable to ``underride`` and ``override`` rules.
                        items:
                          allOf:
                          - properties:
                              is:
                                description: |-
                                  Required for ``room_member_count`` conditions. A decimal integer
                                  optionally prefixed by one of, ==, <, >, >= or <=. A prefix of < matches
                                  rooms where the member count is strictly less than the given number and
                                  so forth. If no prefix is present, this parameter defaults to ==.
                                type: string
                              key:
                                description: |-
                                  Required for ``event_match`` conditions. The dot-separated field of the
                                  event to match.

                                  Required for ``sender_notification_permission`` conditions. The field in
                                  the power level event the user needs a minimum power level for. Fields
                                  must be specified under the ``notifications`` property in the power level
                                  event's ``content``.
                                type: string
                                x-example: content.body
                              kind:
                                description: |-
                                  The kind of condition to apply. See `conditions <#conditions>`_ for
                                  more information on the allowed kinds and how they work.
                                type: string
                              pattern:
                                description: |-
                                  Required for ``event_match`` conditions. The glob-style pattern to
                                  match against. Patterns with no special glob characters should be
                                  treated as having asterisks prepended and appended when testing the
                                  condition.
                                type: string
                            required:
                            - kind
                            title: PushCondition
                            type: object
                          type: object
                        type: array
                      default:
                        description: Whether this is a default rule, or has been set
                          explicitly.
                        type: boolean
                      enabled:
                        description: Whether the push rule is enabled or not.
                        type: boolean
                      pattern:
                        description: |-
                          The glob-style pattern to match against.  Only applicable to ``content``
                          rules.
                        type: string
                      rule_id:
                        description: The ID of this rule.
                        type: string
                    required:
                    - actions
                    - default
                    - enabled
                    - rule_id
                    title: PushRule
                    type: object
                  title: PushRule
                  type: object
                type: array
              sender:
                items:
                  allOf:
                  - properties:
                      actions:
                        description: The actions to perform when this rule is matched.
                        type: array
                      conditions:
                        description: |-
                          The conditions that must hold true for an event in order for a rule to be
                          applied to an event. A rule with no conditions always matches. Only
                          applicable to ``underride`` and ``override`` rules.
                        items:
                          allOf:
                          - properties:
                              is:
                                description: |-
                                  Required for ``room_member_count`` conditions. A decimal integer
                                  optionally prefixed by one of, ==, <, >, >= or <=. A prefix of < matches
                                  rooms where the member count is strictly less than the given number and
                                  so forth. If no prefix is present, this parameter defaults to ==.
                                type: string
                              key:
                                description: |-
                                  Required for ``event_match`` conditions. The dot-separated field of the
                                  event to match.

                                  Required for ``sender_notification_permission`` conditions. The field in
                                  the power level event the user needs a minimum power level for. Fields
                                  must be specified under the ``notifications`` property in the power level
                                  event's ``content``.
                                type: string
                                x-example: content.body
                              kind:
                                description: |-
                                  The kind of condition to apply. See `conditions <#conditions>`_ for
                                  more information on the allowed kinds and how they work.
                                type: string
                              pattern:
                                description: |-
                                  Required for ``event_match`` conditions. The glob-style pattern to
                                  match against. Patterns with no special glob characters should be
                                  treated as having asterisks prepended and appended when testing the
                                  condition.
                                type: string
                            required:
                            - kind
                            title: PushCondition
                            type: object
                          type: object
                        type: array
                      default:
                        description: Whether this is a default rule, or has been set
                          explicitly.
                        type: boolean
                      enabled:
                        description: Whether the push rule is enabled or not.
                        type: boolean
                      pattern:
                        description: |-
                          The glob-style pattern to match against.  Only applicable to ``content``
                          rules.
                        type: string
                      rule_id:
                        description: The ID of this rule.
                        type: string
                    required:
                    - actions
                    - default
                    - enabled
                    - rule_id
                    title: PushRule
                    type: object
                  title: PushRule
                  type: object
                type: array
              underride:
                items:
                  allOf:
                  - properties:
                      actions:
                        description: The actions to perform when this rule is matched.
                        type: array
                      conditions:
                        description: |-
                          The conditions that must hold true for an event in order for a rule to be
                          applied to an event. A rule with no conditions always matches. Only
                          applicable to ``underride`` and ``override`` rules.
                        items:
                          allOf:
                          - properties:
                              is:
                                description: |-
                                  Required for ``room_member_count`` conditions. A decimal integer
                                  optionally prefixed by one of, ==, <, >, >= or <=. A prefix of < matches
                                  rooms where the member count is strictly less than the given number and
                                  so forth. If no prefix is present, this parameter defaults to ==.
                                type: string
                              key:
                                description: |-
                                  Required for ``event_match`` conditions. The dot-separated field of the
                                  event to match.

                                  Required for ``sender_notification_permission`` conditions. The field in
                                  the power level event the user needs a minimum power level for. Fields
                                  must be specified under the ``notifications`` property in the power level
                                  event's ``content``.
                                type: string
                                x-example: content.body
                              kind:
                                description: |-
                                  The kind of condition to apply. See `conditions <#conditions>`_ for
                                  more information on the allowed kinds and how they work.
                                type: string
                              pattern:
                                description: |-
                                  Required for ``event_match`` conditions. The glob-style pattern to
                                  match against. Patterns with no special glob characters should be
                                  treated as having asterisks prepended and appended when testing the
                                  condition.
                                type: string
                            required:
                            - kind
                            title: PushCondition
                            type: object
                          type: object
                        type: array
                      default:
                        description: Whether this is a default rule, or has been set
                          explicitly.
                        type: boolean
                      enabled:
                        description: Whether the push rule is enabled or not.
                        type: boolean
                      pattern:
                        description: |-
                          The glob-style pattern to match against.  Only applicable to ``content``
                          rules.
                        type: string
                      rule_id:
                        description: The ID of this rule.
                        type: string
                    required:
                    - actions
                    - default
                    - enabled
                    - rule_id
                    title: PushRule
                    type: object
                  title: PushRule
                  type: object
                type: array
            type: object
          description: The global ruleset.
          title: Ruleset
          type: object
      required:
      - global
    inline_response_200_26:
      description: A list of the rooms on the server.
      example: '{chunk=[{aliases=[#murrays:cheese.bar], avatar_url=mxc://bleeker.street/CHEDDARandBRIE,
        guest_can_join=false, name=CHEESE, num_joined_members=37, room_id=!ol19s:bleecker.street,
        topic=Tasty tasty cheese, world_readable=true}], next_batch=p190q, prev_batch=p1902,
        total_room_count_estimate=115}'
      properties:
        chunk:
          description: A paginated chunk of public rooms.
          items:
            $ref: '#/components/schemas/PublicRoomsChunk'
          title: PublicRoomsChunks
          type: array
        next_batch:
          description: |-
            A pagination token for the response. The absence of this token
            means there are no more results to fetch and the client should
            stop paginating.
          type: string
        prev_batch:
          description: |-
            A pagination token that allows fetching previous results. The
            absence of this token means there are no results before this
            batch, i.e. this is the first batch.
          type: string
        total_room_count_estimate:
          description: |-
            An estimate on the total number of public rooms, if the
            server has an estimate.
          type: integer
      required:
      - chunk
    Room Events Criteria:
      description: Mapping of category name to search criteria.
      properties:
        event_context:
          $ref: '#/components/schemas/Include Event Context'
        filter:
          allOf:
          - properties:
              limit:
                description: The maximum number of events to return.
                type: integer
              not_senders:
                description: A list of sender IDs to exclude. If this list is absent
                  then no senders are excluded. A matching sender will be excluded
                  even if it is listed in the ``'senders'`` filter.
                items:
                  type: string
                type: array
              not_types:
                description: A list of event types to exclude. If this list is absent
                  then no event types are excluded. A matching type will be excluded
                  even if it is listed in the ``'types'`` filter. A '*' can be used
                  as a wildcard to match any sequence of characters.
                items:
                  type: string
                type: array
              senders:
                description: A list of senders IDs to include. If this list is absent
                  then all senders are included.
                items:
                  type: string
                type: array
              types:
                description: A list of event types to include. If this list is absent
                  then all event types are included. A ``'*'`` can be used as a wildcard
                  to match any sequence of characters.
                items:
                  type: string
                type: array
            title: EventFilter
            type: object
          - properties:
              contains_url:
                description: If ``true``, includes only events with a ``url`` key
                  in their content. If ``false``, excludes those events. If omitted,
                  ``url`` key is not considered for filtering.
                type: boolean
              include_redundant_members:
                description: |-
                  If ``true``, sends all membership events for all events, even if they have already
                  been sent to the client. Does not
                  apply unless ``lazy_load_members`` is ``true``. See
                  `Lazy-loading room members <#lazy-loading-room-members>`_
                  for more information. Defaults to ``false``.
                type: boolean
              lazy_load_members:
                description: |-
                  If ``true``, enables lazy-loading of membership events. See
                  `Lazy-loading room members <#lazy-loading-room-members>`_
                  for more information. Defaults to ``false``.
                type: boolean
              not_rooms:
                description: A list of room IDs to exclude. If this list is absent
                  then no rooms are excluded. A matching room will be excluded even
                  if it is listed in the ``'rooms'`` filter.
                items:
                  type: string
                type: array
              rooms:
                description: A list of room IDs to include. If this list is absent
                  then all rooms are included.
                items:
                  type: string
                type: array
            title: RoomEventFilter
            type: object
          description: This takes a `filter`_.
          title: Filter
          type: object
        groupings:
          $ref: '#/components/schemas/Groupings'
        include_state:
          description: |-
            Requests the server return the current state for
            each room returned.
          title: Include current state
          type: boolean
        keys:
          description: The keys to search. Defaults to all.
          items:
            enum:
            - content.body
            - content.name
            - content.topic
            type: string
          type: array
        order_by:
          description: |-
            The order in which to search for results.
            By default, this is ``"rank"``.
          enum:
          - recent
          - rank
          title: Ordering
          type: string
        search_term:
          description: The string to search events for
          type: string
      required:
      - search_term
    inline_response_200_25:
      example:
        displayname: displayname
      properties:
        displayname:
          description: The user's display name if they have set one, otherwise not
            present.
          type: string
    inline_response_200_28:
      example:
        pushers:
        - pushkey: pushkey
          data:
            format: format
            url: url
          kind: kind
          profile_tag: profile_tag
          app_display_name: app_display_name
          device_display_name: device_display_name
          lang: lang
          app_id: app_id
        - pushkey: pushkey
          data:
            format: format
            url: url
          kind: kind
          profile_tag: profile_tag
          app_display_name: app_display_name
          device_display_name: device_display_name
          lang: lang
          app_id: app_id
      properties:
        pushers:
          description: An array containing the current pushers for the user
          items:
            $ref: '#/components/schemas/Pusher'
          title: Pushers
          type: array
    inline_response_200_27:
      description: A list of the rooms on the server.
      example:
        total_room_count_estimate: 6
        next_batch: next_batch
        chunk:
        - room_id: room_id
          aliases:
          - aliases
          - aliases
          avatar_url: avatar_url
          name: name
          world_readable: true
          topic: topic
          canonical_alias: canonical_alias
          guest_can_join: true
          num_joined_members: 0
        - room_id: room_id
          aliases:
          - aliases
          - aliases
          avatar_url: avatar_url
          name: name
          world_readable: true
          topic: topic
          canonical_alias: canonical_alias
          guest_can_join: true
          num_joined_members: 0
        prev_batch: prev_batch
      properties:
        chunk:
          description: A paginated chunk of public rooms.
          items:
            $ref: '#/components/schemas/PublicRoomsChunk'
          title: PublicRoomsChunks
          type: array
        next_batch:
          description: |-
            A pagination token for the response. The absence of this token
            means there are no more results to fetch and the client should
            stop paginating.
          type: string
        prev_batch:
          description: |-
            A pagination token that allows fetching previous results. The
            absence of this token means there are no results before this
            batch, i.e. this is the first batch.
          type: string
        total_room_count_estimate:
          description: |-
            An estimate on the total number of public rooms, if the
            server has an estimate.
          type: integer
      required:
      - chunk
    RoomEvent:
      description: Room Events have the following fields.
      example:
        room_id: room_id
      properties:
        room_id:
          description: |-
            The ID of the room associated with this event. Will not be present on events
            that arrive through ``/sync``, despite being required everywhere else.
          type: string
      required:
      - room_id
    ConnectionInfo:
      example:
        last_seen: 0
        ip: ip
        user_agent: user_agent
      properties:
        ip:
          description: Most recently seen IP address of the session.
          type: string
        last_seen:
          description: Unix timestamp that the session was last active.
          format: int64
          type: integer
        user_agent:
          description: User agent string last seen in the session.
          type: string
    Group:
      description: Configuration for group.
      properties:
        key:
          description: Key that defines the group.
          enum:
          - room_id
          - sender
          title: Group Key
          type: string
    inline_object_30:
      example:
        reason: Indecent material
      properties:
        reason:
          description: The reason for the event being redacted.
          type: string
      type: object
    inline_object_32:
      example:
        timeout: 30000
        typing: true
      properties:
        timeout:
          description: The length of time in milliseconds to mark this user as typing.
          type: integer
        typing:
          description: |-
            Whether the user is typing or not. If ``false``, the ``timeout``
            key can be omitted.
          type: boolean
      required:
      - typing
      type: object
    SessionInfo:
      example:
        connections:
        - last_seen: 0
          ip: ip
          user_agent: user_agent
        - last_seen: 0
          ip: ip
          user_agent: user_agent
      properties:
        connections:
          description: Information particular connections in the session.
          items:
            $ref: '#/components/schemas/ConnectionInfo'
          type: array
    inline_object_31:
      example:
        reason: this makes me sad
        score: -100
      properties:
        reason:
          description: The reason the content is being reported. May be blank.
          type: string
        score:
          description: |-
            The score to rate this content as where -100 is most offensive
            and 0 is inoffensive.
          type: integer
      required:
      - reason
      - score
      type: object
    inline_object_34:
      example:
        new_version: "2"
      properties:
        new_version:
          description: The new version for the room.
          type: string
      required:
      - new_version
      type: object
    inline_object_33:
      example:
        user_id: '@cheeky_monkey:matrix.org'
      properties:
        user_id:
          description: The fully qualified user ID of the user being unbanned.
          type: string
      required:
      - user_id
      type: object
    User Profile:
      example:
        avatar_url: avatar_url
        displayname: displayname
      properties:
        avatar_url:
          title: Avatar Url
          type: string
        displayname:
          title: Display name
          type: string
    inline_object_36:
      example:
        order: 0.25
      properties:
        order:
          description: |-
            A number in a range ``[0,1]`` describing a relative
            position of the room under the given tag.
          format: float
          type: number
      type: object
    Pusher:
      example:
        pushkey: pushkey
        data:
          format: format
          url: url
        kind: kind
        profile_tag: profile_tag
        app_display_name: app_display_name
        device_display_name: device_display_name
        lang: lang
        app_id: app_id
      properties:
        app_display_name:
          description: |-
            A string that will allow the user to identify what application
            owns this pusher.
          type: string
        app_id:
          description: |-
            This is a reverse-DNS style identifier for the application.
            Max length, 64 chars.
          type: string
        data:
          $ref: '#/components/schemas/PusherData'
        device_display_name:
          description: |-
            A string that will allow the user to identify what device owns
            this pusher.
          type: string
        kind:
          description: |-
            The kind of pusher. ``"http"`` is a pusher that
            sends HTTP pokes.
          type: string
        lang:
          description: |-
            The preferred language for receiving notifications (e.g. 'en'
            or 'en-US')
          type: string
        profile_tag:
          description: |-
            This string determines which set of device specific rules this
            pusher executes.
          type: string
        pushkey:
          description: |-
            This is a unique identifier for this pusher. See ``/set`` for
            more detail.
            Max length, 512 bytes.
          type: string
      required:
      - app_display_name
      - app_id
      - data
      - device_display_name
      - kind
      - lang
      - pushkey
    inline_object_35:
      example:
        search_categories:
          room_events:
            groupings:
              group_by:
              - key: room_id
            keys:
            - content.body
            order_by: recent
            search_term: martians and men
      properties:
        search_categories:
          $ref: '#/components/schemas/Categories'
      required:
      - search_categories
      type: object
    Notification:
      example:
        room_id: room_id
        read: true
        profile_tag: profile_tag
        event: '{}'
        actions:
        - actions
        - actions
        ts: 0
      properties:
        actions:
          description: |-
            The action(s) to perform when the conditions for this rule are met.
            See `Push Rules: API`_.
          items:
            description: //TODO automatically added by openapi-generator due to undefined
              type
            type: string
          type: array
        event:
          allOf:
          - properties:
              content:
                description: The content of this event. The fields in this object
                  will vary depending on the type of event.
                properties: {}
                title: EventContent
                type: object
              event_id:
                description: The ID of this event, if applicable.
                type: string
              origin_server_ts:
                description: Timestamp in milliseconds on originating homeserver when
                  this event was sent.
                format: int64
                type: integer
              sender:
                description: The MXID of the user who sent this event.
                type: string
              state_key:
                description: Optional. This key will only be present for state events.
                  A unique key which defines the overwriting semantics for this piece
                  of room state.
                type: string
              type:
                description: The type of event.
                type: string
              unsigned:
                description: Information about this event which was not sent by the
                  originating homeserver
                properties:
                  age:
                    description: Time in milliseconds since the event was sent.
                    format: int64
                    type: integer
                  prev_content:
                    description: Optional. The previous ``content`` for this state.
                      This will be present only for state events appearing in the
                      ``timeline``. If this is not a state event, or there is no previous
                      content, this key will be missing.
                    properties: {}
                    title: EventContent
                    type: object
                  redacted_because:
                    description: Optional. The event that redacted this event, if
                      any.
                    properties: {}
                    title: Event
                    type: object
                  transaction_id:
                    description: Optional. The transaction ID set when this message
                      was sent. This key will only be present for message events sent
                      by the device calling this API.
                    type: string
                title: Unsigned
                type: object
            title: Event
            type: object
          description: The Event object for the event that triggered the notification.
          title: Event
          type: object
        profile_tag:
          description: The profile tag of the rule that matched this event.
          type: string
        read:
          description: |-
            Indicates whether the user has sent a read receipt indicating
            that they have read this message.
          type: boolean
        room_id:
          description: The ID of the room in which the event was posted.
          type: string
        ts:
          description: |-
            The unix timestamp at which the event notification was sent,
            in milliseconds.
          type: integer
      required:
      - actions
      - event
      - read
      - room_id
      - ts
    inline_object_37:
      properties:
        limit:
          description: The maximum number of results to return. Defaults to 10.
          example: 10
          type: integer
        search_term:
          description: The term to search for
          example: foo
          type: string
      required:
      - search_term
      type: object
    inline_object_29:
      properties:
        m.fully_read:
          description: |-
            The event ID the read marker should be located at. The
            event MUST belong to the room.
          example: $somewhere:example.org
          type: string
        m.read:
          description: |-
            The event ID to set the read receipt location at. This is
            equivalent to calling ``/receipt/m.read/$elsewhere:example.org``
            and is provided here to save that extra call.
          example: $elsewhere:example.org
          type: string
      required:
      - m.fully_read
      type: object
    inline_object_28:
      example:
        reason: Telling unfunny jokes
        user_id: '@cheeky_monkey:matrix.org'
      properties:
        reason:
          description: "The reason the user has been kicked. This will be supplied\
            \ as the \n``reason`` on the target's updated `m.room.member`_ event."
          type: string
        user_id:
          description: The fully qualified user ID of the user being kicked.
          type: string
      required:
      - user_id
      type: object
    inline_response_403:
      description: A Matrix-level Error
      properties:
        errcode:
          description: An error code.
          example: M_UNKNOWN
          type: string
        error:
          description: A human-readable error message.
          example: An unknown error occurred
          type: string
      required:
      - errcode
    Authentication response:
      description: Used by servers to indicate that additional authentication information
        is required,
      properties:
        completed:
          description: A list of the stages the client has completed successfully
          items:
            example: example.type.foo
            type: string
          type: array
        flows:
          description: A list of the login flows supported by the server for this
            API.
          items:
            $ref: '#/components/schemas/Authentication_response_flows'
          title: Flow information
          type: array
        params:
          additionalProperties:
            properties: {}
            type: object
          description: |-
            Contains any information that the client will need to know in order to
            use a given type of authentication. For each login type presented,
            that type may be present as a key in this dictionary. For example, the
            public part of an OAuth client ID could be given here.
          example:
            example.type.baz:
              example_key: foobar
          type: object
        session:
          description: |-
            This is a session identifier that the client must pass back to the home
            server, if one is provided, in subsequent attempts to authenticate in the
            same API call.
          example: xxxxxxyz
          type: string
      required:
      - flows
    inline_object_1:
      properties:
        address:
          description: The third party address being removed.
          example: example@example.org
          type: string
        id_server:
          description: |-
            The identity server to unbind from. If not provided, the homeserver
            MUST use the ``id_server`` the identifier was added through. If the
            homeserver does not know the original ``id_server``, it MUST return
            a ``id_server_unbind_result`` of ``no-support``.
          example: example.org
          type: string
        medium:
          description: The medium of the third party identifier being removed.
          enum:
          - email
          - msisdn
          example: email
          type: string
      required:
      - address
      - medium
      type: object
    inline_response_200_44:
      example:
        limited: true
        results:
        - avatar_url: mxc://bar.com/foo
          user_id: '@foo:bar.com'
          display_name: Foo
        - avatar_url: mxc://bar.com/foo
          user_id: '@foo:bar.com'
          display_name: Foo
      properties:
        limited:
          description: Indicates if the result list has been truncated by the limit.
          type: boolean
        results:
          description: Ordered by rank and then whether or not profile info is available.
          items:
            $ref: '#/components/schemas/User'
          type: array
      required:
      - limited
      - results
    inline_response_200_43:
      example:
        tags:
          key:
            order: 0.8008282
      properties:
        tags:
          additionalProperties:
            $ref: '#/components/schemas/Tag'
          type: object
    inline_response_200_46:
      example:
        unstable_features:
          key: true
        versions:
        - versions
        - versions
      properties:
        unstable_features:
          additionalProperties:
            description: Whether or not the namespaced feature is supported.
            type: boolean
          description: |-
            Experimental features the server supports. Features not listed here,
            or the lack of this property all together, indicate that a feature is
            not supported.
          type: object
        versions:
          description: The supported versions.
          items:
            description: The supported versions
            type: string
          type: array
      required:
      - versions
    inline_response_200_45:
      example:
        uris:
        - uris
        - uris
        password: password
        ttl: 0
        username: username
      properties:
        password:
          description: The password to use.
          type: string
        ttl:
          description: The time-to-live in seconds
          type: integer
        uris:
          description: A list of TURN URIs
          items:
            type: string
          type: array
        username:
          description: The username to use.
          type: string
      required:
      - password
      - ttl
      - uris
      - username
    inline_response_200_40:
      example:
        filter_id: 66696p746572
      properties:
        filter_id:
          description: |-
            The ID of the filter that was created. Cannot start
            with a ``{`` as this character is used to determine
            if the filter provided is inline JSON or a previously
            declared filter by homeservers on some APIs.
          example: 66696p746572
          type: string
      required:
      - filter_id
    inline_response_200_42:
      example:
        access_token: access_token
        matrix_server_name: matrix_server_name
        token_type: token_type
        expires_in: 0
      properties:
        access_token:
          description: |-
            An access token the consumer may use to verify the identity of
            the person who generated the token. This is given to the federation
            API ``GET /openid/userinfo``.
          type: string
        expires_in:
          description: |-
            The number of seconds before this token expires and a new one must
            be generated.
          type: integer
        matrix_server_name:
          description: |-
            The homeserver domain the consumer should use when attempting to
            verify the user's identity.
          type: string
        token_type:
          description: The string ``Bearer``.
          type: string
      required:
      - access_token
      - expires_in
      - matrix_server_name
      - token_type
    inline_response_200_41:
      example:
        event_fields:
        - event_fields
        - event_fields
        event_format: client
        account_data: '{}'
        presence: '{}'
        room:
          rooms:
          - rooms
          - rooms
          ephemeral: '{}'
          timeline: '{}'
          account_data: '{}'
          state: '{}'
          include_leave: true
          not_rooms:
          - not_rooms
          - not_rooms
      properties:
        account_data:
          allOf:
          - properties:
              limit:
                description: The maximum number of events to return.
                type: integer
              not_senders:
                description: A list of sender IDs to exclude. If this list is absent
                  then no senders are excluded. A matching sender will be excluded
                  even if it is listed in the ``'senders'`` filter.
                items:
                  type: string
                type: array
              not_types:
                description: A list of event types to exclude. If this list is absent
                  then no event types are excluded. A matching type will be excluded
                  even if it is listed in the ``'types'`` filter. A '*' can be used
                  as a wildcard to match any sequence of characters.
                items:
                  type: string
                type: array
              senders:
                description: A list of senders IDs to include. If this list is absent
                  then all senders are included.
                items:
                  type: string
                type: array
              types:
                description: A list of event types to include. If this list is absent
                  then all event types are included. A ``'*'`` can be used as a wildcard
                  to match any sequence of characters.
                items:
                  type: string
                type: array
            title: EventFilter
            type: object
          description: The user account data that isn't associated with rooms to include.
          type: object
        event_fields:
          description: List of event fields to include. If this list is absent then
            all fields are included. The entries may include '.' characters to indicate
            sub-fields. So ['content.body'] will include the 'body' field of the 'content'
            object. A literal '.' character in a field name may be escaped using a
            '\\'. A server may include more fields than were requested.
          items:
            type: string
          type: array
        event_format:
          description: The format to use for events. 'client' will return the events
            in a format suitable for clients. 'federation' will return the raw event
            as received over federation. The default is 'client'.
          enum:
          - client
          - federation
          type: string
        presence:
          allOf:
          - properties:
              limit:
                description: The maximum number of events to return.
                type: integer
              not_senders:
                description: A list of sender IDs to exclude. If this list is absent
                  then no senders are excluded. A matching sender will be excluded
                  even if it is listed in the ``'senders'`` filter.
                items:
                  type: string
                type: array
              not_types:
                description: A list of event types to exclude. If this list is absent
                  then no event types are excluded. A matching type will be excluded
                  even if it is listed in the ``'types'`` filter. A '*' can be used
                  as a wildcard to match any sequence of characters.
                items:
                  type: string
                type: array
              senders:
                description: A list of senders IDs to include. If this list is absent
                  then all senders are included.
                items:
                  type: string
                type: array
              types:
                description: A list of event types to include. If this list is absent
                  then all event types are included. A ``'*'`` can be used as a wildcard
                  to match any sequence of characters.
                items:
                  type: string
                type: array
            title: EventFilter
            type: object
          description: The presence updates to include.
          type: object
        room:
          $ref: '#/components/schemas/RoomFilter'
    inline_object_9:
      example:
        room_id: '!abnjk1jdasj98:capuchins.com'
      properties:
        room_id:
          description: The room ID to set.
          type: string
      required:
      - room_id
      type: object
    inline_object_21:
      example:
        actions:
        - notify
      properties:
        actions:
          description: The action(s) to perform for this rule.
          items:
            enum:
            - notify
            - dont_notify
            - coalesce
            - set_tweak
            type: string
          type: array
      required:
      - actions
      type: object
    inline_object_8:
      properties:
        visibility:
          description: |-
            Whether the room should be visible (public) in the directory
            or not (private).
          enum:
          - public
          - private
          example: public
          type: string
      required:
      - visibility
      type: object
    inline_object_20:
      example:
        actions:
        - notify
        pattern: cake*lie
      properties:
        actions:
          description: The action(s) to perform when the conditions for this rule
            are met.
          items:
            enum:
            - notify
            - dont_notify
            - coalesce
            - set_tweak
            type: string
          type: array
        conditions:
          description: |-
            The conditions that must hold true for an event in order for a
            rule to be applied to an event. A rule with no conditions
            always matches. Only applicable to ``underride`` and ``override`` rules.
          items:
            allOf:
            - properties:
                is:
                  description: |-
                    Required for ``room_member_count`` conditions. A decimal integer
                    optionally prefixed by one of, ==, <, >, >= or <=. A prefix of < matches
                    rooms where the member count is strictly less than the given number and
                    so forth. If no prefix is present, this parameter defaults to ==.
                  type: string
                key:
                  description: |-
                    Required for ``event_match`` conditions. The dot-separated field of the
                    event to match.

                    Required for ``sender_notification_permission`` conditions. The field in
                    the power level event the user needs a minimum power level for. Fields
                    must be specified under the ``notifications`` property in the power level
                    event's ``content``.
                  type: string
                  x-example: content.body
                kind:
                  description: |-
                    The kind of condition to apply. See `conditions <#conditions>`_ for
                    more information on the allowed kinds and how they work.
                  type: string
                pattern:
                  description: |-
                    Required for ``event_match`` conditions. The glob-style pattern to
                    match against. Patterns with no special glob characters should be
                    treated as having asterisks prepended and appended when testing the
                    condition.
                  type: string
              required:
              - kind
              title: PushCondition
              type: object
            type: object
          type: array
        pattern:
          description: Only applicable to ``content`` rules. The glob-style pattern
            to match against.
          type: string
      required:
      - actions
      type: object
    inline_object_7:
      properties:
        auth:
          additionalProperties:
            description: Keys dependent on the login type
            properties: {}
            type: object
          description: |-
            Additional authentication information for the
            user-interactive authentication API.
          example:
            example_credential: verypoorsharedsecret
            session: xxxxx
            type: example.type.foo
          title: Authentication Data
          type: object
      type: object
    inline_object_23:
      properties:
        auth:
          additionalProperties:
            description: Keys dependent on the login type
            properties: {}
            type: object
          description: |-
            Additional authentication information for the
            user-interactive authentication API. Note that this
            information is *not* used to define how the registered user
            should be authenticated, but is instead used to
            authenticate the ``register`` call itself.
          example:
            example_credential: verypoorsharedsecret
            session: xxxxx
            type: example.type.foo
          title: Authentication Data
          type: object
        bind_email:
          description: |-
            If true, the server binds the email used for authentication to
            the Matrix ID with the identity server.
          example: false
          type: boolean
        bind_msisdn:
          description: |-
            If true, the server binds the phone number used for authentication
            to the Matrix ID with the identity server.
          example: false
          type: boolean
        device_id:
          description: |-
            ID of the client device. If this does not correspond to a
            known client device, a new device will be created. The server
            will auto-generate a device_id if this is not specified.
          example: GHTYAJCE
          type: string
        inhibit_login:
          description: |-
            If true, an ``access_token`` and ``device_id`` should not be
            returned from this call, therefore preventing an automatic
            login. Defaults to false.
          example: false
          type: boolean
        initial_device_display_name:
          description: |-
            A display name to assign to the newly-created device. Ignored
            if ``device_id`` corresponds to a known device.
          example: Jungle Phone
          type: string
        password:
          description: The desired password for the account.
          example: ilovebananas
          type: string
        username:
          description: |-
            The basis for the localpart of the desired Matrix ID. If omitted,
            the homeserver MUST generate a Matrix ID local part.
          example: cheeky_monkey
          type: string
      type: object
    inline_object_6:
      properties:
        display_name:
          description: |-
            The new display name for this device. If not given, the
            display name is unchanged.
          example: My other phone
          type: string
      type: object
    inline_object_22:
      example:
        enabled: true
      properties:
        enabled:
          description: Whether the push rule is enabled or not.
          type: boolean
      required:
      - enabled
      type: object
    inline_object_5:
      properties:
        auth:
          additionalProperties:
            description: Keys dependent on the login type
            properties: {}
            type: object
          description: |-
            Additional authentication information for the
            user-interactive authentication API.
          example:
            example_credential: verypoorsharedsecret
            session: xxxxx
            type: example.type.foo
          title: Authentication Data
          type: object
        devices:
          description: The list of device IDs to delete.
          example:
          - QBUAZIFURK
          - AUIECTSRND
          items:
            description: A list of device IDs.
            type: string
          type: array
      required:
      - devices
      type: object
    inline_object_25:
      example:
        address: cheeky@monkey.com
        id_server: matrix.org
        medium: email
      properties:
        address:
          description: The invitee's third party identifier.
          type: string
        id_server:
          description: The hostname+port of the identity server which should be used
            for third party identifier lookups.
          type: string
        medium:
          description: The kind of address being passed in the address field, for
            example ``email``.
          type: string
      required:
      - address
      - id_server
      - medium
      type: object
    inline_response_200_48:
      example:
        og:image: og:image
        matrix:image:size: 0
      properties:
        matrix:image:size:
          description: The byte-size of the image. Omitted if there is no image attached.
          format: int64
          type: integer
        og:image:
          description: An `MXC URI`_ to the image. Omitted if there is no image.
          type: string
    inline_object_4:
      example:
        creation_content:
          m.federate: false
        name: The Grand Duke Pub
        preset: public_chat
        room_alias_name: thepub
        topic: All about happy hour
      properties:
        creation_content:
          description: |-
            Extra keys, such as ``m.federate``, to be added to the content
            of the `m.room.create`_ event. The server will clobber the following
            keys: ``creator``, ``room_version``. Future versions of the specification
            may allow the server to clobber other keys.
          properties: {}
          title: CreationContent
          type: object
        initial_state:
          description: |-
            A list of state events to set in the new room. This allows
            the user to override the default state events set in the new
            room. The expected format of the state events are an object
            with type, state_key and content keys set.

            Takes precedence over events set by ``preset``, but gets
            overriden by ``name`` and ``topic`` keys.
          items:
            $ref: '#/components/schemas/StateEvent'
          type: array
        invite:
          description: |-
            A list of user IDs to invite to the room. This will tell the
            server to invite everyone in the list to the newly created room.
          items:
            type: string
          type: array
        invite_3pid:
          description: |-
            A list of objects representing third party IDs to invite into
            the room.
          items:
            $ref: '#/components/schemas/Invite3pid'
          type: array
        is_direct:
          description: |-
            This flag makes the server set the ``is_direct`` flag on the
            ``m.room.member`` events sent to the users in ``invite`` and
            ``invite_3pid``. See `Direct Messaging`_ for more information.
          type: boolean
        name:
          description: |-
            If this is included, an ``m.room.name`` event will be sent
            into the room to indicate the name of the room. See Room
            Events for more information on ``m.room.name``.
          type: string
        power_level_content_override:
          description: |-
            The power level content to override in the default power level
            event. This object is applied on top of the generated `m.room.power_levels`_
            event content prior to it being sent to the room. Defaults to
            overriding nothing.
          properties: {}
          title: Power Level Event Content
          type: object
        preset:
          description: |-
            Convenience parameter for setting various default state events
            based on a preset.

            If unspecified, the server should use the ``visibility`` to determine
            which preset to use. A visbility of ``public`` equates to a preset of
            ``public_chat`` and ``private`` visibility equates to a preset of
            ``private_chat``.
          enum:
          - private_chat
          - public_chat
          - trusted_private_chat
          type: string
        room_alias_name:
          description: |-
            The desired room alias **local part**. If this is included, a
            room alias will be created and mapped to the newly created
            room. The alias will belong on the *same* homeserver which
            created the room. For example, if this was set to "foo" and
            sent to the homeserver "example.com" the complete room alias
            would be ``#foo:example.com``.

            The complete room alias will become the canonical alias for
            the room.
          type: string
        room_version:
          description: |-
            The room version to set for the room. If not provided, the homeserver is
            to use its configured default. If provided, the homeserver will return a
            400 error with the errcode ``M_UNSUPPORTED_ROOM_VERSION`` if it does not
            support the room version.
          example: "1"
          type: string
        topic:
          description: |-
            If this is included, an ``m.room.topic`` event will be sent
            into the room to indicate the topic for the room. See Room
            Events for more information on ``m.room.topic``.
          type: string
        visibility:
          description: |-
            A ``public`` visibility indicates that the room will be shown
            in the published room list. A ``private`` visibility will hide
            the room from the published room list. Rooms default to
            ``private`` visibility if this key is not included. NB: This
            should not be confused with ``join_rules`` which also uses the
            word ``public``.
          enum:
          - public
          - private
          type: string
      type: object
    inline_object_24:
      example:
        reason: Telling unfunny jokes
        user_id: '@cheeky_monkey:matrix.org'
      properties:
        reason:
          description: The reason the user has been banned. This will be supplied
            as the ``reason`` on the target's updated `m.room.member`_ event.
          type: string
        user_id:
          description: The fully qualified user ID of the user being banned.
          type: string
      required:
      - user_id
      type: object
    inline_response_200_47:
      example:
        m.upload.size: 0
      properties:
        m.upload.size:
          description: |-
            The maximum size an upload can be in bytes.
            Clients SHOULD use this as a guide when uploading content.
            If not listed or null, the size limit should be treated as unknown.
          format: int64
          type: integer
    inline_object_3:
      properties:
        auth:
          additionalProperties:
            description: Keys dependent on the login type
            properties: {}
            type: object
          description: Additional authentication information for the user-interactive
            authentication API.
          example:
            example_credential: verypoorsharedsecret
            session: xxxxx
            type: example.type.foo
          title: Authentication Data
          type: object
        new_password:
          description: The new password for the account.
          example: ihatebananas
          type: string
      required:
      - new_password
      type: object
    inline_object_27:
      properties:
        third_party_signed:
          $ref: '#/components/schemas/Third Party Signed'
      type: object
    inline_object_2:
      properties:
        auth:
          additionalProperties:
            description: Keys dependent on the login type
            properties: {}
            type: object
          description: Additional authentication information for the user-interactive
            authentication API.
          example:
            example_credential: verypoorsharedsecret
            session: xxxxx
            type: example.type.foo
          title: Authentication Data
          type: object
        id_server:
          description: |-
            The identity server to unbind all of the user's 3PIDs from.
            If not provided, the homeserver MUST use the ``id_server``
            that was originally use to bind each identifier. If the
            homeserver does not know which ``id_server`` that was,
            it must return an ``id_server_unbind_result`` of
            ``no-support``.
          example: example.org
          type: string
      type: object
    inline_object_26:
      example:
        user_id: '@cheeky_monkey:matrix.org'
      properties:
        user_id:
          description: The fully qualified user ID of the invitee.
          type: string
      required:
      - user_id
      type: object
    Rooms:
      description: Updates to rooms.
      example:
        leave:
          key:
            timeline: '{}'
            account_data: '{}'
            state: '{}'
        invite:
          key:
            invite_state:
              events:
              - state_key: state_key
                sender: sender
                type: type
                content: '{}'
              - state_key: state_key
                sender: sender
                type: type
                content: '{}'
        join:
          key:
            summary:
              m.invited_member_count: 6
              m.heroes:
              - m.heroes
              - m.heroes
              m.joined_member_count: 1
            ephemeral: '{}'
            timeline: '{}'
            account_data: '{}'
            state: '{}'
            unread_notifications:
              highlight_count: 5
              notification_count: 5
      properties:
        invite:
          additionalProperties:
            $ref: '#/components/schemas/Invited Room'
          description: The rooms that the user has been invited to.
          title: Invited Rooms
          type: object
        join:
          additionalProperties:
            $ref: '#/components/schemas/Joined Room'
          description: The rooms that the user has joined.
          title: Joined Rooms
          type: object
        leave:
          additionalProperties:
            $ref: '#/components/schemas/Left Room'
          description: The rooms that the user has left or been banned from.
          title: Left rooms
          type: object
    inline_response_200_49:
      example:
        content_uri: content_uri
      properties:
        content_uri:
          description: The `MXC URI`_ to the uploaded content.
          type: string
      required:
      - content_uri
    inline_object_18:
      example:
        filter:
          generic_search_term: foo
        include_all_networks: false
        limit: 10
        third_party_instance_id: irc
      properties:
        filter:
          $ref: '#/components/schemas/Filter'
        include_all_networks:
          description: |-
            Whether or not to include all known networks/protocols from
            application services on the homeserver. Defaults to false.
          example: false
          type: boolean
        limit:
          description: Limit the number of results returned.
          type: integer
        since:
          description: |-
            A pagination token from a previous request, allowing clients
            to get the next (or previous) batch of rooms.  The direction
            of pagination is specified solely by which token is supplied,
            rather than via an explicit flag.
          type: string
        third_party_instance_id:
          description: |-
            The specific third party network/protocol to request from the
            homeserver. Can only be used if ``include_all_networks`` is false.
          example: irc
          type: string
      type: object
    inline_object_17:
      example:
        displayname: Alice Margatroid
      properties:
        displayname:
          description: The new display name for this user.
          type: string
      type: object
    inline_object_19:
      example:
        app_display_name: Mat Rix
        app_id: com.example.app.ios
        append: false
        data:
          format: event_id_only
          url: https://push-gateway.location.here/_matrix/push/v1/notify
        device_display_name: iPhone 9
        kind: http
        lang: en
        profile_tag: xxyyzz
        pushkey: APA91bHPRgkF3JUikC4ENAHEeMrd41Zxv3hVZjC9KtT8OvPVGJ-hQMRKRrZuJAEcl7B338qju59zJMjw2DELjzEvxwYv7hH5Ynpc1ODQ0aT4U4OFEeco8ohsN5PjL1iC2dNtk2BAokeMCg2ZXKqpc8FXKmhX94kIxQ
      properties:
        app_display_name:
          description: |-
            A string that will allow the user to identify what application
            owns this pusher.
          type: string
        app_id:
          description: |-
            This is a reverse-DNS style identifier for the application.
            It is recommended that this end with the platform, such that
            different platform versions get different app identifiers.
            Max length, 64 chars.

            If the ``kind`` is ``"email"``, this is ``"m.email"``.
          type: string
        append:
          description: |-
            If true, the homeserver should add another pusher with the
            given pushkey and App ID in addition to any others with
            different user IDs. Otherwise, the homeserver must remove any
            other pushers with the same App ID and pushkey for different
            users. The default is ``false``.
          type: boolean
        data:
          $ref: '#/components/schemas/PusherData_1'
        device_display_name:
          description: |-
            A string that will allow the user to identify what device owns
            this pusher.
          type: string
        kind:
          description: |-
            The kind of pusher to configure. ``"http"`` makes a pusher that
            sends HTTP pokes. ``"email"`` makes a pusher that emails the
            user with unread notifications. ``null`` deletes the pusher.
          type: string
        lang:
          description: |-
            The preferred language for receiving notifications (e.g. 'en'
            or 'en-US').
          type: string
        profile_tag:
          description: |-
            This string determines which set of device specific rules this
            pusher executes.
          type: string
        pushkey:
          description: |-
            This is a unique identifier for this pusher. The value you
            should use for this is the routing or destination address
            information for the notification, for example, the APNS token
            for APNS or the Registration ID for GCM. If your notification
            client has no such concept, use any unique identifier.
            Max length, 512 bytes.

            If the ``kind`` is ``"email"``, this is the email address to
            send notifications to.
          type: string
      required:
      - app_display_name
      - app_id
      - data
      - device_display_name
      - kind
      - lang
      - pushkey
      type: object
    Results:
      example:
        search_categories:
          room_events:
            highlights:
            - highlights
            - highlights
            next_batch: next_batch
            count: 0
            groups:
              key:
                key: '{}'
            state:
              key:
              - '{}'
              - '{}'
            results:
            - result:
                room_id: room_id
              context:
                events_before:
                - room_id: room_id
                - room_id: room_id
                start: start
                end: end
                profile_info:
                  key:
                    avatar_url: avatar_url
                    displayname: displayname
                events_after:
                - room_id: room_id
                - room_id: room_id
              rank: 6.027456183070403
            - result:
                room_id: room_id
              context:
                events_before:
                - room_id: room_id
                - room_id: room_id
                start: start
                end: end
                profile_info:
                  key:
                    avatar_url: avatar_url
                    displayname: displayname
                events_after:
                - room_id: room_id
                - room_id: room_id
              rank: 6.027456183070403
      properties:
        search_categories:
          $ref: '#/components/schemas/Result Categories'
      required:
      - search_categories
    Third party identifier:
      example:
        added_at: 0
        address: address
        medium: email
        validated_at: 6
      properties:
        added_at:
          description: The timestamp, in milliseconds, when the homeserver associated
            the third party identifier with the user.
          format: int64
          type: integer
        address:
          description: The third party identifier address.
          type: string
        medium:
          description: The medium of the third party identifier.
          enum:
          - email
          - msisdn
          type: string
        validated_at:
          description: |-
            The timestamp, in milliseconds, when the identifier was
            validated by the identity server.
          format: int64
          type: integer
      required:
      - added_at
      - address
      - medium
      - validated_at
    RoomMember:
      example:
        avatar_url: avatar_url
        display_name: display_name
      properties:
        avatar_url:
          description: The mxc avatar url of the user this object is representing.
          type: string
        display_name:
          description: The display name of the user this object is representing.
          type: string
    Joined Room:
      example:
        summary:
          m.invited_member_count: 6
          m.heroes:
          - m.heroes
          - m.heroes
          m.joined_member_count: 1
        ephemeral: '{}'
        timeline: '{}'
        account_data: '{}'
        state: '{}'
        unread_notifications:
          highlight_count: 5
          notification_count: 5
      properties:
        account_data:
          allOf:
          - properties:
              events:
                description: List of events.
                items:
                  allOf:
                  - description: The basic set of fields all events must have.
                    properties:
                      content:
                        description: The fields in this object will vary depending
                          on the type of event. When interacting with the REST API,
                          this is the HTTP body.
                        properties: {}
                        type: object
                      type:
                        description: The type of event. This SHOULD be namespaced
                          similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
                        type: string
                    required:
                    - content
                    - type
                    title: Event
                    type: object
                  type: object
                type: array
            type: object
          description: |-
            The private data that this user has attached to
            this room.
          title: Account Data
          type: object
        ephemeral:
          allOf:
          - properties:
              events:
                description: List of events.
                items:
                  allOf:
                  - description: The basic set of fields all events must have.
                    properties:
                      content:
                        description: The fields in this object will vary depending
                          on the type of event. When interacting with the REST API,
                          this is the HTTP body.
                        properties: {}
                        type: object
                      type:
                        description: The type of event. This SHOULD be namespaced
                          similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
                        type: string
                    required:
                    - content
                    - type
                    title: Event
                    type: object
                  type: object
                type: array
            type: object
          description: |-
            The ephemeral events in the room that aren't
            recorded in the timeline or state of the room.
            e.g. typing.
          title: Ephemeral
          type: object
        state:
          allOf:
          - properties:
              events:
                description: List of events.
                items:
                  allOf:
                  - description: In addition to the Room Event fields, State Events
                      have the following additional fields.
                    properties:
                      prev_content:
                        description: Optional. The previous ``content`` for this event.
                          If there is no previous content, this key will be missing.
                        properties: {}
                        title: EventContent
                        type: object
                      state_key:
                        description: |-
                          A unique key which defines the overwriting semantics for this piece of room state. This value is often a zero-length string. The presence of this key makes this event a State Event.
                          State keys starting with an ``@`` are reserved for referencing user IDs, such as room members. With the exception of a few events, state events set with a given user's ID as the state key MUST only be set by that user.
                        type: string
                    required:
                    - state_key
                    title: State Event
                    type: object
                  type: object
                type: array
            type: object
          description: |-
            Updates to the state, between the time indicated by
            the ``since`` parameter, and the start of the
            ``timeline`` (or all state up to the start of the
            ``timeline``, if ``since`` is not given, or
            ``full_state`` is true).

            N.B. state updates for ``m.room.member`` events will
            be incomplete if ``lazy_load_members`` is enabled in
            the ``/sync`` filter, and only return the member events
            required to display the senders of the timeline events
            in this response.
          title: State
          type: object
        summary:
          $ref: '#/components/schemas/RoomSummary'
        timeline:
          allOf:
          - properties:
              limited:
                description: True if the number of events returned was limited by
                  the ``limit`` on the filter.
                type: boolean
              prev_batch:
                description: A token that can be supplied to the ``from`` parameter
                  of the rooms/{roomId}/messages endpoint.
                type: string
            type: object
          description: |-
            The timeline of messages and state changes in the
            room.
          title: Timeline
          type: object
        unread_notifications:
          $ref: '#/components/schemas/Unread Notification Counts'
    Event:
      description: The event that matched.
      example:
        room_id: room_id
      properties:
        room_id:
          description: |-
            The ID of the room associated with this event. Will not be present on events
            that arrive through ``/sync``, despite being required everywhere else.
          type: string
      required:
      - room_id
    StateEvent:
      properties:
        content:
          description: The content of the event.
          properties: {}
          type: object
        state_key:
          description: The state_key of the state event. Defaults to an empty string.
          type: string
        type:
          description: The type of event to send.
          type: string
      required:
      - content
      - type
    Tag:
      example:
        order: 0.8008282
      properties:
        order:
          description: |-
            A number in a range ``[0,1]`` describing a relative
            position of the room under the given tag.
          format: float
          type: number
    inline_object_10:
      properties:
        third_party_signed:
          $ref: '#/components/schemas/Third Party Signed'
      type: object
    inline_object_12:
      properties:
        device_keys:
          additionalProperties:
            items:
              description: device ID
              type: string
            type: array
          description: |-
            The keys to be downloaded. A map from user ID, to a list of
            device IDs, or to an empty list to indicate all devices for the
            corresponding user.
          example:
            '@alice:example.com': []
          type: object
        timeout:
          description: |-
            The time (in milliseconds) to wait when downloading keys from
            remote servers. 10 seconds is the recommended default.
          example: 10000
          type: integer
        token:
          description: |-
            If the client is fetching keys as a result of a device update received
            in a sync request, this should be the 'since' token of that sync request,
            or any later sync token. This allows the server to ensure its response
            contains the keys advertised by the notification in that sync.
          type: string
      required:
      - device_keys
      type: object
    inline_object_11:
      properties:
        one_time_keys:
          additionalProperties:
            additionalProperties:
              description: algorithm
              example: signed_curve25519
              type: string
            type: object
          description: |-
            The keys to be claimed. A map from user ID, to a map from
            device ID to algorithm name.
          example:
            '@alice:example.com':
              JLAFKJWSCS: signed_curve25519
          type: object
        timeout:
          description: |-
            The time (in milliseconds) to wait when downloading keys from
            remote servers. 10 seconds is the recommended default.
          example: 10000
          type: integer
      required:
      - one_time_keys
      type: object
    inline_object_14:
      example:
        identifier:
          type: m.id.user
          user: cheeky_monkey
        initial_device_display_name: Jungle Phone
        password: ilovebananas
        type: m.login.password
      properties:
        address:
          description: Third party identifier for the user.  Deprecated in favour
            of ``identifier``.
          type: string
        device_id:
          description: |-
            ID of the client device. If this does not correspond to a
            known client device, a new device will be created. The server
            will auto-generate a device_id if this is not specified.
          type: string
        identifier:
          $ref: '#/components/schemas/User identifier'
        initial_device_display_name:
          description: |-
            A display name to assign to the newly-created device. Ignored
            if ``device_id`` corresponds to a known device.
          type: string
        medium:
          description: When logging in using a third party identifier, the medium
            of the identifier. Must be 'email'.  Deprecated in favour of ``identifier``.
          type: string
        password:
          description: |-
            Required when ``type`` is ``m.login.password``. The user's
            password.
          type: string
        token:
          description: Required when ``type`` is ``m.login.token``. Part of `Token-based`_
            login.
          type: string
        type:
          description: The login type being used.
          enum:
          - m.login.password
          - m.login.token
          type: string
        user:
          description: The fully qualified user ID or just local part of the user
            ID, to log in.  Deprecated in favour of ``identifier``.
          type: string
      required:
      - type
      type: object
    body:
      properties:
        messages:
          additionalProperties:
            additionalProperties:
              description: Message content
              properties: {}
              title: EventContent
              type: object
            type: object
          description: |-
            The messages to send. A map from user ID, to a map from
            device ID to message body. The device ID may also be `*`,
            meaning all known devices for the user.
          example:
            '@alice:example.com':
              TLLBEANAAG:
                example_content_key: value
          type: object
      title: body
      type: object
    ThreePidCredentials:
      description: The third party credentials to associate with the account.
      properties:
        client_secret:
          description: The client secret used in the session with the identity server.
          type: string
        id_server:
          description: The identity server to use.
          type: string
        sid:
          description: The session identifier given by the identity server.
          type: string
      required:
      - client_secret
      - id_server
      - sid
    inline_object_13:
      properties:
        device_keys:
          allOf:
          - description: Device identity keys
            properties:
              algorithms:
                description: The encryption algorithms supported by this device.
                example:
                - m.olm.v1.curve25519-aes-sha2
                - m.megolm.v1.aes-sha2
                items:
                  type: string
                type: array
              device_id:
                description: |-
                  The ID of the device these keys belong to. Must match the device ID used
                  when logging in.
                example: JLAFKJWSCS
                type: string
              keys:
                additionalProperties:
                  type: string
                description: |-
                  Public identity keys. The names of the properties should be in the
                  format ``<algorithm>:<device_id>``. The keys themselves should be
                  encoded as specified by the key algorithm.
                example:
                  curve25519:JLAFKJWSCS: 3C5BFWi2Y8MaVvjM8M22DBmh24PmgR0nPvJOIArzgyI
                  ed25519:JLAFKJWSCS: lEuiRJBit0IG6nUf5pUzWTUEsRVVe/HJkoKuEww9ULI
                type: object
              signatures:
                additionalProperties:
                  additionalProperties:
                    type: string
                  type: object
                description: |-
                  Signatures for the device key object. A map from user ID, to a map from
                  ``<algorithm>:<device_id>`` to the signature.

                  The signature is calculated using the process described at `Signing
                  JSON`_.
                example:
                  '@alice:example.com':
                    ed25519:JLAFKJWSCS: dSO80A01XiigH3uBiDVx/EjzaoycHcjq9lfQX0uWsqxl2giMIiSPR8a4d291W1ihKJL/a+myXS367WT6NAIcBA
                type: object
              user_id:
                description: |-
                  The ID of the user the device belongs to. Must match the user ID used
                  when logging in.
                example: '@alice:example.com'
                type: string
            required:
            - algorithms
            - device_id
            - keys
            - signatures
            - user_id
            title: DeviceKeys
            type: object
          description: |-
            Identity keys for the device. May be absent if no new
            identity keys are required.
          type: object
        one_time_keys:
          description: |-
            One-time public keys for "pre-key" messages.  The names of
            the properties should be in the format
            ``<algorithm>:<key_id>``. The format of the key is determined
            by the `key algorithm <#key-algorithms>`_.

            May be absent if no new one-time keys are required.
          example: ""
          type: object
      type: object
    inline_object_16:
      example:
        avatar_url: mxc://matrix.org/wefh34uihSDRGhw34
      properties:
        avatar_url:
          description: The new avatar URL for this user.
          type: string
      type: object
    Unread Notification Counts:
      description: |-
        Counts of unread notifications for this room. See the
        `Receiving notifications section <#receiving-notifications>`_
        for more information on how these are calculated.
      example:
        highlight_count: 5
        notification_count: 5
      properties:
        highlight_count:
          description: The number of unread notifications for this room with the highlight
            flag set
          title: Highlighted notification count
          type: integer
        notification_count:
          description: The total number of unread notifications for this room
          title: Total notification count
          type: integer
    inline_object_15:
      example:
        presence: online
        status_msg: I am here.
      properties:
        presence:
          description: The new presence state.
          enum:
          - online
          - offline
          - unavailable
          type: string
        status_msg:
          description: The status message to attach to this state.
          type: string
      required:
      - presence
      type: object
    Result:
      description: The result object.
      example:
        result:
          room_id: room_id
        context:
          events_before:
          - room_id: room_id
          - room_id: room_id
          start: start
          end: end
          profile_info:
            key:
              avatar_url: avatar_url
              displayname: displayname
          events_after:
          - room_id: room_id
          - room_id: room_id
        rank: 6.027456183070403
      properties:
        context:
          $ref: '#/components/schemas/Event Context'
        rank:
          description: A number that describes how closely this result matches the
            search. Higher is closer.
          type: number
        result:
          $ref: '#/components/schemas/Event'
    User identifier:
      description: Identification information for the user.
      properties:
        type:
          description: The type of identification.  See `Identifier types`_ for supported
            values and additional property descriptions.
          type: string
      required:
      - type
    inline_response_200_9:
      example:
        room_id: room_id
        servers:
        - servers
        - servers
      properties:
        room_id:
          description: The room ID for this room alias.
          type: string
        servers:
          description: A list of servers that are aware of this room alias.
          items:
            description: A server which is aware of this room alias.
            type: string
          type: array
    inline_response_200_5:
      example:
        capabilities:
          key: '{}'
      properties:
        capabilities:
          additionalProperties:
            properties: {}
            type: object
          description: |-
            The custom capabilities the server supports, using the
            Java package naming convention.
          title: Capabilities
          type: object
      required:
      - capabilities
    inline_response_200_6:
      description: Information about the newly created room.
      example:
        room_id: room_id
      properties:
        room_id:
          description: The created room's ID.
          type: string
      required:
      - room_id
    inline_response_200_7:
      example:
        devices:
        - '{}'
        - '{}'
      properties:
        devices:
          description: A list of all registered devices for this user.
          items:
            allOf:
            - description: A client device
              properties:
                device_id:
                  description: Identifier of this device.
                  example: QBUAZIFURK
                  type: string
                display_name:
                  description: |-
                    Display name set by the user for this device. Absent if no name has been
                    set.
                  example: android
                  type: string
                last_seen_ip:
                  description: |-
                    The IP address where this device was last seen. (May be a few minutes out
                    of date, for efficiency reasons).
                  example: 1.2.3.4
                  type: string
                last_seen_ts:
                  description: |-
                    The timestamp (in milliseconds since the unix epoch) when this devices
                    was last seen. (May be a few minutes out of date, for efficiency
                    reasons).
                  example: 1474491775024
                  format: int64
                  type: integer
              required:
              - device_id
              title: Device
              type: object
            type: object
          type: array
    inline_response_200_8:
      example:
        last_seen_ip: 1.2.3.4
        device_id: QBUAZIFURK
        last_seen_ts: 1474491775024
        display_name: android
      properties:
        device_id:
          description: Identifier of this device.
          example: QBUAZIFURK
          type: string
        display_name:
          description: |-
            Display name set by the user for this device. Absent if no name has been
            set.
          example: android
          type: string
        last_seen_ip:
          description: |-
            The IP address where this device was last seen. (May be a few minutes out
            of date, for efficiency reasons).
          example: 1.2.3.4
          type: string
        last_seen_ts:
          description: |-
            The timestamp (in milliseconds since the unix epoch) when this devices
            was last seen. (May be a few minutes out of date, for efficiency
            reasons).
          example: 1474491775024
          format: int64
          type: integer
      required:
      - device_id
    Groupings:
      description: |-
        Requests that the server partitions the result set
        based on the provided list of keys.
      properties:
        group_by:
          description: List of groups to request.
          items:
            $ref: '#/components/schemas/Group'
          title: Groups
          type: array
    Result Categories:
      description: Describes which categories to search in and their criteria.
      example:
        room_events:
          highlights:
          - highlights
          - highlights
          next_batch: next_batch
          count: 0
          groups:
            key:
              key: '{}'
          state:
            key:
            - '{}'
            - '{}'
          results:
          - result:
              room_id: room_id
            context:
              events_before:
              - room_id: room_id
              - room_id: room_id
              start: start
              end: end
              profile_info:
                key:
                  avatar_url: avatar_url
                  displayname: displayname
              events_after:
              - room_id: room_id
              - room_id: room_id
            rank: 6.027456183070403
          - result:
              room_id: room_id
            context:
              events_before:
              - room_id: room_id
              - room_id: room_id
              start: start
              end: end
              profile_info:
                key:
                  avatar_url: avatar_url
                  displayname: displayname
              events_after:
              - room_id: room_id
              - room_id: room_id
            rank: 6.027456183070403
      properties:
        room_events:
          $ref: '#/components/schemas/Result Room Events'
    Authentication_response_flows:
      properties:
        stages:
          description: |-
            The login type of each of the stages required to complete this
            authentication flow
          items:
            example: example.type.foo
            type: string
          type: array
      required:
      - stages
    inline_response_200_1:
      example:
        id_server_unbind_result: success
      properties:
        id_server_unbind_result:
          description: |-
            An indicator as to whether or not the homeserver was able to unbind
            the 3PID from the identity server. ``success`` indicates that the
            indentity server has unbound the identifier whereas ``no-support``
            indicates that the identity server refuses to support the request
            or the homeserver was not able to determine an identity server to
            unbind from.
          enum:
          - no-support
          - success
          example: success
          type: string
      required:
      - id_server_unbind_result
    inline_response_200_2:
      example:
        id_server_unbind_result: success
      properties:
        id_server_unbind_result:
          description: |-
            An indicator as to whether or not the homeserver was able to unbind
            the user's 3PIDs from the identity server(s). ``success`` indicates
            that all identifiers have been unbound from the identity server while
            ``no-support`` indicates that one or more identifiers failed to unbind
            due to the identity server refusing the request or the homeserver
            being unable to determine an identity server to unbind from. This
            must be ``success`` if the homeserver has no identifiers to unbind
            for the user.
          enum:
          - success
          - no-support
          example: success
          type: string
      required:
      - id_server_unbind_result
    inline_response_200_3:
      example:
        user_id: user_id
      properties:
        user_id:
          description: The user id that owns the access token.
          type: string
      required:
      - user_id
    inline_response_200_4:
      example:
        devices:
          key:
            sessions:
            - connections:
              - last_seen: 0
                ip: ip
                user_agent: user_agent
              - last_seen: 0
                ip: ip
                user_agent: user_agent
            - connections:
              - last_seen: 0
                ip: ip
                user_agent: user_agent
              - last_seen: 0
                ip: ip
                user_agent: user_agent
        user_id: user_id
      properties:
        devices:
          additionalProperties:
            $ref: '#/components/schemas/DeviceInfo'
          description: Each key is an identitfier for one of the user's devices.
          type: object
        user_id:
          description: The Matrix user ID of the user.
          type: string
    inline_response_200_11:
      example:
        type: type
        content: '{}'
      properties:
        content:
          description: The fields in this object will vary depending on the type of
            event. When interacting with the REST API, this is the HTTP body.
          properties: {}
          type: object
        type:
          description: The type of event. This SHOULD be namespaced similar to Java
            package naming conventions e.g. 'com.example.subdomain.event.type'
          type: string
      required:
      - content
      - type
    inline_response_200_10:
      example:
        start: start
        chunk:
        - '{}'
        - '{}'
        end: end
      properties:
        chunk:
          description: An array of events.
          items:
            allOf:
            - description: Room Events have the following fields.
              properties:
                room_id:
                  description: |-
                    The ID of the room associated with this event. Will not be present on events
                    that arrive through ``/sync``, despite being required everywhere else.
                  type: string
              required:
              - room_id
              title: Room Event
              type: object
            title: Event
            type: object
          type: array
        end:
          description: |-
            A token which correlates to the last value in ``chunk``. This
            token should be used in the next request to ``/events``.
          type: string
        start:
          description: |-
            A token which correlates to the first value in ``chunk``. This
            is usually the same token supplied to ``from=``.
          type: string
    inline_response_200_13:
      example:
        room_id: room_id
      properties:
        room_id:
          description: The joined room ID.
          type: string
      required:
      - room_id
    inline_response_200_12:
      example:
        rooms:
        - room_id: room_id
          visibility: private
          messages:
            start: start
            chunk:
            - '{}'
            - '{}'
            end: end
          account_data:
          - '{}'
          - '{}'
          invite: '{}'
          membership: invite
          state:
          - '{}'
          - '{}'
        - room_id: room_id
          visibility: private
          messages:
            start: start
            chunk:
            - '{}'
            - '{}'
            end: end
          account_data:
          - '{}'
          - '{}'
          invite: '{}'
          membership: invite
          state:
          - '{}'
          - '{}'
        account_data:
        - '{}'
        - '{}'
        end: end
        presence:
        - '{}'
        - '{}'
      properties:
        account_data:
          description: The global private data created by this user.
          items:
            allOf:
            - description: The basic set of fields all events must have.
              properties:
                content:
                  description: The fields in this object will vary depending on the
                    type of event. When interacting with the REST API, this is the
                    HTTP body.
                  properties: {}
                  type: object
                type:
                  description: The type of event. This SHOULD be namespaced similar
                    to Java package naming conventions e.g. 'com.example.subdomain.event.type'
                  type: string
              required:
              - content
              - type
              title: Event
              type: object
            title: Event
            type: object
          type: array
        end:
          description: |-
            A token which correlates to the last value in ``chunk``. This
            token should be used with the ``/events`` API to listen for new
            events.
          type: string
        presence:
          description: A list of presence events.
          items:
            allOf:
            - description: The basic set of fields all events must have.
              properties:
                content:
                  description: The fields in this object will vary depending on the
                    type of event. When interacting with the REST API, this is the
                    HTTP body.
                  properties: {}
                  type: object
                type:
                  description: The type of event. This SHOULD be namespaced similar
                    to Java package naming conventions e.g. 'com.example.subdomain.event.type'
                  type: string
              required:
              - content
              - type
              title: Event
              type: object
            title: Event
            type: object
          type: array
        rooms:
          items:
            $ref: '#/components/schemas/RoomInfo'
          type: array
      required:
      - end
      - presence
      - rooms
    Include Event Context:
      description: |-
        Configures whether any context for the events
        returned are included in the response.
      properties:
        after_limit:
          description: |-
            How many events after the result are
            returned. By default, this is ``5``.
          title: After limit
          type: integer
        before_limit:
          description: |-
            How many events before the result are
            returned. By default, this is ``5``.
          title: Before limit
          type: integer
        include_profile:
          description: |-
            Requests that the server returns the
            historic profile information for the users
            that sent the events that were returned.
            By default, this is ``false``.
          title: Return profile information
          type: boolean
    User:
      example:
        avatar_url: mxc://bar.com/foo
        user_id: '@foo:bar.com'
        display_name: Foo
      properties:
        avatar_url:
          description: The avatar url, as an MXC, if one exists.
          example: mxc://bar.com/foo
          type: string
        display_name:
          description: The display name of the user, if one exists.
          example: Foo
          type: string
        user_id:
          description: The user's matrix user ID.
          example: '@foo:bar.com'
          type: string
      required:
      - user_id
    inline_response_200_19:
      example:
        flows:
        - type: type
        - type: type
      properties:
        flows:
          description: The homeserver's supported login types
          items:
            $ref: '#/components/schemas/LoginFlow'
          type: array
    InviteState:
      description: |-
        The state of a room that the user has been invited
        to. These state events may only have the ``sender``,
        ``type``, ``state_key`` and ``content`` keys
        present. These events do not replace any state that
        the client already has for the room, for example if
        the client has archived the room. Instead the
        client should keep two separate copies of the
        state: the one from the ``invite_state`` and one
        from the archived ``state``. If the client joins
        the room then the current state will be given as a
        delta against the archived ``state`` not the
        ``invite_state``.
      example:
        events:
        - state_key: state_key
          sender: sender
          type: type
          content: '{}'
        - state_key: state_key
          sender: sender
          type: type
          content: '{}'
      properties:
        events:
          description: The StrippedState events that form the invite state.
          items:
            $ref: '#/components/schemas/StrippedState'
          type: array
    RoomInfo:
      example:
        room_id: room_id
        visibility: private
        messages:
          start: start
          chunk:
          - '{}'
          - '{}'
          end: end
        account_data:
        - '{}'
        - '{}'
        invite: '{}'
        membership: invite
        state:
        - '{}'
        - '{}'
      properties:
        account_data:
          description: |-
            The private data that this user has attached to
            this room.
          items:
            allOf:
            - description: The basic set of fields all events must have.
              properties:
                content:
                  description: The fields in this object will vary depending on the
                    type of event. When interacting with the REST API, this is the
                    HTTP body.
                  properties: {}
                  type: object
                type:
                  description: The type of event. This SHOULD be namespaced similar
                    to Java package naming conventions e.g. 'com.example.subdomain.event.type'
                  type: string
              required:
              - content
              - type
              title: Event
              type: object
            title: Event
            type: object
          type: array
        invite:
          allOf:
          - description: |-
              Adjusts the membership state for a user in a room. It is preferable to use the membership APIs (``/rooms/<room id>/invite`` etc) when performing membership actions rather than adjusting the state directly as there are a restricted set of valid transformations. For example, user A cannot force user B to join a room, and trying to force this state change directly will fail.

              The following membership states are specified:

              - ``invite`` - The user has been invited to join a room, but has not yet joined it. They may not participate in the room until they join.

              - ``join`` - The user has joined the room (possibly after accepting an invite), and may participate in it.

              - ``leave`` - The user was once joined to the room, but has since left (possibly by choice, or possibly by being kicked).

              - ``ban`` - The user has been banned from the room, and is no longer allowed to join it until they are un-banned from the room (by having their membership state set to a value other than ``ban``).

              - ``knock`` - This is a reserved word, which currently has no meaning.

              The ``third_party_invite`` property will be set if this invite is an ``invite`` event and is the successor of an ``m.room.third_party_invite`` event, and absent otherwise.

              This event may also include an ``invite_room_state`` key inside the event's ``unsigned`` data.
              If present, this contains an array of ``StrippedState`` Events. These events provide information
              on a subset of state events such as the room name.

              The user for which a membership applies is represented by the ``state_key``. Under some conditions,
              the ``sender`` and ``state_key`` may not match - this may be interpreted as the ``sender`` affecting
              the membership state of the ``state_key`` user.

              The ``membership`` for a given user can change over time. The table below represents the various changes
              over time and how clients and servers must interpret those changes. Previous membership can be retrieved
              from the ``prev_content`` object on an event. If not present, the user's previous membership must be assumed
              as ``leave``.

              .. TODO: Improve how this table is written? We use a csv-table to get around vertical header restrictions.

              .. csv-table::
                :header-rows: 1
                :stub-columns: 1

                "","to ``invite``","to ``join``","to ``leave``","to ``ban``","to ``knock``"
                "from ``invite``","No change.","User joined the room.","If the ``state_key`` is the same as the ``sender``, the user rejected the invite. Otherwise, the ``state_key`` user had their invite revoked.","User was banned.","Not implemented."
                "from ``join``","Must never happen.","``displayname`` or ``avatar_url`` changed.","If the ``state_key`` is the same as the ``sender``, the user left. Otherwise, the ``state_key`` user was kicked.","User was kicked and banned.","Not implemented."
                "from ``leave``","New invitation sent.","User joined.","No change.","User was banned.","Not implemented."
                "from ``ban``","Must never happen.","Must never happen.","User was unbanned.","No change.","Not implemented."
                "from ``knock``","Not implemented.","Not implemented.","Not implemented.","Not implemented.","Not implemented."
            properties:
              content:
                properties:
                  avatar_url:
                    description: The avatar URL for this user, if any. This is added
                      by the homeserver.
                    type: string
                  is_direct:
                    description: Flag indicating if the room containing this event
                      was created with the intention of being a direct chat. See `Direct
                      Messaging`_.
                    type: boolean
                  membership:
                    description: The membership state of the user.
                    enum:
                    - invite
                    - join
                    - knock
                    - leave
                    - ban
                    type: string
                  third_party_invite:
                    properties:
                      display_name:
                        description: A name which can be displayed to represent the
                          user instead of their third party identifier
                        type: string
                      signed:
                        description: A block of content which has been signed, which
                          servers can use to verify the event. Clients should ignore
                          this.
                        properties:
                          mxid:
                            description: The invited matrix user ID. Must be equal
                              to the user_id property of the event.
                            type: string
                          signatures:
                            description: A single signature from the verifying server,
                              in the format specified by the Signing Events section
                              of the server-server API.
                            properties: {}
                            title: Signatures
                            type: object
                          token:
                            description: The token property of the containing third_party_invite
                              object.
                            type: string
                        required:
                        - mxid
                        - signatures
                        - token
                        title: signed
                        type: object
                    required:
                    - display_name
                    - signed
                    title: Invite
                    type: object
                  unsigned:
                    description: Contains optional extra information about the event.
                    properties:
                      invite_room_state:
                        description: A subset of the state of the room at the time
                          of the invite, if ``membership`` is ``invite``. Note that
                          this state is informational, and SHOULD NOT be trusted;
                          once the client has joined the room, it SHOULD fetch the
                          live state from the server and discard the invite_room_state.
                          Also, clients must not rely on any particular state being
                          present here; they SHOULD behave properly (with possibly
                          a degraded but not a broken experience) in the absence of
                          any particular events here. If they are set on the room,
                          at least the state for ``m.room.avatar``, ``m.room.canonical_alias``,
                          ``m.room.join_rules``, and ``m.room.name`` SHOULD be included.
                        items:
                          description: |-
                            A stripped down state event, with only the ``type``, ``state_key``,
                            ``sender``, and ``content`` keys.
                          properties:
                            content:
                              description: The ``content`` for the event.
                              properties: {}
                              title: EventContent
                              type: object
                            sender:
                              description: The ``sender`` for the event.
                              type: string
                            state_key:
                              description: The ``state_key`` for the event.
                              type: string
                            type:
                              description: The ``type`` for the event.
                              type: string
                          required:
                          - content
                          - sender
                          - state_key
                          - type
                          title: StrippedState
                          type: object
                        type: array
                    title: UnsignedData
                    type: object
                required:
                - membership
                title: EventContent
                type: object
              state_key:
                description: |-
                  The ``user_id`` this membership event relates to. In all cases except for when ``membership`` is
                  ``join``, the user ID sending the event does not need to match the user ID in the ``state_key``,
                  unlike other events. Regular authorisation rules still apply.
                type: string
              type:
                enum:
                - m.room.member
                type: string
            title: The current membership state of a user in the room.
            type: object
          description: The invite event if ``membership`` is ``invite``
          title: InviteEvent
          type: object
        membership:
          description: The user's membership state in this room.
          enum:
          - invite
          - join
          - leave
          - ban
          type: string
        messages:
          $ref: '#/components/schemas/PaginationChunk'
        room_id:
          description: The ID of this room.
          type: string
        state:
          description: |-
            If the user is a member of the room this will be the
            current state of the room as a list of events. If the
            user has left the room this will be the state of the
            room when they left it.
          items:
            allOf:
            - allOf:
              - description: Room Events have the following fields.
                properties:
                  room_id:
                    description: |-
                      The ID of the room associated with this event. Will not be present on events
                      that arrive through ``/sync``, despite being required everywhere else.
                    type: string
                required:
                - room_id
                title: Room Event
                type: object
              - description: In addition to the Room Event fields, State Events have
                  the following additional fields.
                properties:
                  prev_content:
                    description: Optional. The previous ``content`` for this event.
                      If there is no previous content, this key will be missing.
                    properties: {}
                    title: EventContent
                    type: object
                  state_key:
                    description: |-
                      A unique key which defines the overwriting semantics for this piece of room state. This value is often a zero-length string. The presence of this key makes this event a State Event.
                      State keys starting with an ``@`` are reserved for referencing user IDs, such as room members. With the exception of a few events, state events set with a given user's ID as the state key MUST only be set by that user.
                    type: string
                required:
                - state_key
                title: State Event
                type: object
              description: State Events have the following fields.
              title: State Event
              type: object
            title: StateEvent
            type: object
          type: array
        visibility:
          description: |-
            Whether this room is visible to the ``/publicRooms`` API
            or not."
          enum:
          - private
          - public
          type: string
      required:
      - membership
      - room_id
    inline_response_200_18:
      example:
        one_time_key_counts:
          curve25519: 10
          signed_curve25519: 20
      properties:
        one_time_key_counts:
          additionalProperties:
            type: integer
          description: |-
            For each key algorithm, the number of unclaimed one-time keys
            of that type currently held on the server for this device.
          example:
            curve25519: 10
            signed_curve25519: 20
          type: object
      required:
      - one_time_key_counts
    inline_response_200_15:
      example:
        left:
        - '@clara:example.com'
        - '@doug:example.org'
        changed:
        - '@alice:example.com'
        - '@bob:example.org'
      properties:
        changed:
          description: |-
            The Matrix User IDs of all users who updated their device
            identity keys.
          example:
          - '@alice:example.com'
          - '@bob:example.org'
          items:
            type: string
          type: array
        left:
          description: |-
            The Matrix User IDs of all users who may have left all
            the end-to-end encrypted rooms they previously shared
            with the user.
          example:
          - '@clara:example.com'
          - '@doug:example.org'
          items:
            type: string
          type: array
    inline_response_200_14:
      example:
        joined_rooms:
        - joined_rooms
        - joined_rooms
      properties:
        joined_rooms:
          description: The ID of each room in which the user has ``joined`` membership.
          items:
            type: string
          type: array
      required:
      - joined_rooms
    inline_response_200_17:
      example:
        failures: {}
        device_keys:
          '@alice:example.com':
            JLAFKJWSCS:
              algorithms:
              - m.olm.v1.curve25519-aes-sha2
              - m.megolm.v1.aes-sha2
              device_id: JLAFKJWSCS
              keys:
                curve25519:JLAFKJWSCS: 3C5BFWi2Y8MaVvjM8M22DBmh24PmgR0nPvJOIArzgyI
                ed25519:JLAFKJWSCS: lEuiRJBit0IG6nUf5pUzWTUEsRVVe/HJkoKuEww9ULI
              signatures:
                '@alice:example.com':
                  ed25519:JLAFKJWSCS: dSO80A01XiigH3uBiDVx/EjzaoycHcjq9lfQX0uWsqxl2giMIiSPR8a4d291W1ihKJL/a+myXS367WT6NAIcBA
              unsigned:
                device_display_name: Alice's mobile phone
              user_id: '@alice:example.com'
      properties:
        device_keys:
          additionalProperties:
            additionalProperties:
              properties:
                unsigned:
                  description: |-
                    Additional data added to the device key information
                    by intermediate servers, and not covered by the
                    signatures.
                  properties:
                    device_display_name:
                      description: The display name which the user set on the device.
                      type: string
                  title: UnsignedDeviceInfo
                  type: object
              type: object
            type: object
          description: |-
            Information on the queried devices. A map from user ID, to a
            map from device ID to device information.  For each device,
            the information returned will be the same as uploaded via
            ``/keys/upload``, with the addition of an ``unsigned``
            property.
          example:
            '@alice:example.com':
              JLAFKJWSCS:
                algorithms:
                - m.olm.v1.curve25519-aes-sha2
                - m.megolm.v1.aes-sha2
                device_id: JLAFKJWSCS
                keys:
                  curve25519:JLAFKJWSCS: 3C5BFWi2Y8MaVvjM8M22DBmh24PmgR0nPvJOIArzgyI
                  ed25519:JLAFKJWSCS: lEuiRJBit0IG6nUf5pUzWTUEsRVVe/HJkoKuEww9ULI
                signatures:
                  '@alice:example.com':
                    ed25519:JLAFKJWSCS: dSO80A01XiigH3uBiDVx/EjzaoycHcjq9lfQX0uWsqxl2giMIiSPR8a4d291W1ihKJL/a+myXS367WT6NAIcBA
                unsigned:
                  device_display_name: Alice's mobile phone
                user_id: '@alice:example.com'
          type: object
        failures:
          additionalProperties:
            properties: {}
            type: object
          description: |-
            If any remote homeservers could not be reached, they are
            recorded here. The names of the properties are the names of
            the unreachable servers.

            If the homeserver could be reached, but the user or device
            was unknown, no failure is recorded. Instead, the corresponding
            user or device is missing from the ``device_keys`` result.
          example: {}
          type: object
    inline_response_200_16:
      example:
        failures: {}
        one_time_keys:
          '@alice:example.com':
            JLAFKJWSCS:
              signed_curve25519:AAAAHg:
                key: zKbLg+NrIjpnagy+pIY6uPL4ZwEG2v+8F9lmgsnlZzs
                signatures:
                  '@alice:example.com':
                    ed25519:JLAFKJWSCS: FLWxXqGbwrb8SM3Y795eB6OA8bwBcoMZFXBqnTn58AYWZSqiD45tlBVcDa2L7RwdKXebW/VzDlnfVJ+9jok1Bw
      properties:
        failures:
          additionalProperties:
            properties: {}
            type: object
          description: |-
            If any remote homeservers could not be reached, they are
            recorded here. The names of the properties are the names of
            the unreachable servers.

            If the homeserver could be reached, but the user or device
            was unknown, no failure is recorded. Instead, the corresponding
            user or device is missing from the ``one_time_keys`` result.
          example: {}
          type: object
        one_time_keys:
          additionalProperties:
            type: object
          description: |-
            One-time keys for the queried devices. A map from user ID, to a
            map from devices to a map from ``<algorithm>:<key_id>`` to the key object.

            See the `key algorithms <#key-algorithms>`_ section for information
            on the Key Object format.
          example:
            '@alice:example.com':
              JLAFKJWSCS:
                signed_curve25519:AAAAHg:
                  key: zKbLg+NrIjpnagy+pIY6uPL4ZwEG2v+8F9lmgsnlZzs
                  signatures:
                    '@alice:example.com':
                      ed25519:JLAFKJWSCS: FLWxXqGbwrb8SM3Y795eB6OA8bwBcoMZFXBqnTn58AYWZSqiD45tlBVcDa2L7RwdKXebW/VzDlnfVJ+9jok1Bw
          type: object
      required:
      - one_time_keys
    inline_response_200:
      example:
        threepids:
        - added_at: 0
          address: address
          medium: email
          validated_at: 6
        - added_at: 0
          address: address
          medium: email
          validated_at: 6
      properties:
        threepids:
          items:
            $ref: '#/components/schemas/Third party identifier'
          type: array
    PaginationChunk:
      description: The pagination chunk for this room.
      example:
        start: start
        chunk:
        - '{}'
        - '{}'
        end: end
      properties:
        chunk:
          description: |-
            If the user is a member of the room this will be a
            list of the most recent messages for this room. If
            the user has left the room this will be the
            messages that preceeded them leaving. This array
            will consist of at most ``limit`` elements.
          items:
            allOf:
            - description: Room Events have the following fields.
              properties:
                room_id:
                  description: |-
                    The ID of the room associated with this event. Will not be present on events
                    that arrive through ``/sync``, despite being required everywhere else.
                  type: string
              required:
              - room_id
              title: Room Event
              type: object
            title: RoomEvent
            type: object
          type: array
        end:
          description: |-
            A token which correlates to the last value in ``chunk``.
            Used for pagination.
          type: string
        start:
          description: |-
            A token which correlates to the first value in ``chunk``.
            Used for pagination.
          type: string
      required:
      - chunk
      - end
      - start
    Invited Room:
      example:
        invite_state:
          events:
          - state_key: state_key
            sender: sender
            type: type
            content: '{}'
          - state_key: state_key
            sender: sender
            type: type
            content: '{}'
      properties:
        invite_state:
          $ref: '#/components/schemas/InviteState'
    LoginFlow:
      example:
        type: type
      properties:
        type:
          description: |-
            The login type. This is supplied as the ``type`` when
            logging in.
          type: string
    PusherData_1:
      description: |-
        A dictionary of information for the pusher implementation
        itself. If ``kind`` is ``http``, this should contain ``url``
        which is the URL to use to send notifications to.
      properties:
        format:
          description: |-
            The format to send notifications in to Push Gateways if the
            ``kind`` is ``http``. The details about what fields the
            homeserver should send to the push gateway are defined in the
            `Push Gateway Specification`_. Currently the only format
            available is 'event_id_only'.
          type: string
        url:
          description: "Required if ``kind`` is ``http``. The URL to use to send\n\
            notifications to. MUST be an HTTPS URL with a path of \n``/_matrix/push/v1/notify``."
          example: https://push-gateway.location.here/_matrix/push/v1/notify
          type: string
    Left Room:
      example:
        timeline: '{}'
        account_data: '{}'
        state: '{}'
      properties:
        account_data:
          allOf:
          - properties:
              events:
                description: List of events.
                items:
                  allOf:
                  - description: The basic set of fields all events must have.
                    properties:
                      content:
                        description: The fields in this object will vary depending
                          on the type of event. When interacting with the REST API,
                          this is the HTTP body.
                        properties: {}
                        type: object
                      type:
                        description: The type of event. This SHOULD be namespaced
                          similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
                        type: string
                    required:
                    - content
                    - type
                    title: Event
                    type: object
                  type: object
                type: array
            type: object
          description: |-
            The private data that this user has attached to
            this room.
          title: Account Data
          type: object
        state:
          allOf:
          - properties:
              events:
                description: List of events.
                items:
                  allOf:
                  - description: In addition to the Room Event fields, State Events
                      have the following additional fields.
                    properties:
                      prev_content:
                        description: Optional. The previous ``content`` for this event.
                          If there is no previous content, this key will be missing.
                        properties: {}
                        title: EventContent
                        type: object
                      state_key:
                        description: |-
                          A unique key which defines the overwriting semantics for this piece of room state. This value is often a zero-length string. The presence of this key makes this event a State Event.
                          State keys starting with an ``@`` are reserved for referencing user IDs, such as room members. With the exception of a few events, state events set with a given user's ID as the state key MUST only be set by that user.
                        type: string
                    required:
                    - state_key
                    title: State Event
                    type: object
                  type: object
                type: array
            type: object
          description: The state updates for the room up to the start of the timeline.
          title: State
          type: object
        timeline:
          allOf:
          - properties:
              limited:
                description: True if the number of events returned was limited by
                  the ``limit`` on the filter.
                type: boolean
              prev_batch:
                description: A token that can be supplied to the ``from`` parameter
                  of the rooms/{roomId}/messages endpoint.
                type: string
            type: object
          description: |-
            The timeline of messages and state changes in the
            room up to the point when the user left.
          title: Timeline
          type: object
    PublicRoomsChunk:
      example:
        room_id: room_id
        aliases:
        - aliases
        - aliases
        avatar_url: avatar_url
        name: name
        world_readable: true
        topic: topic
        canonical_alias: canonical_alias
        guest_can_join: true
        num_joined_members: 0
      properties:
        aliases:
          description: Aliases of the room. May be empty.
          items:
            type: string
          type: array
        avatar_url:
          description: The URL for the room's avatar, if one is set.
          type: string
        canonical_alias:
          description: The canonical alias of the room, if any.
          type: string
        guest_can_join:
          description: |-
            Whether guest users may join the room and participate in it.
            If they can, they will be subject to ordinary power level
            rules like any other user.
          type: boolean
        name:
          description: The name of the room, if any.
          type: string
        num_joined_members:
          description: The number of members joined to the room.
          type: integer
        room_id:
          description: The ID of the room.
          type: string
        topic:
          description: The topic of the room, if any.
          type: string
        world_readable:
          description: Whether the room may be viewed by guest users without joining.
          type: boolean
      required:
      - guest_can_join
      - num_joined_members
      - room_id
      - world_readable
    Filter:
      description: Filter to apply to the results.
      properties:
        generic_search_term:
          description: |-
            A string to search for in the room metadata, e.g. name,
            topic, canonical alias etc. (Optional).
          type: string
    inline_object:
      example:
        bind: false
        three_pid_creds:
          client_secret: d0n'tT3ll
          id_server: matrix.org
          sid: abc123987
      properties:
        bind:
          description: |-
            Whether the homeserver should also bind this third party
            identifier to the account's Matrix ID with the passed identity
            server. Default: ``false``.
          type: boolean
        three_pid_creds:
          $ref: '#/components/schemas/ThreePidCredentials'
      required:
      - three_pid_creds
      type: object
    Event Context:
      description: Context for result, if requested.
      example:
        events_before:
        - room_id: room_id
        - room_id: room_id
        start: start
        end: end
        profile_info:
          key:
            avatar_url: avatar_url
            displayname: displayname
        events_after:
        - room_id: room_id
        - room_id: room_id
      properties:
        end:
          description: Pagination token for the end of the chunk
          title: End Token
          type: string
        events_after:
          description: Events just after the result.
          items:
            $ref: '#/components/schemas/RoomEvent'
          title: Events After
          type: array
        events_before:
          description: Events just before the result.
          items:
            $ref: '#/components/schemas/RoomEvent'
          title: Events Before
          type: array
        profile_info:
          additionalProperties:
            $ref: '#/components/schemas/User Profile'
          description: |-
            The historic profile information of the
            users that sent the events returned.

            The ``string`` key is the user ID for which
            the profile belongs to.
          title: Profile Information
          type: object
        start:
          description: Pagination token for the start of the chunk
          title: Start Token
          type: string
  securitySchemes:
    accessToken:
      description: The access_token returned by a call to ``/login`` or ``/register``
      in: query
      name: access_token
      type: apiKey
